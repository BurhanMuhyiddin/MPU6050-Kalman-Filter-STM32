
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08007348  08007348  00017348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077d8  080077d8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080077d8  080077d8  000177d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077e0  080077e0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077e0  080077e0  000177e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077e4  080077e4  000177e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080077e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  200001dc  080079c4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  080079c4  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c95a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d64  00000000  00000000  0002cb66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002e8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002f310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a28  00000000  00000000  0002fcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c19c  00000000  00000000  000516e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6b4d  00000000  00000000  0005d884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001243d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ae0  00000000  00000000  00124424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800732c 	.word	0x0800732c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800732c 	.word	0x0800732c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <KalmanFilter_initialize>:
 */

#include "kalmanFilter.h"

void KalmanFilter_initialize(float xHat[2], float p[2][2], float q[2][2], float r)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b087      	sub	sp, #28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	ed87 0a00 	vstr	s0, [r7]
	m_r = r;
 8000f50:	4a2e      	ldr	r2, [pc, #184]	; (800100c <KalmanFilter_initialize+0xcc>)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < 2; i++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	e04d      	b.n	8000ff8 <KalmanFilter_initialize+0xb8>
	{
		m_xHat[i] = xHat[i];
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	4413      	add	r3, r2
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	492a      	ldr	r1, [pc, #168]	; (8001010 <KalmanFilter_initialize+0xd0>)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	601a      	str	r2, [r3, #0]
		m_xHatBar[i] = 0.0;
 8000f70:	4a28      	ldr	r2, [pc, #160]	; (8001014 <KalmanFilter_initialize+0xd4>)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
		m_k[i] = 0.0;
 8000f7e:	4a26      	ldr	r2, [pc, #152]	; (8001018 <KalmanFilter_initialize+0xd8>)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 2; j++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	e02c      	b.n	8000fec <KalmanFilter_initialize+0xac>
		{
			m_pBar[i][j] = 0.0;
 8000f92:	4922      	ldr	r1, [pc, #136]	; (800101c <KalmanFilter_initialize+0xdc>)
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	005a      	lsls	r2, r3, #1
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
			m_p[i][j] = p[i][j];
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	441a      	add	r2, r3
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	481a      	ldr	r0, [pc, #104]	; (8001020 <KalmanFilter_initialize+0xe0>)
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	0059      	lsls	r1, r3, #1
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	440b      	add	r3, r1
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4403      	add	r3, r0
 8000fc4:	601a      	str	r2, [r3, #0]
			m_q[i][j] = q[i][j];
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	441a      	add	r2, r3
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	4813      	ldr	r0, [pc, #76]	; (8001024 <KalmanFilter_initialize+0xe4>)
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	0059      	lsls	r1, r3, #1
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	440b      	add	r3, r1
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4403      	add	r3, r0
 8000fe4:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 2; j++)
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	ddcf      	ble.n	8000f92 <KalmanFilter_initialize+0x52>
	for (int i = 0; i < 2; i++)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	ddae      	ble.n	8000f5c <KalmanFilter_initialize+0x1c>
		}
	}
}
 8000ffe:	bf00      	nop
 8001000:	bf00      	nop
 8001002:	371c      	adds	r7, #28
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	20000268 	.word	0x20000268
 8001010:	2000029c 	.word	0x2000029c
 8001014:	200002ac 	.word	0x200002ac
 8001018:	200002a4 	.word	0x200002a4
 800101c:	2000026c 	.word	0x2000026c
 8001020:	2000027c 	.word	0x2000027c
 8001024:	2000028c 	.word	0x2000028c

08001028 <KalmanFilter_update>:

void KalmanFilter_update(float angularVel, float angle, float t)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001032:	edc7 0a02 	vstr	s1, [r7, #8]
 8001036:	ed87 1a01 	vstr	s2, [r7, #4]
    // Prediction
    m_xHatBar[0] = m_xHat[0] + t * (angularVel - m_xHat[1]);
 800103a:	4b7f      	ldr	r3, [pc, #508]	; (8001238 <KalmanFilter_update+0x210>)
 800103c:	ed93 7a00 	vldr	s14, [r3]
 8001040:	4b7d      	ldr	r3, [pc, #500]	; (8001238 <KalmanFilter_update+0x210>)
 8001042:	edd3 7a01 	vldr	s15, [r3, #4]
 8001046:	edd7 6a03 	vldr	s13, [r7, #12]
 800104a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800104e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001052:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105a:	4b78      	ldr	r3, [pc, #480]	; (800123c <KalmanFilter_update+0x214>)
 800105c:	edc3 7a00 	vstr	s15, [r3]
    m_xHatBar[1] = m_xHat[1];
 8001060:	4b75      	ldr	r3, [pc, #468]	; (8001238 <KalmanFilter_update+0x210>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4a75      	ldr	r2, [pc, #468]	; (800123c <KalmanFilter_update+0x214>)
 8001066:	6053      	str	r3, [r2, #4]

    m_pBar[0][0] = m_p[0][0] + t * ((t * m_p[1][1]) - m_p[1][0] - m_p[0][1] + m_q[0][0]);
 8001068:	4b75      	ldr	r3, [pc, #468]	; (8001240 <KalmanFilter_update+0x218>)
 800106a:	ed93 7a00 	vldr	s14, [r3]
 800106e:	4b74      	ldr	r3, [pc, #464]	; (8001240 <KalmanFilter_update+0x218>)
 8001070:	edd3 6a03 	vldr	s13, [r3, #12]
 8001074:	edd7 7a01 	vldr	s15, [r7, #4]
 8001078:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800107c:	4b70      	ldr	r3, [pc, #448]	; (8001240 <KalmanFilter_update+0x218>)
 800107e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001082:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001086:	4b6e      	ldr	r3, [pc, #440]	; (8001240 <KalmanFilter_update+0x218>)
 8001088:	edd3 7a01 	vldr	s15, [r3, #4]
 800108c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001090:	4b6c      	ldr	r3, [pc, #432]	; (8001244 <KalmanFilter_update+0x21c>)
 8001092:	edd3 7a00 	vldr	s15, [r3]
 8001096:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800109a:	edd7 7a01 	vldr	s15, [r7, #4]
 800109e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a6:	4b68      	ldr	r3, [pc, #416]	; (8001248 <KalmanFilter_update+0x220>)
 80010a8:	edc3 7a00 	vstr	s15, [r3]
    m_pBar[0][1] = m_p[0][1] + t * (m_q[0][1] - m_p[1][1]);
 80010ac:	4b64      	ldr	r3, [pc, #400]	; (8001240 <KalmanFilter_update+0x218>)
 80010ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80010b2:	4b64      	ldr	r3, [pc, #400]	; (8001244 <KalmanFilter_update+0x21c>)
 80010b4:	edd3 6a01 	vldr	s13, [r3, #4]
 80010b8:	4b61      	ldr	r3, [pc, #388]	; (8001240 <KalmanFilter_update+0x218>)
 80010ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80010be:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80010c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ce:	4b5e      	ldr	r3, [pc, #376]	; (8001248 <KalmanFilter_update+0x220>)
 80010d0:	edc3 7a01 	vstr	s15, [r3, #4]
    m_pBar[1][0] = m_p[1][0] + t * (m_q[1][0] - m_p[1][1]);
 80010d4:	4b5a      	ldr	r3, [pc, #360]	; (8001240 <KalmanFilter_update+0x218>)
 80010d6:	ed93 7a02 	vldr	s14, [r3, #8]
 80010da:	4b5a      	ldr	r3, [pc, #360]	; (8001244 <KalmanFilter_update+0x21c>)
 80010dc:	edd3 6a02 	vldr	s13, [r3, #8]
 80010e0:	4b57      	ldr	r3, [pc, #348]	; (8001240 <KalmanFilter_update+0x218>)
 80010e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80010e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80010ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f6:	4b54      	ldr	r3, [pc, #336]	; (8001248 <KalmanFilter_update+0x220>)
 80010f8:	edc3 7a02 	vstr	s15, [r3, #8]
    m_pBar[1][1] = m_p[1][1] + t * (m_q[1][1]);
 80010fc:	4b50      	ldr	r3, [pc, #320]	; (8001240 <KalmanFilter_update+0x218>)
 80010fe:	ed93 7a03 	vldr	s14, [r3, #12]
 8001102:	4b50      	ldr	r3, [pc, #320]	; (8001244 <KalmanFilter_update+0x21c>)
 8001104:	edd3 6a03 	vldr	s13, [r3, #12]
 8001108:	edd7 7a01 	vldr	s15, [r7, #4]
 800110c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001114:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <KalmanFilter_update+0x220>)
 8001116:	edc3 7a03 	vstr	s15, [r3, #12]

    // Update
    m_k[0] = m_pBar[0][0] / (m_pBar[0][0] + m_r);
 800111a:	4b4b      	ldr	r3, [pc, #300]	; (8001248 <KalmanFilter_update+0x220>)
 800111c:	edd3 6a00 	vldr	s13, [r3]
 8001120:	4b49      	ldr	r3, [pc, #292]	; (8001248 <KalmanFilter_update+0x220>)
 8001122:	ed93 7a00 	vldr	s14, [r3]
 8001126:	4b49      	ldr	r3, [pc, #292]	; (800124c <KalmanFilter_update+0x224>)
 8001128:	edd3 7a00 	vldr	s15, [r3]
 800112c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001134:	4b46      	ldr	r3, [pc, #280]	; (8001250 <KalmanFilter_update+0x228>)
 8001136:	edc3 7a00 	vstr	s15, [r3]
    m_k[1] = m_pBar[1][0] / (m_pBar[0][0] + m_r);
 800113a:	4b43      	ldr	r3, [pc, #268]	; (8001248 <KalmanFilter_update+0x220>)
 800113c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001140:	4b41      	ldr	r3, [pc, #260]	; (8001248 <KalmanFilter_update+0x220>)
 8001142:	ed93 7a00 	vldr	s14, [r3]
 8001146:	4b41      	ldr	r3, [pc, #260]	; (800124c <KalmanFilter_update+0x224>)
 8001148:	edd3 7a00 	vldr	s15, [r3]
 800114c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001154:	4b3e      	ldr	r3, [pc, #248]	; (8001250 <KalmanFilter_update+0x228>)
 8001156:	edc3 7a01 	vstr	s15, [r3, #4]

    m_xHat[0] = m_xHatBar[0] + m_k[0] * (angle - m_xHatBar[0]);
 800115a:	4b38      	ldr	r3, [pc, #224]	; (800123c <KalmanFilter_update+0x214>)
 800115c:	ed93 7a00 	vldr	s14, [r3]
 8001160:	4b3b      	ldr	r3, [pc, #236]	; (8001250 <KalmanFilter_update+0x228>)
 8001162:	edd3 6a00 	vldr	s13, [r3]
 8001166:	4b35      	ldr	r3, [pc, #212]	; (800123c <KalmanFilter_update+0x214>)
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001170:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117c:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <KalmanFilter_update+0x210>)
 800117e:	edc3 7a00 	vstr	s15, [r3]
    m_xHat[1] = m_xHatBar[1] + m_k[1] * (angle - m_xHatBar[0]);
 8001182:	4b2e      	ldr	r3, [pc, #184]	; (800123c <KalmanFilter_update+0x214>)
 8001184:	ed93 7a01 	vldr	s14, [r3, #4]
 8001188:	4b31      	ldr	r3, [pc, #196]	; (8001250 <KalmanFilter_update+0x228>)
 800118a:	edd3 6a01 	vldr	s13, [r3, #4]
 800118e:	4b2b      	ldr	r3, [pc, #172]	; (800123c <KalmanFilter_update+0x214>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	ed97 6a02 	vldr	s12, [r7, #8]
 8001198:	ee76 7a67 	vsub.f32	s15, s12, s15
 800119c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <KalmanFilter_update+0x210>)
 80011a6:	edc3 7a01 	vstr	s15, [r3, #4]

    m_p[0][0] = m_pBar[0][0] - (m_k[0] * m_pBar[0][0]);
 80011aa:	4b27      	ldr	r3, [pc, #156]	; (8001248 <KalmanFilter_update+0x220>)
 80011ac:	ed93 7a00 	vldr	s14, [r3]
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <KalmanFilter_update+0x228>)
 80011b2:	edd3 6a00 	vldr	s13, [r3]
 80011b6:	4b24      	ldr	r3, [pc, #144]	; (8001248 <KalmanFilter_update+0x220>)
 80011b8:	edd3 7a00 	vldr	s15, [r3]
 80011bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <KalmanFilter_update+0x218>)
 80011c6:	edc3 7a00 	vstr	s15, [r3]
    m_p[0][1] = m_pBar[0][1] - (m_k[0] * m_pBar[0][1]);
 80011ca:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <KalmanFilter_update+0x220>)
 80011cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80011d0:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <KalmanFilter_update+0x228>)
 80011d2:	edd3 6a00 	vldr	s13, [r3]
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <KalmanFilter_update+0x220>)
 80011d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80011dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <KalmanFilter_update+0x218>)
 80011e6:	edc3 7a01 	vstr	s15, [r3, #4]
    m_p[1][0] = m_pBar[1][0] - (m_k[1] * m_pBar[0][0]);
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <KalmanFilter_update+0x220>)
 80011ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <KalmanFilter_update+0x228>)
 80011f2:	edd3 6a01 	vldr	s13, [r3, #4]
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <KalmanFilter_update+0x220>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <KalmanFilter_update+0x218>)
 8001206:	edc3 7a02 	vstr	s15, [r3, #8]
    m_p[1][1] = m_pBar[1][1] - (m_k[1] * m_pBar[0][1]);
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <KalmanFilter_update+0x220>)
 800120c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <KalmanFilter_update+0x228>)
 8001212:	edd3 6a01 	vldr	s13, [r3, #4]
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <KalmanFilter_update+0x220>)
 8001218:	edd3 7a01 	vldr	s15, [r3, #4]
 800121c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <KalmanFilter_update+0x218>)
 8001226:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	2000029c 	.word	0x2000029c
 800123c:	200002ac 	.word	0x200002ac
 8001240:	2000027c 	.word	0x2000027c
 8001244:	2000028c 	.word	0x2000028c
 8001248:	2000026c 	.word	0x2000026c
 800124c:	20000268 	.word	0x20000268
 8001250:	200002a4 	.word	0x200002a4

08001254 <KalmanFilter_getAngle>:

float KalmanFilter_getAngle()
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
	return m_xHat[0];
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <KalmanFilter_getAngle+0x18>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	ee07 3a90 	vmov	s15, r3
}
 8001260:	eeb0 0a67 	vmov.f32	s0, s15
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	2000029c 	.word	0x2000029c

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b0a7      	sub	sp, #156	; 0x9c
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	MPU_ConfigTypeDef mpuConfig;
	float allData[6] = {0.0};
 8001276:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]
 8001286:	615a      	str	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001288:	f000 fe8c 	bl	8001fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128c:	f000 f8fe 	bl	800148c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001290:	f000 f9c0 	bl	8001614 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001294:	f000 f964 	bl	8001560 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001298:	f000 f992 	bl	80015c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init(&hi2c1);
 800129c:	4874      	ldr	r0, [pc, #464]	; (8001470 <main+0x200>)
 800129e:	f000 fa11 	bl	80016c4 <MPU6050_Init>
  mpuConfig.Accel_Full_Scale = AFS_SEL_4g;
 80012a2:	2301      	movs	r3, #1
 80012a4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  mpuConfig.Gyro_Full_Scale  = FS_SEL_500;
 80012a8:	2301      	movs	r3, #1
 80012aa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  mpuConfig.ClockSource		 = Internal_8MHz;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  mpuConfig.CONFIG_DLPF		 = DLPF_184A_188G_Hz;
 80012b4:	2301      	movs	r3, #1
 80012b6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  mpuConfig.Sleep_Mode_Bit	 = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
  MPU6050_Config(&mpuConfig);
 80012c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 fa51 	bl	800176c <MPU6050_Config>

  ScaledData_Def accelScaledData, gyroScaledData;
  TiltAngle_Def acc_angle, gyro_angle;

  float dt;
  float old_time_instant = HAL_GetTick();
 80012ca:	f000 fed1 	bl	8002070 <HAL_GetTick>
 80012ce:	ee07 0a90 	vmov	s15, r0
 80012d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
  float angles[3] = {0.0, 0.0, 0.0};
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
 80012e6:	f04f 0300 	mov.w	r3, #0
 80012ea:	637b      	str	r3, [r7, #52]	; 0x34

  float xHat[2] = {0.0, 0.0};
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
  float p[2][2] = {{1.0, 1.0}, {1.0, 1.0}};
 80012f8:	4b5e      	ldr	r3, [pc, #376]	; (8001474 <main+0x204>)
 80012fa:	f107 0414 	add.w	r4, r7, #20
 80012fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001300:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  float q[2][2] = {{0.01, 0.01}, {0.01, 0.01}};
 8001304:	4b5c      	ldr	r3, [pc, #368]	; (8001478 <main+0x208>)
 8001306:	1d3c      	adds	r4, r7, #4
 8001308:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800130a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  float r = 0.035;
 800130e:	4b5b      	ldr	r3, [pc, #364]	; (800147c <main+0x20c>)
 8001310:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  KalmanFilter_initialize(xHat, p, q, r);
 8001314:	1d3a      	adds	r2, r7, #4
 8001316:	f107 0114 	add.w	r1, r7, #20
 800131a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131e:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fe0c 	bl	8000f40 <KalmanFilter_initialize>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  gyro_angle.roll = 0.0;
 8001328:	f04f 0300 	mov.w	r3, #0
 800132c:	63bb      	str	r3, [r7, #56]	; 0x38
  gyro_angle.pitch = 0.0;
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	63fb      	str	r3, [r7, #60]	; 0x3c
  gyro_angle.yaw = 0.0;
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	643b      	str	r3, [r7, #64]	; 0x40

  while (1)
  {
    /* USER CODE END WHILE */

	  MPU6050_Get_Accel_ScaledData(&accelScaledData);
 800133a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800133e:	4618      	mov	r0, r3
 8001340:	f000 fb26 	bl	8001990 <MPU6050_Get_Accel_ScaledData>
	  MPU6050_Get_Gyro_ScaledData(&gyroScaledData);
 8001344:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001348:	4618      	mov	r0, r3
 800134a:	f000 fb85 	bl	8001a58 <MPU6050_Get_Gyro_ScaledData>

	  getTiltAngle_Accel(&accelScaledData, &acc_angle);
 800134e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001352:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f000 fbb7 	bl	8001acc <getTiltAngle_Accel>

	  dt = (HAL_GetTick() - old_time_instant) / 1000.0;
 800135e:	f000 fe87 	bl	8002070 <HAL_GetTick>
 8001362:	ee07 0a90 	vmov	s15, r0
 8001366:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800136a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800136e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001372:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001480 <main+0x210>
 8001376:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800137a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	  old_time_instant = HAL_GetTick();
 800137e:	f000 fe77 	bl	8002070 <HAL_GetTick>
 8001382:	ee07 0a90 	vmov	s15, r0
 8001386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800138a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94

	  getTiltAngle_Gyro(&gyroScaledData, dt, &gyro_angle);
 800138e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001392:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001396:	4611      	mov	r1, r2
 8001398:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fbe2 	bl	8001b66 <getTiltAngle_Gyro>

	  allData[0] = acc_angle.roll;
 80013a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013a4:	66bb      	str	r3, [r7, #104]	; 0x68
	  allData[1] = acc_angle.pitch;
 80013a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013a8:	66fb      	str	r3, [r7, #108]	; 0x6c
	  allData[2] = acc_angle.yaw;
 80013aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ac:	673b      	str	r3, [r7, #112]	; 0x70
	  allData[3] = gyro_angle.roll * DEG2RAD;
 80013ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f8c9 	bl	8000548 <__aeabi_f2d>
 80013b6:	a32c      	add	r3, pc, #176	; (adr r3, 8001468 <main+0x1f8>)
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	f7ff f91c 	bl	80005f8 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fbee 	bl	8000ba8 <__aeabi_d2f>
 80013cc:	4603      	mov	r3, r0
 80013ce:	677b      	str	r3, [r7, #116]	; 0x74
	  allData[4] = gyro_angle.pitch * DEG2RAD;
 80013d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f8b8 	bl	8000548 <__aeabi_f2d>
 80013d8:	a323      	add	r3, pc, #140	; (adr r3, 8001468 <main+0x1f8>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7ff f90b 	bl	80005f8 <__aeabi_dmul>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	f7ff fbdd 	bl	8000ba8 <__aeabi_d2f>
 80013ee:	4603      	mov	r3, r0
 80013f0:	67bb      	str	r3, [r7, #120]	; 0x78
	  allData[5] = gyro_angle.yaw * DEG2RAD;
 80013f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f8a7 	bl	8000548 <__aeabi_f2d>
 80013fa:	a31b      	add	r3, pc, #108	; (adr r3, 8001468 <main+0x1f8>)
 80013fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001400:	f7ff f8fa 	bl	80005f8 <__aeabi_dmul>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	f7ff fbcc 	bl	8000ba8 <__aeabi_d2f>
 8001410:	4603      	mov	r3, r0
 8001412:	67fb      	str	r3, [r7, #124]	; 0x7c

//	  uint8_t *byteData = (uint8_t *) (allData);
//	  HAL_UART_Transmit(&huart2, byteData, sizeof(allData), 100);

	  // Apply kalman filter
	  KalmanFilter_update(allData[3], allData[0], dt);
 8001414:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001418:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800141c:	ed97 1a23 	vldr	s2, [r7, #140]	; 0x8c
 8001420:	eef0 0a47 	vmov.f32	s1, s14
 8001424:	eeb0 0a67 	vmov.f32	s0, s15
 8001428:	f7ff fdfe 	bl	8001028 <KalmanFilter_update>
	  angles[0] = allData[0];
 800142c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  angles[1] = allData[3];
 8001430:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001432:	633b      	str	r3, [r7, #48]	; 0x30
	  angles[2] = KalmanFilter_getAngle();
 8001434:	f7ff ff0e 	bl	8001254 <KalmanFilter_getAngle>
 8001438:	eef0 7a40 	vmov.f32	s15, s0
 800143c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	  uint8_t *byteData = (uint8_t *) (angles);
 8001440:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001444:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  HAL_UART_Transmit(&huart2, byteData, sizeof(angles), 100);
 8001448:	2364      	movs	r3, #100	; 0x64
 800144a:	220c      	movs	r2, #12
 800144c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <main+0x214>)
 8001452:	f002 fd4a 	bl	8003eea <HAL_UART_Transmit>

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001456:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800145a:	480b      	ldr	r0, [pc, #44]	; (8001488 <main+0x218>)
 800145c:	f001 f8d3 	bl	8002606 <HAL_GPIO_TogglePin>
	  HAL_Delay(10);
 8001460:	200a      	movs	r0, #10
 8001462:	f000 fe11 	bl	8002088 <HAL_Delay>
  {
 8001466:	e768      	b.n	800133a <main+0xca>
 8001468:	22d4405f 	.word	0x22d4405f
 800146c:	3f91df47 	.word	0x3f91df47
 8001470:	200002b4 	.word	0x200002b4
 8001474:	08007348 	.word	0x08007348
 8001478:	08007358 	.word	0x08007358
 800147c:	3d0f5c29 	.word	0x3d0f5c29
 8001480:	447a0000 	.word	0x447a0000
 8001484:	20000308 	.word	0x20000308
 8001488:	40020c00 	.word	0x40020c00

0800148c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b094      	sub	sp, #80	; 0x50
 8001490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001492:	f107 0320 	add.w	r3, r7, #32
 8001496:	2230      	movs	r2, #48	; 0x30
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f003 f802 	bl	80044a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	4b28      	ldr	r3, [pc, #160]	; (8001558 <SystemClock_Config+0xcc>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	4a27      	ldr	r2, [pc, #156]	; (8001558 <SystemClock_Config+0xcc>)
 80014ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014be:	6413      	str	r3, [r2, #64]	; 0x40
 80014c0:	4b25      	ldr	r3, [pc, #148]	; (8001558 <SystemClock_Config+0xcc>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <SystemClock_Config+0xd0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a21      	ldr	r2, [pc, #132]	; (800155c <SystemClock_Config+0xd0>)
 80014d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <SystemClock_Config+0xd0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014e8:	2302      	movs	r3, #2
 80014ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ec:	2301      	movs	r3, #1
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014f0:	2310      	movs	r3, #16
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f4:	2302      	movs	r3, #2
 80014f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014f8:	2300      	movs	r3, #0
 80014fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014fc:	2308      	movs	r3, #8
 80014fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001500:	2332      	movs	r3, #50	; 0x32
 8001502:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001504:	2302      	movs	r3, #2
 8001506:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001508:	2307      	movs	r3, #7
 800150a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150c:	f107 0320 	add.w	r3, r7, #32
 8001510:	4618      	mov	r0, r3
 8001512:	f002 f829 	bl	8003568 <HAL_RCC_OscConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800151c:	f000 f8cc 	bl	80016b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001520:	230f      	movs	r3, #15
 8001522:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001524:	2302      	movs	r3, #2
 8001526:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800152c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001530:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001532:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001536:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	2101      	movs	r1, #1
 800153e:	4618      	mov	r0, r3
 8001540:	f002 fa8a 	bl	8003a58 <HAL_RCC_ClockConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800154a:	f000 f8b5 	bl	80016b8 <Error_Handler>
  }
}
 800154e:	bf00      	nop
 8001550:	3750      	adds	r7, #80	; 0x50
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40007000 	.word	0x40007000

08001560 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <MX_I2C1_Init+0x54>)
 8001566:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <MX_I2C1_Init+0x58>)
 8001568:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_I2C1_Init+0x54>)
 800156c:	4a13      	ldr	r2, [pc, #76]	; (80015bc <MX_I2C1_Init+0x5c>)
 800156e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001570:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <MX_I2C1_Init+0x54>)
 8001572:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001576:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_I2C1_Init+0x54>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <MX_I2C1_Init+0x54>)
 8001580:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001584:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_I2C1_Init+0x54>)
 8001588:	2200      	movs	r2, #0
 800158a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_I2C1_Init+0x54>)
 800158e:	2200      	movs	r2, #0
 8001590:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <MX_I2C1_Init+0x54>)
 8001594:	2200      	movs	r2, #0
 8001596:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_I2C1_Init+0x54>)
 800159a:	2200      	movs	r2, #0
 800159c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_I2C1_Init+0x54>)
 80015a0:	f001 f84c 	bl	800263c <HAL_I2C_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80015aa:	f000 f885 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200002b4 	.word	0x200002b4
 80015b8:	40005400 	.word	0x40005400
 80015bc:	00061a80 	.word	0x00061a80

080015c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <MX_USART2_UART_Init+0x4c>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <MX_USART2_UART_Init+0x50>)
 80015c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <MX_USART2_UART_Init+0x4c>)
 80015cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <MX_USART2_UART_Init+0x4c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <MX_USART2_UART_Init+0x4c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <MX_USART2_UART_Init+0x4c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <MX_USART2_UART_Init+0x4c>)
 80015e6:	220c      	movs	r2, #12
 80015e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <MX_USART2_UART_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <MX_USART2_UART_Init+0x4c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_USART2_UART_Init+0x4c>)
 80015f8:	f002 fc2a 	bl	8003e50 <HAL_UART_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001602:	f000 f859 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000308 	.word	0x20000308
 8001610:	40004400 	.word	0x40004400

08001614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
 8001628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <MX_GPIO_Init+0x9c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a1f      	ldr	r2, [pc, #124]	; (80016b0 <MX_GPIO_Init+0x9c>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <MX_GPIO_Init+0x9c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <MX_GPIO_Init+0x9c>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <MX_GPIO_Init+0x9c>)
 8001650:	f043 0308 	orr.w	r3, r3, #8
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <MX_GPIO_Init+0x9c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	603b      	str	r3, [r7, #0]
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <MX_GPIO_Init+0x9c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <MX_GPIO_Init+0x9c>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_GPIO_Init+0x9c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001684:	480b      	ldr	r0, [pc, #44]	; (80016b4 <MX_GPIO_Init+0xa0>)
 8001686:	f000 ffa5 	bl	80025d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800168a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001690:	2301      	movs	r3, #1
 8001692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	4619      	mov	r1, r3
 80016a2:	4804      	ldr	r0, [pc, #16]	; (80016b4 <MX_GPIO_Init+0xa0>)
 80016a4:	f000 fdfa 	bl	800229c <HAL_GPIO_Init>

}
 80016a8:	bf00      	nop
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40020c00 	.word	0x40020c00

080016b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016bc:	b672      	cpsid	i
}
 80016be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <Error_Handler+0x8>
	...

080016c4 <MPU6050_Init>:
static float A_Z_Bias = 0.0f;

static int16_t GyroRW[3];

void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 80016cc:	2254      	movs	r2, #84	; 0x54
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	4803      	ldr	r0, [pc, #12]	; (80016e0 <MPU6050_Init+0x1c>)
 80016d2:	f002 fed9 	bl	8004488 <memcpy>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200001f8 	.word	0x200001f8

080016e4 <I2C_Read>:

void I2C_Read(uint8_t ADDR, uint8_t *i2cBuf, uint8_t NofData)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af02      	add	r7, sp, #8
 80016ea:	4603      	mov	r3, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	71fb      	strb	r3, [r7, #7]
 80016f0:	4613      	mov	r3, r2
 80016f2:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf_[2];
	uint8_t MPUADDR;

	MPUADDR = (MPU_ADDR << 1);
 80016f4:	23d0      	movs	r3, #208	; 0xd0
 80016f6:	73fb      	strb	r3, [r7, #15]
	i2cBuf_[0] = ADDR;
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf_, 1, 10);
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	b299      	uxth	r1, r3
 8001700:	f107 020c 	add.w	r2, r7, #12
 8001704:	230a      	movs	r3, #10
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2301      	movs	r3, #1
 800170a:	4808      	ldr	r0, [pc, #32]	; (800172c <I2C_Read+0x48>)
 800170c:	f001 f8da 	bl	80028c4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBuf, NofData, 100);
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	b299      	uxth	r1, r3
 8001714:	79bb      	ldrb	r3, [r7, #6]
 8001716:	b29b      	uxth	r3, r3
 8001718:	2264      	movs	r2, #100	; 0x64
 800171a:	9200      	str	r2, [sp, #0]
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	4803      	ldr	r0, [pc, #12]	; (800172c <I2C_Read+0x48>)
 8001720:	f001 f9ce 	bl	8002ac0 <HAL_I2C_Master_Receive>
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200001f8 	.word	0x200001f8

08001730 <I2C_Write8>:

void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af02      	add	r7, sp, #8
 8001736:	4603      	mov	r3, r0
 8001738:	460a      	mov	r2, r1
 800173a:	71fb      	strb	r3, [r7, #7]
 800173c:	4613      	mov	r3, r2
 800173e:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;

	i2cBuf[0] = ADDR;
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	733b      	strb	r3, [r7, #12]
	i2cBuf[1] = data;
 8001744:	79bb      	ldrb	r3, [r7, #6]
 8001746:	737b      	strb	r3, [r7, #13]

	MPUADDR = (MPU_ADDR << 1);
 8001748:	23d0      	movs	r3, #208	; 0xd0
 800174a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 2, 100);
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	b299      	uxth	r1, r3
 8001750:	f107 020c 	add.w	r2, r7, #12
 8001754:	2364      	movs	r3, #100	; 0x64
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2302      	movs	r3, #2
 800175a:	4803      	ldr	r0, [pc, #12]	; (8001768 <I2C_Write8+0x38>)
 800175c:	f001 f8b2 	bl	80028c4 <HAL_I2C_Master_Transmit>
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200001f8 	.word	0x200001f8

0800176c <MPU6050_Config>:

void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]

	// Reset Device and disable temp sensor
	I2C_Write8(PWR_MGMT_1, 0x80);
 8001778:	2180      	movs	r1, #128	; 0x80
 800177a:	206b      	movs	r0, #107	; 0x6b
 800177c:	f7ff ffd8 	bl	8001730 <I2C_Write8>
	HAL_Delay(100);
 8001780:	2064      	movs	r0, #100	; 0x64
 8001782:	f000 fc81 	bl	8002088 <HAL_Delay>

	Buffer = config->ClockSource & 0x07;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config->Sleep_Mode_Bit << 6) & 0x04;
	I2C_Write8(PWR_MGMT_1, Buffer);
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	4619      	mov	r1, r3
 8001794:	206b      	movs	r0, #107	; 0x6b
 8001796:	f7ff ffcb 	bl	8001730 <I2C_Write8>
	HAL_Delay(100);
 800179a:	2064      	movs	r0, #100	; 0x64
 800179c:	f000 fc74 	bl	8002088 <HAL_Delay>

	// Set DLPF
	Buffer = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	78db      	ldrb	r3, [r3, #3]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG, Buffer);
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	4619      	mov	r1, r3
 80017b2:	201a      	movs	r0, #26
 80017b4:	f7ff ffbc 	bl	8001730 <I2C_Write8>

	// Select gyro full scale range
	Buffer = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	785b      	ldrb	r3, [r3, #1]
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	f003 0318 	and.w	r3, r3, #24
 80017c8:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG, Buffer);
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	4619      	mov	r1, r3
 80017ce:	201b      	movs	r0, #27
 80017d0:	f7ff ffae 	bl	8001730 <I2C_Write8>

	// Select accel full scale range
	Buffer = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	789b      	ldrb	r3, [r3, #2]
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	f003 0318 	and.w	r3, r3, #24
 80017e4:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG, Buffer);
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	4619      	mov	r1, r3
 80017ea:	201c      	movs	r0, #28
 80017ec:	f7ff ffa0 	bl	8001730 <I2C_Write8>

	MPU6050_Set_SMPRT_DIV(0x04);
 80017f0:	2004      	movs	r0, #4
 80017f2:	f000 f857 	bl	80018a4 <MPU6050_Set_SMPRT_DIV>

	// Set accel and gyro scaling factors
	switch (config->Accel_Full_Scale) {
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	789b      	ldrb	r3, [r3, #2]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d81a      	bhi.n	8001834 <MPU6050_Config+0xc8>
 80017fe:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <MPU6050_Config+0x98>)
 8001800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001804:	08001815 	.word	0x08001815
 8001808:	0800181d 	.word	0x0800181d
 800180c:	08001825 	.word	0x08001825
 8001810:	0800182d 	.word	0x0800182d
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f / 32768.0f);
 8001814:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <MPU6050_Config+0x114>)
 8001816:	4a1b      	ldr	r2, [pc, #108]	; (8001884 <MPU6050_Config+0x118>)
 8001818:	601a      	str	r2, [r3, #0]
			break;
 800181a:	e00c      	b.n	8001836 <MPU6050_Config+0xca>
		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f / 32768.0f);
 800181c:	4b18      	ldr	r3, [pc, #96]	; (8001880 <MPU6050_Config+0x114>)
 800181e:	4a1a      	ldr	r2, [pc, #104]	; (8001888 <MPU6050_Config+0x11c>)
 8001820:	601a      	str	r2, [r3, #0]
			break;
 8001822:	e008      	b.n	8001836 <MPU6050_Config+0xca>
		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f / 32768.0f);
 8001824:	4b16      	ldr	r3, [pc, #88]	; (8001880 <MPU6050_Config+0x114>)
 8001826:	4a19      	ldr	r2, [pc, #100]	; (800188c <MPU6050_Config+0x120>)
 8001828:	601a      	str	r2, [r3, #0]
			break;
 800182a:	e004      	b.n	8001836 <MPU6050_Config+0xca>
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f / 32768.0f);
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <MPU6050_Config+0x114>)
 800182e:	4a18      	ldr	r2, [pc, #96]	; (8001890 <MPU6050_Config+0x124>)
 8001830:	601a      	str	r2, [r3, #0]
			break;
 8001832:	e000      	b.n	8001836 <MPU6050_Config+0xca>
		default:
			break;
 8001834:	bf00      	nop
	}

	switch (config->Accel_Full_Scale) {
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	789b      	ldrb	r3, [r3, #2]
 800183a:	2b03      	cmp	r3, #3
 800183c:	d81a      	bhi.n	8001874 <MPU6050_Config+0x108>
 800183e:	a201      	add	r2, pc, #4	; (adr r2, 8001844 <MPU6050_Config+0xd8>)
 8001840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001844:	08001855 	.word	0x08001855
 8001848:	0800185d 	.word	0x0800185d
 800184c:	08001865 	.word	0x08001865
 8001850:	0800186d 	.word	0x0800186d
		case FS_SEL_250:
			gyroScalingFactor = (250.0f / 32768.0f);
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <MPU6050_Config+0x128>)
 8001856:	4a10      	ldr	r2, [pc, #64]	; (8001898 <MPU6050_Config+0x12c>)
 8001858:	601a      	str	r2, [r3, #0]
			break;
 800185a:	e00c      	b.n	8001876 <MPU6050_Config+0x10a>
		case FS_SEL_500:
			gyroScalingFactor = (500.0f / 32768.0f);
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <MPU6050_Config+0x128>)
 800185e:	4a0f      	ldr	r2, [pc, #60]	; (800189c <MPU6050_Config+0x130>)
 8001860:	601a      	str	r2, [r3, #0]
			break;
 8001862:	e008      	b.n	8001876 <MPU6050_Config+0x10a>
		case FS_SEL_1000:
			gyroScalingFactor = (1000.0f / 32768.0f);
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <MPU6050_Config+0x128>)
 8001866:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <MPU6050_Config+0x134>)
 8001868:	601a      	str	r2, [r3, #0]
			break;
 800186a:	e004      	b.n	8001876 <MPU6050_Config+0x10a>
		case FS_SEL_2000:
			gyroScalingFactor = (2000.0f / 32768.0f);
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <MPU6050_Config+0x128>)
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <MPU6050_Config+0x118>)
 8001870:	601a      	str	r2, [r3, #0]
			break;
 8001872:	e000      	b.n	8001876 <MPU6050_Config+0x10a>
		default:
			break;
 8001874:	bf00      	nop
	}
}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	2000024c 	.word	0x2000024c
 8001884:	3d7a0000 	.word	0x3d7a0000
 8001888:	3dfa0000 	.word	0x3dfa0000
 800188c:	3e7a0000 	.word	0x3e7a0000
 8001890:	3efa0000 	.word	0x3efa0000
 8001894:	20000250 	.word	0x20000250
 8001898:	3bfa0000 	.word	0x3bfa0000
 800189c:	3c7a0000 	.word	0x3c7a0000
 80018a0:	3cfa0000 	.word	0x3cfa0000

080018a4 <MPU6050_Set_SMPRT_DIV>:
	I2C_Read(SMPLRT_DIV, &Buffer, 1);
	return Buffer;
}

void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV, SMPRTvalue);
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	4619      	mov	r1, r3
 80018b2:	2019      	movs	r0, #25
 80018b4:	f7ff ff3c 	bl	8001730 <I2C_Write8>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <MPU6050_Get_Accel_RawData>:

void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AccArr[6], GyroArr[6];

	I2C_Read(INT_STATUS, &i2cBuf[1], 1);
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	3301      	adds	r3, #1
 80018ce:	2201      	movs	r2, #1
 80018d0:	4619      	mov	r1, r3
 80018d2:	203a      	movs	r0, #58	; 0x3a
 80018d4:	f7ff ff06 	bl	80016e4 <I2C_Read>
	if ((i2cBuf[1] & 0x01))
 80018d8:	7f7b      	ldrb	r3, [r7, #29]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d04f      	beq.n	8001982 <MPU6050_Get_Accel_RawData+0xc2>
	{
		I2C_Read(ACCEL_XOUT_H, AccArr, 6);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	2206      	movs	r2, #6
 80018e8:	4619      	mov	r1, r3
 80018ea:	203b      	movs	r0, #59	; 0x3b
 80018ec:	f7ff fefa 	bl	80016e4 <I2C_Read>

		rawDef->x = ( AccArr[0] << 8 ) + AccArr[1];
 80018f0:	7d3b      	ldrb	r3, [r7, #20]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	7d7b      	ldrb	r3, [r7, #21]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	b29b      	uxth	r3, r3
 8001900:	b21a      	sxth	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	801a      	strh	r2, [r3, #0]
		rawDef->y = ( AccArr[2] << 8 ) + AccArr[3];
 8001906:	7dbb      	ldrb	r3, [r7, #22]
 8001908:	b29b      	uxth	r3, r3
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	b29a      	uxth	r2, r3
 800190e:	7dfb      	ldrb	r3, [r7, #23]
 8001910:	b29b      	uxth	r3, r3
 8001912:	4413      	add	r3, r2
 8001914:	b29b      	uxth	r3, r3
 8001916:	b21a      	sxth	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	805a      	strh	r2, [r3, #2]
		rawDef->z = ( AccArr[4] << 8 ) + AccArr[5];
 800191c:	7e3b      	ldrb	r3, [r7, #24]
 800191e:	b29b      	uxth	r3, r3
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	b29a      	uxth	r2, r3
 8001924:	7e7b      	ldrb	r3, [r7, #25]
 8001926:	b29b      	uxth	r3, r3
 8001928:	4413      	add	r3, r2
 800192a:	b29b      	uxth	r3, r3
 800192c:	b21a      	sxth	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	809a      	strh	r2, [r3, #4]

		I2C_Read(GYRO_XOUT_H, GyroArr, 6);
 8001932:	f107 030c 	add.w	r3, r7, #12
 8001936:	2206      	movs	r2, #6
 8001938:	4619      	mov	r1, r3
 800193a:	2043      	movs	r0, #67	; 0x43
 800193c:	f7ff fed2 	bl	80016e4 <I2C_Read>
		GyroRW[0] = ( GyroArr[0] << 8 ) + GyroArr[1];
 8001940:	7b3b      	ldrb	r3, [r7, #12]
 8001942:	b29b      	uxth	r3, r3
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b29a      	uxth	r2, r3
 8001948:	7b7b      	ldrb	r3, [r7, #13]
 800194a:	b29b      	uxth	r3, r3
 800194c:	4413      	add	r3, r2
 800194e:	b29b      	uxth	r3, r3
 8001950:	b21a      	sxth	r2, r3
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <MPU6050_Get_Accel_RawData+0xcc>)
 8001954:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = ( GyroArr[2] << 8 ) + GyroArr[3];
 8001956:	7bbb      	ldrb	r3, [r7, #14]
 8001958:	b29b      	uxth	r3, r3
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	b29a      	uxth	r2, r3
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	b29b      	uxth	r3, r3
 8001962:	4413      	add	r3, r2
 8001964:	b29b      	uxth	r3, r3
 8001966:	b21a      	sxth	r2, r3
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <MPU6050_Get_Accel_RawData+0xcc>)
 800196a:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ( GyroArr[4] << 8 ) + GyroArr[5];
 800196c:	7c3b      	ldrb	r3, [r7, #16]
 800196e:	b29b      	uxth	r3, r3
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	b29a      	uxth	r2, r3
 8001974:	7c7b      	ldrb	r3, [r7, #17]
 8001976:	b29b      	uxth	r3, r3
 8001978:	4413      	add	r3, r2
 800197a:	b29b      	uxth	r3, r3
 800197c:	b21a      	sxth	r2, r3
 800197e:	4b03      	ldr	r3, [pc, #12]	; (800198c <MPU6050_Get_Accel_RawData+0xcc>)
 8001980:	809a      	strh	r2, [r3, #4]
	}
}
 8001982:	bf00      	nop
 8001984:	3720      	adds	r7, #32
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000254 	.word	0x20000254

08001990 <MPU6050_Get_Accel_ScaledData>:

void MPU6050_Get_Accel_ScaledData(ScaledData_Def *scaledDef)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	RawData_Def AccRData;

	MPU6050_Get_Accel_RawData(&AccRData);
 8001998:	f107 0308 	add.w	r3, r7, #8
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff8f 	bl	80018c0 <MPU6050_Get_Accel_RawData>

	scaledDef->x = (AccRData.x + 0.0f) * accelScalingFactor;
 80019a2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80019a6:	ee07 3a90 	vmov	s15, r3
 80019aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ae:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001a18 <MPU6050_Get_Accel_ScaledData+0x88>
 80019b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <MPU6050_Get_Accel_ScaledData+0x8c>)
 80019b8:	edd3 7a00 	vldr	s15, [r3]
 80019bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = (AccRData.y + 0.0f) * accelScalingFactor;
 80019c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80019ca:	ee07 3a90 	vmov	s15, r3
 80019ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001a18 <MPU6050_Get_Accel_ScaledData+0x88>
 80019d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <MPU6050_Get_Accel_ScaledData+0x8c>)
 80019dc:	edd3 7a00 	vldr	s15, [r3]
 80019e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = (AccRData.z + 0.0f) * accelScalingFactor;
 80019ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001a18 <MPU6050_Get_Accel_ScaledData+0x88>
 80019fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <MPU6050_Get_Accel_ScaledData+0x8c>)
 8001a00:	edd3 7a00 	vldr	s15, [r3]
 8001a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	2000024c 	.word	0x2000024c

08001a20 <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = accSData.y - A_Y_Bias;
	CaliDef->z = accSData.z - A_Z_Bias;
}

void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	rawDef->x = GyroRW[0];
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <MPU6050_Get_Gyro_RawData+0x34>)
 8001a2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <MPU6050_Get_Gyro_RawData+0x34>)
 8001a34:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <MPU6050_Get_Gyro_RawData+0x34>)
 8001a3e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	809a      	strh	r2, [r3, #4]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000254 	.word	0x20000254

08001a58 <MPU6050_Get_Gyro_ScaledData>:

void MPU6050_Get_Gyro_ScaledData(ScaledData_Def *scaledDef)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	RawData_Def gyroRData;

	MPU6050_Get_Gyro_RawData(&gyroRData);
 8001a60:	f107 0308 	add.w	r3, r7, #8
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ffdb 	bl	8001a20 <MPU6050_Get_Gyro_RawData>

	scaledDef->x = gyroRData.x * gyroScalingFactor;
 8001a6a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <MPU6050_Get_Gyro_ScaledData+0x70>)
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = gyroRData.y * gyroScalingFactor;
 8001a86:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a8a:	ee07 3a90 	vmov	s15, r3
 8001a8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a92:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <MPU6050_Get_Gyro_ScaledData+0x70>)
 8001a94:	edd3 7a00 	vldr	s15, [r3]
 8001a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = gyroRData.z * gyroScalingFactor;
 8001aa2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MPU6050_Get_Gyro_ScaledData+0x70>)
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000250 	.word	0x20000250

08001acc <getTiltAngle_Accel>:
	A_Y_Bias = (y_max + y_min) / 2.0f;
	A_Z_Bias = (z_max + z_min) / 2.0f;
}

void getTiltAngle_Accel(ScaledData_Def *acc_inp, TiltAngle_Def *acc_angle)
{
 8001acc:	b5b0      	push	{r4, r5, r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
	float ax = acc_inp->x;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	617b      	str	r3, [r7, #20]
	float ay = acc_inp->y;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	613b      	str	r3, [r7, #16]
	float az = acc_inp->z;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	60fb      	str	r3, [r7, #12]
	acc_angle->roll  = atan2( ay, az );
 8001ae8:	6938      	ldr	r0, [r7, #16]
 8001aea:	f7fe fd2d 	bl	8000548 <__aeabi_f2d>
 8001aee:	4604      	mov	r4, r0
 8001af0:	460d      	mov	r5, r1
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f7fe fd28 	bl	8000548 <__aeabi_f2d>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	ec43 2b11 	vmov	d1, r2, r3
 8001b00:	ec45 4b10 	vmov	d0, r4, r5
 8001b04:	f005 f998 	bl	8006e38 <atan2>
 8001b08:	ec53 2b10 	vmov	r2, r3, d0
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f7ff f84a 	bl	8000ba8 <__aeabi_d2f>
 8001b14:	4602      	mov	r2, r0
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	601a      	str	r2, [r3, #0]
	acc_angle->pitch = -atan2( ax, az );
 8001b1a:	6978      	ldr	r0, [r7, #20]
 8001b1c:	f7fe fd14 	bl	8000548 <__aeabi_f2d>
 8001b20:	4604      	mov	r4, r0
 8001b22:	460d      	mov	r5, r1
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f7fe fd0f 	bl	8000548 <__aeabi_f2d>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	ec43 2b11 	vmov	d1, r2, r3
 8001b32:	ec45 4b10 	vmov	d0, r4, r5
 8001b36:	f005 f97f 	bl	8006e38 <atan2>
 8001b3a:	ec53 2b10 	vmov	r2, r3, d0
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f7ff f831 	bl	8000ba8 <__aeabi_d2f>
 8001b46:	4603      	mov	r3, r0
 8001b48:	ee07 3a90 	vmov	s15, r3
 8001b4c:	eef1 7a67 	vneg.f32	s15, s15
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	edc3 7a01 	vstr	s15, [r3, #4]
	acc_angle->yaw   = 0.0; //atan2( sqrt(ax * ax + ay * ay), az );
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
}
 8001b5e:	bf00      	nop
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bdb0      	pop	{r4, r5, r7, pc}

08001b66 <getTiltAngle_Gyro>:

void getTiltAngle_Gyro(ScaledData_Def *gyro_inp, float dt, TiltAngle_Def *gyr_angle)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b085      	sub	sp, #20
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b72:	6079      	str	r1, [r7, #4]
	gyr_angle->roll  = gyr_angle->roll  + gyro_inp->x * dt;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	ed93 7a00 	vldr	s14, [r3]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	edd3 6a00 	vldr	s13, [r3]
 8001b80:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	edc3 7a00 	vstr	s15, [r3]
	gyr_angle->pitch = gyr_angle->pitch + gyro_inp->y * dt;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	edc3 7a01 	vstr	s15, [r3, #4]
	gyr_angle->yaw   = gyr_angle->yaw   + gyro_inp->z * dt;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <HAL_MspInit+0x4c>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a0f      	ldr	r2, [pc, #60]	; (8001c28 <HAL_MspInit+0x4c>)
 8001bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <HAL_MspInit+0x4c>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_MspInit+0x4c>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a08      	ldr	r2, [pc, #32]	; (8001c28 <HAL_MspInit+0x4c>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_MspInit+0x4c>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c1a:	2007      	movs	r0, #7
 8001c1c:	f000 fb0a 	bl	8002234 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40023800 	.word	0x40023800

08001c2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a19      	ldr	r2, [pc, #100]	; (8001cb0 <HAL_I2C_MspInit+0x84>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d12b      	bne.n	8001ca6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <HAL_I2C_MspInit+0x88>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a17      	ldr	r2, [pc, #92]	; (8001cb4 <HAL_I2C_MspInit+0x88>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <HAL_I2C_MspInit+0x88>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c6a:	23c0      	movs	r3, #192	; 0xc0
 8001c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c6e:	2312      	movs	r3, #18
 8001c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c72:	2301      	movs	r3, #1
 8001c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c76:	2303      	movs	r3, #3
 8001c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <HAL_I2C_MspInit+0x8c>)
 8001c86:	f000 fb09 	bl	800229c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_I2C_MspInit+0x88>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	4a08      	ldr	r2, [pc, #32]	; (8001cb4 <HAL_I2C_MspInit+0x88>)
 8001c94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c98:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_I2C_MspInit+0x88>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ca6:	bf00      	nop
 8001ca8:	3728      	adds	r7, #40	; 0x28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40005400 	.word	0x40005400
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020400 	.word	0x40020400

08001cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a19      	ldr	r2, [pc, #100]	; (8001d40 <HAL_UART_MspInit+0x84>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d12b      	bne.n	8001d36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <HAL_UART_MspInit+0x88>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	4a17      	ldr	r2, [pc, #92]	; (8001d44 <HAL_UART_MspInit+0x88>)
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	6413      	str	r3, [r2, #64]	; 0x40
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <HAL_UART_MspInit+0x88>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_UART_MspInit+0x88>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a10      	ldr	r2, [pc, #64]	; (8001d44 <HAL_UART_MspInit+0x88>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <HAL_UART_MspInit+0x88>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d16:	230c      	movs	r3, #12
 8001d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d22:	2303      	movs	r3, #3
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d26:	2307      	movs	r3, #7
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4805      	ldr	r0, [pc, #20]	; (8001d48 <HAL_UART_MspInit+0x8c>)
 8001d32:	f000 fab3 	bl	800229c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	; 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40004400 	.word	0x40004400
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40020000 	.word	0x40020000

08001d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <NMI_Handler+0x4>

08001d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <HardFault_Handler+0x4>

08001d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <MemManage_Handler+0x4>

08001d5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <BusFault_Handler+0x4>

08001d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <UsageFault_Handler+0x4>

08001d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d98:	f000 f956 	bl	8002048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
	return 1;
 8001da4:	2301      	movs	r3, #1
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <_kill>:

int _kill(int pid, int sig)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dba:	f002 fb3b 	bl	8004434 <__errno>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2216      	movs	r2, #22
 8001dc2:	601a      	str	r2, [r3, #0]
	return -1;
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <_exit>:

void _exit (int status)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ffe7 	bl	8001db0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001de2:	e7fe      	b.n	8001de2 <_exit+0x12>

08001de4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	e00a      	b.n	8001e0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001df6:	f3af 8000 	nop.w
 8001dfa:	4601      	mov	r1, r0
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	60ba      	str	r2, [r7, #8]
 8001e02:	b2ca      	uxtb	r2, r1
 8001e04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	dbf0      	blt.n	8001df6 <_read+0x12>
	}

return len;
 8001e14:	687b      	ldr	r3, [r7, #4]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b086      	sub	sp, #24
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	e009      	b.n	8001e44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	60ba      	str	r2, [r7, #8]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3301      	adds	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	dbf1      	blt.n	8001e30 <_write+0x12>
	}
	return len;
 8001e4c:	687b      	ldr	r3, [r7, #4]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <_close>:

int _close(int file)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
	return -1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e7e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <_isatty>:

int _isatty(int file)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
	return 1;
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
	return 0;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec8:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <_sbrk+0x5c>)
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <_sbrk+0x60>)
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed4:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <_sbrk+0x64>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d102      	bne.n	8001ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <_sbrk+0x64>)
 8001ede:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <_sbrk+0x68>)
 8001ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <_sbrk+0x64>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d207      	bcs.n	8001f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef0:	f002 faa0 	bl	8004434 <__errno>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001efe:	e009      	b.n	8001f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <_sbrk+0x64>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f06:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <_sbrk+0x64>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <_sbrk+0x64>)
 8001f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f12:	68fb      	ldr	r3, [r7, #12]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20020000 	.word	0x20020000
 8001f20:	00000400 	.word	0x00000400
 8001f24:	2000025c 	.word	0x2000025c
 8001f28:	20000360 	.word	0x20000360

08001f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <SystemInit+0x20>)
 8001f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f36:	4a05      	ldr	r2, [pc, #20]	; (8001f4c <SystemInit+0x20>)
 8001f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f54:	480d      	ldr	r0, [pc, #52]	; (8001f8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f56:	490e      	ldr	r1, [pc, #56]	; (8001f90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f58:	4a0e      	ldr	r2, [pc, #56]	; (8001f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f5c:	e002      	b.n	8001f64 <LoopCopyDataInit>

08001f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f62:	3304      	adds	r3, #4

08001f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f68:	d3f9      	bcc.n	8001f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6a:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f6c:	4c0b      	ldr	r4, [pc, #44]	; (8001f9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f70:	e001      	b.n	8001f76 <LoopFillZerobss>

08001f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f74:	3204      	adds	r2, #4

08001f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f78:	d3fb      	bcc.n	8001f72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f7a:	f7ff ffd7 	bl	8001f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f7e:	f002 fa5f 	bl	8004440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f82:	f7ff f975 	bl	8001270 <main>
  bx  lr    
 8001f86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f90:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001f94:	080077e8 	.word	0x080077e8
  ldr r2, =_sbss
 8001f98:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001f9c:	20000360 	.word	0x20000360

08001fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa0:	e7fe      	b.n	8001fa0 <ADC_IRQHandler>
	...

08001fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fa8:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <HAL_Init+0x40>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <HAL_Init+0x40>)
 8001fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_Init+0x40>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <HAL_Init+0x40>)
 8001fba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_Init+0x40>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <HAL_Init+0x40>)
 8001fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fcc:	2003      	movs	r0, #3
 8001fce:	f000 f931 	bl	8002234 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f000 f808 	bl	8001fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd8:	f7ff fe00 	bl	8001bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40023c00 	.word	0x40023c00

08001fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_InitTick+0x54>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_InitTick+0x58>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002002:	fbb2 f3f3 	udiv	r3, r2, r3
 8002006:	4618      	mov	r0, r3
 8002008:	f000 f93b 	bl	8002282 <HAL_SYSTICK_Config>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e00e      	b.n	8002034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b0f      	cmp	r3, #15
 800201a:	d80a      	bhi.n	8002032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800201c:	2200      	movs	r2, #0
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002024:	f000 f911 	bl	800224a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002028:	4a06      	ldr	r2, [pc, #24]	; (8002044 <HAL_InitTick+0x5c>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	e000      	b.n	8002034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000000 	.word	0x20000000
 8002040:	20000008 	.word	0x20000008
 8002044:	20000004 	.word	0x20000004

08002048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_IncTick+0x20>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_IncTick+0x24>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4413      	add	r3, r2
 8002058:	4a04      	ldr	r2, [pc, #16]	; (800206c <HAL_IncTick+0x24>)
 800205a:	6013      	str	r3, [r2, #0]
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	20000008 	.word	0x20000008
 800206c:	2000034c 	.word	0x2000034c

08002070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return uwTick;
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <HAL_GetTick+0x14>)
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	2000034c 	.word	0x2000034c

08002088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002090:	f7ff ffee 	bl	8002070 <HAL_GetTick>
 8002094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020a0:	d005      	beq.n	80020ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_Delay+0x44>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020ae:	bf00      	nop
 80020b0:	f7ff ffde 	bl	8002070 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d8f7      	bhi.n	80020b0 <HAL_Delay+0x28>
  {
  }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000008 	.word	0x20000008

080020d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020ec:	4013      	ands	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002102:	4a04      	ldr	r2, [pc, #16]	; (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	60d3      	str	r3, [r2, #12]
}
 8002108:	bf00      	nop
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800211c:	4b04      	ldr	r3, [pc, #16]	; (8002130 <__NVIC_GetPriorityGrouping+0x18>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	f003 0307 	and.w	r3, r3, #7
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002144:	2b00      	cmp	r3, #0
 8002146:	db0a      	blt.n	800215e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	490c      	ldr	r1, [pc, #48]	; (8002180 <__NVIC_SetPriority+0x4c>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	0112      	lsls	r2, r2, #4
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	440b      	add	r3, r1
 8002158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800215c:	e00a      	b.n	8002174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4908      	ldr	r1, [pc, #32]	; (8002184 <__NVIC_SetPriority+0x50>)
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	3b04      	subs	r3, #4
 800216c:	0112      	lsls	r2, r2, #4
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	440b      	add	r3, r1
 8002172:	761a      	strb	r2, [r3, #24]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000e100 	.word	0xe000e100
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	; 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f1c3 0307 	rsb	r3, r3, #7
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	bf28      	it	cs
 80021a6:	2304      	movcs	r3, #4
 80021a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3304      	adds	r3, #4
 80021ae:	2b06      	cmp	r3, #6
 80021b0:	d902      	bls.n	80021b8 <NVIC_EncodePriority+0x30>
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3b03      	subs	r3, #3
 80021b6:	e000      	b.n	80021ba <NVIC_EncodePriority+0x32>
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43da      	mvns	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	401a      	ands	r2, r3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	43d9      	mvns	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	4313      	orrs	r3, r2
         );
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002200:	d301      	bcc.n	8002206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002202:	2301      	movs	r3, #1
 8002204:	e00f      	b.n	8002226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002206:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <SysTick_Config+0x40>)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220e:	210f      	movs	r1, #15
 8002210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002214:	f7ff ff8e 	bl	8002134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <SysTick_Config+0x40>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221e:	4b04      	ldr	r3, [pc, #16]	; (8002230 <SysTick_Config+0x40>)
 8002220:	2207      	movs	r2, #7
 8002222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	e000e010 	.word	0xe000e010

08002234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ff47 	bl	80020d0 <__NVIC_SetPriorityGrouping>
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800224a:	b580      	push	{r7, lr}
 800224c:	b086      	sub	sp, #24
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800225c:	f7ff ff5c 	bl	8002118 <__NVIC_GetPriorityGrouping>
 8002260:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	6978      	ldr	r0, [r7, #20]
 8002268:	f7ff ff8e 	bl	8002188 <NVIC_EncodePriority>
 800226c:	4602      	mov	r2, r0
 800226e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff5d 	bl	8002134 <__NVIC_SetPriority>
}
 800227a:	bf00      	nop
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ffb0 	bl	80021f0 <SysTick_Config>
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	; 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	e16b      	b.n	8002590 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b8:	2201      	movs	r2, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	f040 815a 	bne.w	800258a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d005      	beq.n	80022ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d130      	bne.n	8002350 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002324:	2201      	movs	r2, #1
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 0201 	and.w	r2, r3, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b03      	cmp	r3, #3
 800235a:	d017      	beq.n	800238c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d123      	bne.n	80023e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	08da      	lsrs	r2, r3, #3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3208      	adds	r2, #8
 80023a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	220f      	movs	r2, #15
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	08da      	lsrs	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3208      	adds	r2, #8
 80023da:	69b9      	ldr	r1, [r7, #24]
 80023dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0203 	and.w	r2, r3, #3
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80b4 	beq.w	800258a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b60      	ldr	r3, [pc, #384]	; (80025a8 <HAL_GPIO_Init+0x30c>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	4a5f      	ldr	r2, [pc, #380]	; (80025a8 <HAL_GPIO_Init+0x30c>)
 800242c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002430:	6453      	str	r3, [r2, #68]	; 0x44
 8002432:	4b5d      	ldr	r3, [pc, #372]	; (80025a8 <HAL_GPIO_Init+0x30c>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800243e:	4a5b      	ldr	r2, [pc, #364]	; (80025ac <HAL_GPIO_Init+0x310>)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	220f      	movs	r2, #15
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a52      	ldr	r2, [pc, #328]	; (80025b0 <HAL_GPIO_Init+0x314>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d02b      	beq.n	80024c2 <HAL_GPIO_Init+0x226>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a51      	ldr	r2, [pc, #324]	; (80025b4 <HAL_GPIO_Init+0x318>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d025      	beq.n	80024be <HAL_GPIO_Init+0x222>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a50      	ldr	r2, [pc, #320]	; (80025b8 <HAL_GPIO_Init+0x31c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d01f      	beq.n	80024ba <HAL_GPIO_Init+0x21e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4f      	ldr	r2, [pc, #316]	; (80025bc <HAL_GPIO_Init+0x320>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d019      	beq.n	80024b6 <HAL_GPIO_Init+0x21a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4e      	ldr	r2, [pc, #312]	; (80025c0 <HAL_GPIO_Init+0x324>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d013      	beq.n	80024b2 <HAL_GPIO_Init+0x216>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4d      	ldr	r2, [pc, #308]	; (80025c4 <HAL_GPIO_Init+0x328>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d00d      	beq.n	80024ae <HAL_GPIO_Init+0x212>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4c      	ldr	r2, [pc, #304]	; (80025c8 <HAL_GPIO_Init+0x32c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d007      	beq.n	80024aa <HAL_GPIO_Init+0x20e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4b      	ldr	r2, [pc, #300]	; (80025cc <HAL_GPIO_Init+0x330>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d101      	bne.n	80024a6 <HAL_GPIO_Init+0x20a>
 80024a2:	2307      	movs	r3, #7
 80024a4:	e00e      	b.n	80024c4 <HAL_GPIO_Init+0x228>
 80024a6:	2308      	movs	r3, #8
 80024a8:	e00c      	b.n	80024c4 <HAL_GPIO_Init+0x228>
 80024aa:	2306      	movs	r3, #6
 80024ac:	e00a      	b.n	80024c4 <HAL_GPIO_Init+0x228>
 80024ae:	2305      	movs	r3, #5
 80024b0:	e008      	b.n	80024c4 <HAL_GPIO_Init+0x228>
 80024b2:	2304      	movs	r3, #4
 80024b4:	e006      	b.n	80024c4 <HAL_GPIO_Init+0x228>
 80024b6:	2303      	movs	r3, #3
 80024b8:	e004      	b.n	80024c4 <HAL_GPIO_Init+0x228>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e002      	b.n	80024c4 <HAL_GPIO_Init+0x228>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <HAL_GPIO_Init+0x228>
 80024c2:	2300      	movs	r3, #0
 80024c4:	69fa      	ldr	r2, [r7, #28]
 80024c6:	f002 0203 	and.w	r2, r2, #3
 80024ca:	0092      	lsls	r2, r2, #2
 80024cc:	4093      	lsls	r3, r2
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024d4:	4935      	ldr	r1, [pc, #212]	; (80025ac <HAL_GPIO_Init+0x310>)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	3302      	adds	r3, #2
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e2:	4b3b      	ldr	r3, [pc, #236]	; (80025d0 <HAL_GPIO_Init+0x334>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002506:	4a32      	ldr	r2, [pc, #200]	; (80025d0 <HAL_GPIO_Init+0x334>)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800250c:	4b30      	ldr	r3, [pc, #192]	; (80025d0 <HAL_GPIO_Init+0x334>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002530:	4a27      	ldr	r2, [pc, #156]	; (80025d0 <HAL_GPIO_Init+0x334>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <HAL_GPIO_Init+0x334>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800255a:	4a1d      	ldr	r2, [pc, #116]	; (80025d0 <HAL_GPIO_Init+0x334>)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <HAL_GPIO_Init+0x334>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002584:	4a12      	ldr	r2, [pc, #72]	; (80025d0 <HAL_GPIO_Init+0x334>)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3301      	adds	r3, #1
 800258e:	61fb      	str	r3, [r7, #28]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	2b0f      	cmp	r3, #15
 8002594:	f67f ae90 	bls.w	80022b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3724      	adds	r7, #36	; 0x24
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40013800 	.word	0x40013800
 80025b0:	40020000 	.word	0x40020000
 80025b4:	40020400 	.word	0x40020400
 80025b8:	40020800 	.word	0x40020800
 80025bc:	40020c00 	.word	0x40020c00
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40021400 	.word	0x40021400
 80025c8:	40021800 	.word	0x40021800
 80025cc:	40021c00 	.word	0x40021c00
 80025d0:	40013c00 	.word	0x40013c00

080025d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	807b      	strh	r3, [r7, #2]
 80025e0:	4613      	mov	r3, r2
 80025e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025e4:	787b      	ldrb	r3, [r7, #1]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ea:	887a      	ldrh	r2, [r7, #2]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025f0:	e003      	b.n	80025fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025f2:	887b      	ldrh	r3, [r7, #2]
 80025f4:	041a      	lsls	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	619a      	str	r2, [r3, #24]
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002606:	b480      	push	{r7}
 8002608:	b085      	sub	sp, #20
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	460b      	mov	r3, r1
 8002610:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002618:	887a      	ldrh	r2, [r7, #2]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4013      	ands	r3, r2
 800261e:	041a      	lsls	r2, r3, #16
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	43d9      	mvns	r1, r3
 8002624:	887b      	ldrh	r3, [r7, #2]
 8002626:	400b      	ands	r3, r1
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	619a      	str	r2, [r3, #24]
}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e12b      	b.n	80028a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d106      	bne.n	8002668 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff fae2 	bl	8001c2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2224      	movs	r2, #36	; 0x24
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800268e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800269e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026a0:	f001 fbae 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
 80026a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	4a81      	ldr	r2, [pc, #516]	; (80028b0 <HAL_I2C_Init+0x274>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d807      	bhi.n	80026c0 <HAL_I2C_Init+0x84>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4a80      	ldr	r2, [pc, #512]	; (80028b4 <HAL_I2C_Init+0x278>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	bf94      	ite	ls
 80026b8:	2301      	movls	r3, #1
 80026ba:	2300      	movhi	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	e006      	b.n	80026ce <HAL_I2C_Init+0x92>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4a7d      	ldr	r2, [pc, #500]	; (80028b8 <HAL_I2C_Init+0x27c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	bf94      	ite	ls
 80026c8:	2301      	movls	r3, #1
 80026ca:	2300      	movhi	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e0e7      	b.n	80028a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4a78      	ldr	r2, [pc, #480]	; (80028bc <HAL_I2C_Init+0x280>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	0c9b      	lsrs	r3, r3, #18
 80026e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4a6a      	ldr	r2, [pc, #424]	; (80028b0 <HAL_I2C_Init+0x274>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d802      	bhi.n	8002710 <HAL_I2C_Init+0xd4>
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	3301      	adds	r3, #1
 800270e:	e009      	b.n	8002724 <HAL_I2C_Init+0xe8>
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002716:	fb02 f303 	mul.w	r3, r2, r3
 800271a:	4a69      	ldr	r2, [pc, #420]	; (80028c0 <HAL_I2C_Init+0x284>)
 800271c:	fba2 2303 	umull	r2, r3, r2, r3
 8002720:	099b      	lsrs	r3, r3, #6
 8002722:	3301      	adds	r3, #1
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	430b      	orrs	r3, r1
 800272a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002736:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	495c      	ldr	r1, [pc, #368]	; (80028b0 <HAL_I2C_Init+0x274>)
 8002740:	428b      	cmp	r3, r1
 8002742:	d819      	bhi.n	8002778 <HAL_I2C_Init+0x13c>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1e59      	subs	r1, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002752:	1c59      	adds	r1, r3, #1
 8002754:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002758:	400b      	ands	r3, r1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <HAL_I2C_Init+0x138>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1e59      	subs	r1, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fbb1 f3f3 	udiv	r3, r1, r3
 800276c:	3301      	adds	r3, #1
 800276e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002772:	e051      	b.n	8002818 <HAL_I2C_Init+0x1dc>
 8002774:	2304      	movs	r3, #4
 8002776:	e04f      	b.n	8002818 <HAL_I2C_Init+0x1dc>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d111      	bne.n	80027a4 <HAL_I2C_Init+0x168>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1e58      	subs	r0, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6859      	ldr	r1, [r3, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	440b      	add	r3, r1
 800278e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002792:	3301      	adds	r3, #1
 8002794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf0c      	ite	eq
 800279c:	2301      	moveq	r3, #1
 800279e:	2300      	movne	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	e012      	b.n	80027ca <HAL_I2C_Init+0x18e>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	1e58      	subs	r0, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6859      	ldr	r1, [r3, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	0099      	lsls	r1, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ba:	3301      	adds	r3, #1
 80027bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_I2C_Init+0x196>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e022      	b.n	8002818 <HAL_I2C_Init+0x1dc>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10e      	bne.n	80027f8 <HAL_I2C_Init+0x1bc>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1e58      	subs	r0, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6859      	ldr	r1, [r3, #4]
 80027e2:	460b      	mov	r3, r1
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	440b      	add	r3, r1
 80027e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ec:	3301      	adds	r3, #1
 80027ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027f6:	e00f      	b.n	8002818 <HAL_I2C_Init+0x1dc>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1e58      	subs	r0, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6859      	ldr	r1, [r3, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	0099      	lsls	r1, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	fbb0 f3f3 	udiv	r3, r0, r3
 800280e:	3301      	adds	r3, #1
 8002810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002814:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	6809      	ldr	r1, [r1, #0]
 800281c:	4313      	orrs	r3, r2
 800281e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69da      	ldr	r2, [r3, #28]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002846:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6911      	ldr	r1, [r2, #16]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68d2      	ldr	r2, [r2, #12]
 8002852:	4311      	orrs	r1, r2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	430b      	orrs	r3, r1
 800285a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	000186a0 	.word	0x000186a0
 80028b4:	001e847f 	.word	0x001e847f
 80028b8:	003d08ff 	.word	0x003d08ff
 80028bc:	431bde83 	.word	0x431bde83
 80028c0:	10624dd3 	.word	0x10624dd3

080028c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	461a      	mov	r2, r3
 80028d0:	460b      	mov	r3, r1
 80028d2:	817b      	strh	r3, [r7, #10]
 80028d4:	4613      	mov	r3, r2
 80028d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028d8:	f7ff fbca 	bl	8002070 <HAL_GetTick>
 80028dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	f040 80e0 	bne.w	8002aac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	2319      	movs	r3, #25
 80028f2:	2201      	movs	r2, #1
 80028f4:	4970      	ldr	r1, [pc, #448]	; (8002ab8 <HAL_I2C_Master_Transmit+0x1f4>)
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fc58 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002902:	2302      	movs	r3, #2
 8002904:	e0d3      	b.n	8002aae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_I2C_Master_Transmit+0x50>
 8002910:	2302      	movs	r3, #2
 8002912:	e0cc      	b.n	8002aae <HAL_I2C_Master_Transmit+0x1ea>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b01      	cmp	r3, #1
 8002928:	d007      	beq.n	800293a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0201 	orr.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002948:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2221      	movs	r2, #33	; 0x21
 800294e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2210      	movs	r2, #16
 8002956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	893a      	ldrh	r2, [r7, #8]
 800296a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4a50      	ldr	r2, [pc, #320]	; (8002abc <HAL_I2C_Master_Transmit+0x1f8>)
 800297a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800297c:	8979      	ldrh	r1, [r7, #10]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	6a3a      	ldr	r2, [r7, #32]
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 fac2 	bl	8002f0c <I2C_MasterRequestWrite>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e08d      	b.n	8002aae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029a8:	e066      	b.n	8002a78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	6a39      	ldr	r1, [r7, #32]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 fcd2 	bl	8003358 <I2C_WaitOnTXEFlagUntilTimeout>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00d      	beq.n	80029d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d107      	bne.n	80029d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e06b      	b.n	8002aae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	781a      	ldrb	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d11b      	bne.n	8002a4c <HAL_I2C_Master_Transmit+0x188>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d017      	beq.n	8002a4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	6a39      	ldr	r1, [r7, #32]
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fcc2 	bl	80033da <I2C_WaitOnBTFFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00d      	beq.n	8002a78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d107      	bne.n	8002a74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e01a      	b.n	8002aae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d194      	bne.n	80029aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	e000      	b.n	8002aae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002aac:	2302      	movs	r3, #2
  }
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	00100002 	.word	0x00100002
 8002abc:	ffff0000 	.word	0xffff0000

08002ac0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08c      	sub	sp, #48	; 0x30
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	461a      	mov	r2, r3
 8002acc:	460b      	mov	r3, r1
 8002ace:	817b      	strh	r3, [r7, #10]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ad4:	f7ff facc 	bl	8002070 <HAL_GetTick>
 8002ad8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	f040 820b 	bne.w	8002efe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	2319      	movs	r3, #25
 8002aee:	2201      	movs	r2, #1
 8002af0:	497c      	ldr	r1, [pc, #496]	; (8002ce4 <HAL_I2C_Master_Receive+0x224>)
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fb5a 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002afe:	2302      	movs	r3, #2
 8002b00:	e1fe      	b.n	8002f00 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_I2C_Master_Receive+0x50>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e1f7      	b.n	8002f00 <HAL_I2C_Master_Receive+0x440>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d007      	beq.n	8002b36 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0201 	orr.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2222      	movs	r2, #34	; 0x22
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2210      	movs	r2, #16
 8002b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	893a      	ldrh	r2, [r7, #8]
 8002b66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4a5c      	ldr	r2, [pc, #368]	; (8002ce8 <HAL_I2C_Master_Receive+0x228>)
 8002b76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b78:	8979      	ldrh	r1, [r7, #10]
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 fa46 	bl	8003010 <I2C_MasterRequestRead>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e1b8      	b.n	8002f00 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d113      	bne.n	8002bbe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b96:	2300      	movs	r3, #0
 8002b98:	623b      	str	r3, [r7, #32]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	623b      	str	r3, [r7, #32]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	623b      	str	r3, [r7, #32]
 8002baa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e18c      	b.n	8002ed8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d11b      	bne.n	8002bfe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e16c      	b.n	8002ed8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d11b      	bne.n	8002c3e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	61bb      	str	r3, [r7, #24]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	e14c      	b.n	8002ed8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c64:	e138      	b.n	8002ed8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	f200 80f1 	bhi.w	8002e52 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d123      	bne.n	8002cc0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 fbed 	bl	800345c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e139      	b.n	8002f00 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cbe:	e10b      	b.n	8002ed8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d14e      	bne.n	8002d66 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	2200      	movs	r2, #0
 8002cd0:	4906      	ldr	r1, [pc, #24]	; (8002cec <HAL_I2C_Master_Receive+0x22c>)
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 fa6a 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e10e      	b.n	8002f00 <HAL_I2C_Master_Receive+0x440>
 8002ce2:	bf00      	nop
 8002ce4:	00100002 	.word	0x00100002
 8002ce8:	ffff0000 	.word	0xffff0000
 8002cec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d64:	e0b8      	b.n	8002ed8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	4966      	ldr	r1, [pc, #408]	; (8002f08 <HAL_I2C_Master_Receive+0x448>)
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fa1b 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0bf      	b.n	8002f00 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691a      	ldr	r2, [r3, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	2200      	movs	r2, #0
 8002dca:	494f      	ldr	r1, [pc, #316]	; (8002f08 <HAL_I2C_Master_Receive+0x448>)
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 f9ed 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e091      	b.n	8002f00 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	1c5a      	adds	r2, r3, #1
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e50:	e042      	b.n	8002ed8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 fb00 	bl	800345c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e04c      	b.n	8002f00 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d118      	bne.n	8002ed8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f47f aec2 	bne.w	8002c66 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e000      	b.n	8002f00 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
  }
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3728      	adds	r7, #40	; 0x28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	00010004 	.word	0x00010004

08002f0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	607a      	str	r2, [r7, #4]
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d006      	beq.n	8002f36 <I2C_MasterRequestWrite+0x2a>
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d003      	beq.n	8002f36 <I2C_MasterRequestWrite+0x2a>
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f34:	d108      	bne.n	8002f48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	e00b      	b.n	8002f60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	2b12      	cmp	r3, #18
 8002f4e:	d107      	bne.n	8002f60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f91d 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00d      	beq.n	8002f94 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f86:	d103      	bne.n	8002f90 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e035      	b.n	8003000 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f9c:	d108      	bne.n	8002fb0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f9e:	897b      	ldrh	r3, [r7, #10]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fac:	611a      	str	r2, [r3, #16]
 8002fae:	e01b      	b.n	8002fe8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fb0:	897b      	ldrh	r3, [r7, #10]
 8002fb2:	11db      	asrs	r3, r3, #7
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f003 0306 	and.w	r3, r3, #6
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f063 030f 	orn	r3, r3, #15
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	490e      	ldr	r1, [pc, #56]	; (8003008 <I2C_MasterRequestWrite+0xfc>)
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f943 	bl	800325a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e010      	b.n	8003000 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fde:	897b      	ldrh	r3, [r7, #10]
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	4907      	ldr	r1, [pc, #28]	; (800300c <I2C_MasterRequestWrite+0x100>)
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f933 	bl	800325a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	00010008 	.word	0x00010008
 800300c:	00010002 	.word	0x00010002

08003010 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af02      	add	r7, sp, #8
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	460b      	mov	r3, r1
 800301e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003034:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b08      	cmp	r3, #8
 800303a:	d006      	beq.n	800304a <I2C_MasterRequestRead+0x3a>
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d003      	beq.n	800304a <I2C_MasterRequestRead+0x3a>
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003048:	d108      	bne.n	800305c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	e00b      	b.n	8003074 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003060:	2b11      	cmp	r3, #17
 8003062:	d107      	bne.n	8003074 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003072:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f893 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00d      	beq.n	80030a8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800309a:	d103      	bne.n	80030a4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e079      	b.n	800319c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030b0:	d108      	bne.n	80030c4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030b2:	897b      	ldrh	r3, [r7, #10]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	611a      	str	r2, [r3, #16]
 80030c2:	e05f      	b.n	8003184 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030c4:	897b      	ldrh	r3, [r7, #10]
 80030c6:	11db      	asrs	r3, r3, #7
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	f003 0306 	and.w	r3, r3, #6
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f063 030f 	orn	r3, r3, #15
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	4930      	ldr	r1, [pc, #192]	; (80031a4 <I2C_MasterRequestRead+0x194>)
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f8b9 	bl	800325a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e054      	b.n	800319c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030f2:	897b      	ldrh	r3, [r7, #10]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	4929      	ldr	r1, [pc, #164]	; (80031a8 <I2C_MasterRequestRead+0x198>)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f8a9 	bl	800325a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e044      	b.n	800319c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003136:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f831 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00d      	beq.n	800316c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800315e:	d103      	bne.n	8003168 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003166:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e017      	b.n	800319c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800316c:	897b      	ldrh	r3, [r7, #10]
 800316e:	11db      	asrs	r3, r3, #7
 8003170:	b2db      	uxtb	r3, r3
 8003172:	f003 0306 	and.w	r3, r3, #6
 8003176:	b2db      	uxtb	r3, r3
 8003178:	f063 030e 	orn	r3, r3, #14
 800317c:	b2da      	uxtb	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4907      	ldr	r1, [pc, #28]	; (80031a8 <I2C_MasterRequestRead+0x198>)
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f865 	bl	800325a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	00010008 	.word	0x00010008
 80031a8:	00010002 	.word	0x00010002

080031ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	4613      	mov	r3, r2
 80031ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031bc:	e025      	b.n	800320a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031c4:	d021      	beq.n	800320a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c6:	f7fe ff53 	bl	8002070 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d302      	bcc.n	80031dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d116      	bne.n	800320a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f043 0220 	orr.w	r2, r3, #32
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e023      	b.n	8003252 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b01      	cmp	r3, #1
 8003212:	d10d      	bne.n	8003230 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	43da      	mvns	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	4013      	ands	r3, r2
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	bf0c      	ite	eq
 8003226:	2301      	moveq	r3, #1
 8003228:	2300      	movne	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	461a      	mov	r2, r3
 800322e:	e00c      	b.n	800324a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	43da      	mvns	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	4013      	ands	r3, r2
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	bf0c      	ite	eq
 8003242:	2301      	moveq	r3, #1
 8003244:	2300      	movne	r3, #0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	429a      	cmp	r2, r3
 800324e:	d0b6      	beq.n	80031be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
 8003266:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003268:	e051      	b.n	800330e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003278:	d123      	bne.n	80032c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003288:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003292:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f043 0204 	orr.w	r2, r3, #4
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e046      	b.n	8003350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032c8:	d021      	beq.n	800330e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ca:	f7fe fed1 	bl	8002070 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d302      	bcc.n	80032e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d116      	bne.n	800330e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f043 0220 	orr.w	r2, r3, #32
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e020      	b.n	8003350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	0c1b      	lsrs	r3, r3, #16
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b01      	cmp	r3, #1
 8003316:	d10c      	bne.n	8003332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	43da      	mvns	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4013      	ands	r3, r2
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	bf14      	ite	ne
 800332a:	2301      	movne	r3, #1
 800332c:	2300      	moveq	r3, #0
 800332e:	b2db      	uxtb	r3, r3
 8003330:	e00b      	b.n	800334a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	43da      	mvns	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4013      	ands	r3, r2
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d18d      	bne.n	800326a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003364:	e02d      	b.n	80033c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f8ce 	bl	8003508 <I2C_IsAcknowledgeFailed>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e02d      	b.n	80033d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800337c:	d021      	beq.n	80033c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337e:	f7fe fe77 	bl	8002070 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	429a      	cmp	r2, r3
 800338c:	d302      	bcc.n	8003394 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d116      	bne.n	80033c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f043 0220 	orr.w	r2, r3, #32
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e007      	b.n	80033d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033cc:	2b80      	cmp	r3, #128	; 0x80
 80033ce:	d1ca      	bne.n	8003366 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033e6:	e02d      	b.n	8003444 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f88d 	bl	8003508 <I2C_IsAcknowledgeFailed>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e02d      	b.n	8003454 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033fe:	d021      	beq.n	8003444 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003400:	f7fe fe36 	bl	8002070 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	429a      	cmp	r2, r3
 800340e:	d302      	bcc.n	8003416 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d116      	bne.n	8003444 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	f043 0220 	orr.w	r2, r3, #32
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e007      	b.n	8003454 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b04      	cmp	r3, #4
 8003450:	d1ca      	bne.n	80033e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003468:	e042      	b.n	80034f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	f003 0310 	and.w	r3, r3, #16
 8003474:	2b10      	cmp	r3, #16
 8003476:	d119      	bne.n	80034ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0210 	mvn.w	r2, #16
 8003480:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e029      	b.n	8003500 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ac:	f7fe fde0 	bl	8002070 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d302      	bcc.n	80034c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d116      	bne.n	80034f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	f043 0220 	orr.w	r2, r3, #32
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e007      	b.n	8003500 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fa:	2b40      	cmp	r3, #64	; 0x40
 80034fc:	d1b5      	bne.n	800346a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800351e:	d11b      	bne.n	8003558 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003528:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	f043 0204 	orr.w	r2, r3, #4
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e000      	b.n	800355a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
	...

08003568 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e264      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d075      	beq.n	8003672 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003586:	4ba3      	ldr	r3, [pc, #652]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
 800358e:	2b04      	cmp	r3, #4
 8003590:	d00c      	beq.n	80035ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003592:	4ba0      	ldr	r3, [pc, #640]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800359a:	2b08      	cmp	r3, #8
 800359c:	d112      	bne.n	80035c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800359e:	4b9d      	ldr	r3, [pc, #628]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035aa:	d10b      	bne.n	80035c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ac:	4b99      	ldr	r3, [pc, #612]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d05b      	beq.n	8003670 <HAL_RCC_OscConfig+0x108>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d157      	bne.n	8003670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e23f      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035cc:	d106      	bne.n	80035dc <HAL_RCC_OscConfig+0x74>
 80035ce:	4b91      	ldr	r3, [pc, #580]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a90      	ldr	r2, [pc, #576]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e01d      	b.n	8003618 <HAL_RCC_OscConfig+0xb0>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035e4:	d10c      	bne.n	8003600 <HAL_RCC_OscConfig+0x98>
 80035e6:	4b8b      	ldr	r3, [pc, #556]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a8a      	ldr	r2, [pc, #552]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	4b88      	ldr	r3, [pc, #544]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a87      	ldr	r2, [pc, #540]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	e00b      	b.n	8003618 <HAL_RCC_OscConfig+0xb0>
 8003600:	4b84      	ldr	r3, [pc, #528]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a83      	ldr	r2, [pc, #524]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 8003606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	4b81      	ldr	r3, [pc, #516]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a80      	ldr	r2, [pc, #512]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 8003612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d013      	beq.n	8003648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003620:	f7fe fd26 	bl	8002070 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003628:	f7fe fd22 	bl	8002070 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	; 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e204      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	4b76      	ldr	r3, [pc, #472]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0xc0>
 8003646:	e014      	b.n	8003672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003648:	f7fe fd12 	bl	8002070 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003650:	f7fe fd0e 	bl	8002070 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	; 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e1f0      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003662:	4b6c      	ldr	r3, [pc, #432]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0xe8>
 800366e:	e000      	b.n	8003672 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d063      	beq.n	8003746 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800367e:	4b65      	ldr	r3, [pc, #404]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00b      	beq.n	80036a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800368a:	4b62      	ldr	r3, [pc, #392]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003692:	2b08      	cmp	r3, #8
 8003694:	d11c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003696:	4b5f      	ldr	r3, [pc, #380]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d116      	bne.n	80036d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a2:	4b5c      	ldr	r3, [pc, #368]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_RCC_OscConfig+0x152>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d001      	beq.n	80036ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e1c4      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ba:	4b56      	ldr	r3, [pc, #344]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4952      	ldr	r1, [pc, #328]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ce:	e03a      	b.n	8003746 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d020      	beq.n	800371a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036d8:	4b4f      	ldr	r3, [pc, #316]	; (8003818 <HAL_RCC_OscConfig+0x2b0>)
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036de:	f7fe fcc7 	bl	8002070 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036e6:	f7fe fcc3 	bl	8002070 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e1a5      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f8:	4b46      	ldr	r3, [pc, #280]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003704:	4b43      	ldr	r3, [pc, #268]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4940      	ldr	r1, [pc, #256]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 8003714:	4313      	orrs	r3, r2
 8003716:	600b      	str	r3, [r1, #0]
 8003718:	e015      	b.n	8003746 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800371a:	4b3f      	ldr	r3, [pc, #252]	; (8003818 <HAL_RCC_OscConfig+0x2b0>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003720:	f7fe fca6 	bl	8002070 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003728:	f7fe fca2 	bl	8002070 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e184      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373a:	4b36      	ldr	r3, [pc, #216]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d030      	beq.n	80037b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d016      	beq.n	8003788 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800375a:	4b30      	ldr	r3, [pc, #192]	; (800381c <HAL_RCC_OscConfig+0x2b4>)
 800375c:	2201      	movs	r2, #1
 800375e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003760:	f7fe fc86 	bl	8002070 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003768:	f7fe fc82 	bl	8002070 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e164      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377a:	4b26      	ldr	r3, [pc, #152]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 800377c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0x200>
 8003786:	e015      	b.n	80037b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003788:	4b24      	ldr	r3, [pc, #144]	; (800381c <HAL_RCC_OscConfig+0x2b4>)
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378e:	f7fe fc6f 	bl	8002070 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003796:	f7fe fc6b 	bl	8002070 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e14d      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a8:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80037aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1f0      	bne.n	8003796 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80a0 	beq.w	8003902 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c6:	4b13      	ldr	r3, [pc, #76]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10f      	bne.n	80037f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	4a0e      	ldr	r2, [pc, #56]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80037dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e0:	6413      	str	r3, [r2, #64]	; 0x40
 80037e2:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ee:	2301      	movs	r3, #1
 80037f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f2:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <HAL_RCC_OscConfig+0x2b8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d121      	bne.n	8003842 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037fe:	4b08      	ldr	r3, [pc, #32]	; (8003820 <HAL_RCC_OscConfig+0x2b8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a07      	ldr	r2, [pc, #28]	; (8003820 <HAL_RCC_OscConfig+0x2b8>)
 8003804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800380a:	f7fe fc31 	bl	8002070 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003810:	e011      	b.n	8003836 <HAL_RCC_OscConfig+0x2ce>
 8003812:	bf00      	nop
 8003814:	40023800 	.word	0x40023800
 8003818:	42470000 	.word	0x42470000
 800381c:	42470e80 	.word	0x42470e80
 8003820:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003824:	f7fe fc24 	bl	8002070 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e106      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003836:	4b85      	ldr	r3, [pc, #532]	; (8003a4c <HAL_RCC_OscConfig+0x4e4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d106      	bne.n	8003858 <HAL_RCC_OscConfig+0x2f0>
 800384a:	4b81      	ldr	r3, [pc, #516]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	4a80      	ldr	r2, [pc, #512]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	6713      	str	r3, [r2, #112]	; 0x70
 8003856:	e01c      	b.n	8003892 <HAL_RCC_OscConfig+0x32a>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b05      	cmp	r3, #5
 800385e:	d10c      	bne.n	800387a <HAL_RCC_OscConfig+0x312>
 8003860:	4b7b      	ldr	r3, [pc, #492]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	4a7a      	ldr	r2, [pc, #488]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 8003866:	f043 0304 	orr.w	r3, r3, #4
 800386a:	6713      	str	r3, [r2, #112]	; 0x70
 800386c:	4b78      	ldr	r3, [pc, #480]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 800386e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003870:	4a77      	ldr	r2, [pc, #476]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 8003872:	f043 0301 	orr.w	r3, r3, #1
 8003876:	6713      	str	r3, [r2, #112]	; 0x70
 8003878:	e00b      	b.n	8003892 <HAL_RCC_OscConfig+0x32a>
 800387a:	4b75      	ldr	r3, [pc, #468]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	4a74      	ldr	r2, [pc, #464]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	6713      	str	r3, [r2, #112]	; 0x70
 8003886:	4b72      	ldr	r3, [pc, #456]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	4a71      	ldr	r2, [pc, #452]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 800388c:	f023 0304 	bic.w	r3, r3, #4
 8003890:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d015      	beq.n	80038c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389a:	f7fe fbe9 	bl	8002070 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a0:	e00a      	b.n	80038b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a2:	f7fe fbe5 	bl	8002070 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e0c5      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b8:	4b65      	ldr	r3, [pc, #404]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0ee      	beq.n	80038a2 <HAL_RCC_OscConfig+0x33a>
 80038c4:	e014      	b.n	80038f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c6:	f7fe fbd3 	bl	8002070 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038cc:	e00a      	b.n	80038e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ce:	f7fe fbcf 	bl	8002070 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038dc:	4293      	cmp	r3, r2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e0af      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e4:	4b5a      	ldr	r3, [pc, #360]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1ee      	bne.n	80038ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d105      	bne.n	8003902 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f6:	4b56      	ldr	r3, [pc, #344]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	4a55      	ldr	r2, [pc, #340]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 80038fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003900:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 809b 	beq.w	8003a42 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800390c:	4b50      	ldr	r3, [pc, #320]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 030c 	and.w	r3, r3, #12
 8003914:	2b08      	cmp	r3, #8
 8003916:	d05c      	beq.n	80039d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d141      	bne.n	80039a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003920:	4b4c      	ldr	r3, [pc, #304]	; (8003a54 <HAL_RCC_OscConfig+0x4ec>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7fe fba3 	bl	8002070 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800392e:	f7fe fb9f 	bl	8002070 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e081      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003940:	4b43      	ldr	r3, [pc, #268]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f0      	bne.n	800392e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	019b      	lsls	r3, r3, #6
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	085b      	lsrs	r3, r3, #1
 8003964:	3b01      	subs	r3, #1
 8003966:	041b      	lsls	r3, r3, #16
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	061b      	lsls	r3, r3, #24
 8003970:	4937      	ldr	r1, [pc, #220]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 8003972:	4313      	orrs	r3, r2
 8003974:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003976:	4b37      	ldr	r3, [pc, #220]	; (8003a54 <HAL_RCC_OscConfig+0x4ec>)
 8003978:	2201      	movs	r2, #1
 800397a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7fe fb78 	bl	8002070 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003984:	f7fe fb74 	bl	8002070 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e056      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003996:	4b2e      	ldr	r3, [pc, #184]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0x41c>
 80039a2:	e04e      	b.n	8003a42 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a4:	4b2b      	ldr	r3, [pc, #172]	; (8003a54 <HAL_RCC_OscConfig+0x4ec>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039aa:	f7fe fb61 	bl	8002070 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b2:	f7fe fb5d 	bl	8002070 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e03f      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c4:	4b22      	ldr	r3, [pc, #136]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1f0      	bne.n	80039b2 <HAL_RCC_OscConfig+0x44a>
 80039d0:	e037      	b.n	8003a42 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e032      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039de:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d028      	beq.n	8003a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d121      	bne.n	8003a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d11a      	bne.n	8003a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a0e:	4013      	ands	r3, r2
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a14:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d111      	bne.n	8003a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	085b      	lsrs	r3, r3, #1
 8003a26:	3b01      	subs	r3, #1
 8003a28:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d107      	bne.n	8003a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d001      	beq.n	8003a42 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40007000 	.word	0x40007000
 8003a50:	40023800 	.word	0x40023800
 8003a54:	42470060 	.word	0x42470060

08003a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0cc      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a6c:	4b68      	ldr	r3, [pc, #416]	; (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d90c      	bls.n	8003a94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7a:	4b65      	ldr	r3, [pc, #404]	; (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a82:	4b63      	ldr	r3, [pc, #396]	; (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0b8      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d020      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aac:	4b59      	ldr	r3, [pc, #356]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	4a58      	ldr	r2, [pc, #352]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ab6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ac4:	4b53      	ldr	r3, [pc, #332]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4a52      	ldr	r2, [pc, #328]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ace:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad0:	4b50      	ldr	r3, [pc, #320]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	494d      	ldr	r1, [pc, #308]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d044      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d107      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af6:	4b47      	ldr	r3, [pc, #284]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d119      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e07f      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d003      	beq.n	8003b16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d107      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b16:	4b3f      	ldr	r3, [pc, #252]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e06f      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b26:	4b3b      	ldr	r3, [pc, #236]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e067      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b36:	4b37      	ldr	r3, [pc, #220]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f023 0203 	bic.w	r2, r3, #3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4934      	ldr	r1, [pc, #208]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b48:	f7fe fa92 	bl	8002070 <HAL_GetTick>
 8003b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4e:	e00a      	b.n	8003b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b50:	f7fe fa8e 	bl	8002070 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e04f      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b66:	4b2b      	ldr	r3, [pc, #172]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 020c 	and.w	r2, r3, #12
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d1eb      	bne.n	8003b50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b78:	4b25      	ldr	r3, [pc, #148]	; (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d20c      	bcs.n	8003ba0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b86:	4b22      	ldr	r3, [pc, #136]	; (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8e:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e032      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bac:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4916      	ldr	r1, [pc, #88]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bca:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	490e      	ldr	r1, [pc, #56]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bde:	f000 f821 	bl	8003c24 <HAL_RCC_GetSysClockFreq>
 8003be2:	4602      	mov	r2, r0
 8003be4:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	490a      	ldr	r1, [pc, #40]	; (8003c18 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf0:	5ccb      	ldrb	r3, [r1, r3]
 8003bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf6:	4a09      	ldr	r2, [pc, #36]	; (8003c1c <HAL_RCC_ClockConfig+0x1c4>)
 8003bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bfa:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe f9f2 	bl	8001fe8 <HAL_InitTick>

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40023c00 	.word	0x40023c00
 8003c14:	40023800 	.word	0x40023800
 8003c18:	08007368 	.word	0x08007368
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	20000004 	.word	0x20000004

08003c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003c28:	b084      	sub	sp, #16
 8003c2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	607b      	str	r3, [r7, #4]
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	2300      	movs	r3, #0
 8003c36:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c3c:	4b67      	ldr	r3, [pc, #412]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 030c 	and.w	r3, r3, #12
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d00d      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0x40>
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	f200 80bd 	bhi.w	8003dc8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0x34>
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d003      	beq.n	8003c5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c56:	e0b7      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c58:	4b61      	ldr	r3, [pc, #388]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c5a:	60bb      	str	r3, [r7, #8]
       break;
 8003c5c:	e0b7      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c5e:	4b61      	ldr	r3, [pc, #388]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003c60:	60bb      	str	r3, [r7, #8]
      break;
 8003c62:	e0b4      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c64:	4b5d      	ldr	r3, [pc, #372]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c6e:	4b5b      	ldr	r3, [pc, #364]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d04d      	beq.n	8003d16 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c7a:	4b58      	ldr	r3, [pc, #352]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	099b      	lsrs	r3, r3, #6
 8003c80:	461a      	mov	r2, r3
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c8a:	f04f 0100 	mov.w	r1, #0
 8003c8e:	ea02 0800 	and.w	r8, r2, r0
 8003c92:	ea03 0901 	and.w	r9, r3, r1
 8003c96:	4640      	mov	r0, r8
 8003c98:	4649      	mov	r1, r9
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	014b      	lsls	r3, r1, #5
 8003ca4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ca8:	0142      	lsls	r2, r0, #5
 8003caa:	4610      	mov	r0, r2
 8003cac:	4619      	mov	r1, r3
 8003cae:	ebb0 0008 	subs.w	r0, r0, r8
 8003cb2:	eb61 0109 	sbc.w	r1, r1, r9
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	018b      	lsls	r3, r1, #6
 8003cc0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003cc4:	0182      	lsls	r2, r0, #6
 8003cc6:	1a12      	subs	r2, r2, r0
 8003cc8:	eb63 0301 	sbc.w	r3, r3, r1
 8003ccc:	f04f 0000 	mov.w	r0, #0
 8003cd0:	f04f 0100 	mov.w	r1, #0
 8003cd4:	00d9      	lsls	r1, r3, #3
 8003cd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cda:	00d0      	lsls	r0, r2, #3
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	eb12 0208 	adds.w	r2, r2, r8
 8003ce4:	eb43 0309 	adc.w	r3, r3, r9
 8003ce8:	f04f 0000 	mov.w	r0, #0
 8003cec:	f04f 0100 	mov.w	r1, #0
 8003cf0:	0259      	lsls	r1, r3, #9
 8003cf2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003cf6:	0250      	lsls	r0, r2, #9
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	4619      	mov	r1, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	461a      	mov	r2, r3
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	f7fc ff9e 	bl	8000c48 <__aeabi_uldivmod>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4613      	mov	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	e04a      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d16:	4b31      	ldr	r3, [pc, #196]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	099b      	lsrs	r3, r3, #6
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d26:	f04f 0100 	mov.w	r1, #0
 8003d2a:	ea02 0400 	and.w	r4, r2, r0
 8003d2e:	ea03 0501 	and.w	r5, r3, r1
 8003d32:	4620      	mov	r0, r4
 8003d34:	4629      	mov	r1, r5
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	014b      	lsls	r3, r1, #5
 8003d40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d44:	0142      	lsls	r2, r0, #5
 8003d46:	4610      	mov	r0, r2
 8003d48:	4619      	mov	r1, r3
 8003d4a:	1b00      	subs	r0, r0, r4
 8003d4c:	eb61 0105 	sbc.w	r1, r1, r5
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	018b      	lsls	r3, r1, #6
 8003d5a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d5e:	0182      	lsls	r2, r0, #6
 8003d60:	1a12      	subs	r2, r2, r0
 8003d62:	eb63 0301 	sbc.w	r3, r3, r1
 8003d66:	f04f 0000 	mov.w	r0, #0
 8003d6a:	f04f 0100 	mov.w	r1, #0
 8003d6e:	00d9      	lsls	r1, r3, #3
 8003d70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d74:	00d0      	lsls	r0, r2, #3
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	1912      	adds	r2, r2, r4
 8003d7c:	eb45 0303 	adc.w	r3, r5, r3
 8003d80:	f04f 0000 	mov.w	r0, #0
 8003d84:	f04f 0100 	mov.w	r1, #0
 8003d88:	0299      	lsls	r1, r3, #10
 8003d8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d8e:	0290      	lsls	r0, r2, #10
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4610      	mov	r0, r2
 8003d96:	4619      	mov	r1, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	f7fc ff52 	bl	8000c48 <__aeabi_uldivmod>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4613      	mov	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dac:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	0c1b      	lsrs	r3, r3, #16
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	3301      	adds	r3, #1
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	60bb      	str	r3, [r7, #8]
      break;
 8003dc6:	e002      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dc8:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003dca:	60bb      	str	r3, [r7, #8]
      break;
 8003dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dce:	68bb      	ldr	r3, [r7, #8]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	00f42400 	.word	0x00f42400
 8003de4:	007a1200 	.word	0x007a1200

08003de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dec:	4b03      	ldr	r3, [pc, #12]	; (8003dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dee:	681b      	ldr	r3, [r3, #0]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20000000 	.word	0x20000000

08003e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e04:	f7ff fff0 	bl	8003de8 <HAL_RCC_GetHCLKFreq>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	0a9b      	lsrs	r3, r3, #10
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	4903      	ldr	r1, [pc, #12]	; (8003e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e16:	5ccb      	ldrb	r3, [r1, r3]
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40023800 	.word	0x40023800
 8003e24:	08007378 	.word	0x08007378

08003e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e2c:	f7ff ffdc 	bl	8003de8 <HAL_RCC_GetHCLKFreq>
 8003e30:	4602      	mov	r2, r0
 8003e32:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	0b5b      	lsrs	r3, r3, #13
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	4903      	ldr	r1, [pc, #12]	; (8003e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e3e:	5ccb      	ldrb	r3, [r1, r3]
 8003e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	08007378 	.word	0x08007378

08003e50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e03f      	b.n	8003ee2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fd ff20 	bl	8001cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2224      	movs	r2, #36	; 0x24
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f905 	bl	80040a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ea8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695a      	ldr	r2, [r3, #20]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ec8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b08a      	sub	sp, #40	; 0x28
 8003eee:	af02      	add	r7, sp, #8
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	603b      	str	r3, [r7, #0]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b20      	cmp	r3, #32
 8003f08:	d17c      	bne.n	8004004 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_UART_Transmit+0x2c>
 8003f10:	88fb      	ldrh	r3, [r7, #6]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e075      	b.n	8004006 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_UART_Transmit+0x3e>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e06e      	b.n	8004006 <HAL_UART_Transmit+0x11c>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2221      	movs	r2, #33	; 0x21
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f3e:	f7fe f897 	bl	8002070 <HAL_GetTick>
 8003f42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	88fa      	ldrh	r2, [r7, #6]
 8003f48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	88fa      	ldrh	r2, [r7, #6]
 8003f4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f58:	d108      	bne.n	8003f6c <HAL_UART_Transmit+0x82>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d104      	bne.n	8003f6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	e003      	b.n	8003f74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f7c:	e02a      	b.n	8003fd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2200      	movs	r2, #0
 8003f86:	2180      	movs	r1, #128	; 0x80
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f840 	bl	800400e <UART_WaitOnFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e036      	b.n	8004006 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10b      	bne.n	8003fb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	3302      	adds	r3, #2
 8003fb2:	61bb      	str	r3, [r7, #24]
 8003fb4:	e007      	b.n	8003fc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	781a      	ldrb	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1cf      	bne.n	8003f7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2140      	movs	r1, #64	; 0x40
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f810 	bl	800400e <UART_WaitOnFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e006      	b.n	8004006 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	e000      	b.n	8004006 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004004:	2302      	movs	r3, #2
  }
}
 8004006:	4618      	mov	r0, r3
 8004008:	3720      	adds	r7, #32
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	4613      	mov	r3, r2
 800401c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800401e:	e02c      	b.n	800407a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004026:	d028      	beq.n	800407a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d007      	beq.n	800403e <UART_WaitOnFlagUntilTimeout+0x30>
 800402e:	f7fe f81f 	bl	8002070 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	429a      	cmp	r2, r3
 800403c:	d21d      	bcs.n	800407a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800404c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e00f      	b.n	800409a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4013      	ands	r3, r2
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	429a      	cmp	r2, r3
 8004088:	bf0c      	ite	eq
 800408a:	2301      	moveq	r3, #1
 800408c:	2300      	movne	r3, #0
 800408e:	b2db      	uxtb	r3, r3
 8004090:	461a      	mov	r2, r3
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	429a      	cmp	r2, r3
 8004096:	d0c3      	beq.n	8004020 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040a8:	b09f      	sub	sp, #124	; 0x7c
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ba:	68d9      	ldr	r1, [r3, #12]
 80040bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	ea40 0301 	orr.w	r3, r0, r1
 80040c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	431a      	orrs	r2, r3
 80040d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	4313      	orrs	r3, r2
 80040dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80040de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040e8:	f021 010c 	bic.w	r1, r1, #12
 80040ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040f2:	430b      	orrs	r3, r1
 80040f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004102:	6999      	ldr	r1, [r3, #24]
 8004104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	ea40 0301 	orr.w	r3, r0, r1
 800410c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800410e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	4bc5      	ldr	r3, [pc, #788]	; (8004428 <UART_SetConfig+0x384>)
 8004114:	429a      	cmp	r2, r3
 8004116:	d004      	beq.n	8004122 <UART_SetConfig+0x7e>
 8004118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4bc3      	ldr	r3, [pc, #780]	; (800442c <UART_SetConfig+0x388>)
 800411e:	429a      	cmp	r2, r3
 8004120:	d103      	bne.n	800412a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004122:	f7ff fe81 	bl	8003e28 <HAL_RCC_GetPCLK2Freq>
 8004126:	6778      	str	r0, [r7, #116]	; 0x74
 8004128:	e002      	b.n	8004130 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800412a:	f7ff fe69 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
 800412e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004138:	f040 80b6 	bne.w	80042a8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800413c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800413e:	461c      	mov	r4, r3
 8004140:	f04f 0500 	mov.w	r5, #0
 8004144:	4622      	mov	r2, r4
 8004146:	462b      	mov	r3, r5
 8004148:	1891      	adds	r1, r2, r2
 800414a:	6439      	str	r1, [r7, #64]	; 0x40
 800414c:	415b      	adcs	r3, r3
 800414e:	647b      	str	r3, [r7, #68]	; 0x44
 8004150:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004154:	1912      	adds	r2, r2, r4
 8004156:	eb45 0303 	adc.w	r3, r5, r3
 800415a:	f04f 0000 	mov.w	r0, #0
 800415e:	f04f 0100 	mov.w	r1, #0
 8004162:	00d9      	lsls	r1, r3, #3
 8004164:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004168:	00d0      	lsls	r0, r2, #3
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	1911      	adds	r1, r2, r4
 8004170:	6639      	str	r1, [r7, #96]	; 0x60
 8004172:	416b      	adcs	r3, r5
 8004174:	667b      	str	r3, [r7, #100]	; 0x64
 8004176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	461a      	mov	r2, r3
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	1891      	adds	r1, r2, r2
 8004182:	63b9      	str	r1, [r7, #56]	; 0x38
 8004184:	415b      	adcs	r3, r3
 8004186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004188:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800418c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004190:	f7fc fd5a 	bl	8000c48 <__aeabi_uldivmod>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4ba5      	ldr	r3, [pc, #660]	; (8004430 <UART_SetConfig+0x38c>)
 800419a:	fba3 2302 	umull	r2, r3, r3, r2
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	011e      	lsls	r6, r3, #4
 80041a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a4:	461c      	mov	r4, r3
 80041a6:	f04f 0500 	mov.w	r5, #0
 80041aa:	4622      	mov	r2, r4
 80041ac:	462b      	mov	r3, r5
 80041ae:	1891      	adds	r1, r2, r2
 80041b0:	6339      	str	r1, [r7, #48]	; 0x30
 80041b2:	415b      	adcs	r3, r3
 80041b4:	637b      	str	r3, [r7, #52]	; 0x34
 80041b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80041ba:	1912      	adds	r2, r2, r4
 80041bc:	eb45 0303 	adc.w	r3, r5, r3
 80041c0:	f04f 0000 	mov.w	r0, #0
 80041c4:	f04f 0100 	mov.w	r1, #0
 80041c8:	00d9      	lsls	r1, r3, #3
 80041ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041ce:	00d0      	lsls	r0, r2, #3
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	1911      	adds	r1, r2, r4
 80041d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80041d8:	416b      	adcs	r3, r5
 80041da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	461a      	mov	r2, r3
 80041e2:	f04f 0300 	mov.w	r3, #0
 80041e6:	1891      	adds	r1, r2, r2
 80041e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80041ea:	415b      	adcs	r3, r3
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80041f6:	f7fc fd27 	bl	8000c48 <__aeabi_uldivmod>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	4b8c      	ldr	r3, [pc, #560]	; (8004430 <UART_SetConfig+0x38c>)
 8004200:	fba3 1302 	umull	r1, r3, r3, r2
 8004204:	095b      	lsrs	r3, r3, #5
 8004206:	2164      	movs	r1, #100	; 0x64
 8004208:	fb01 f303 	mul.w	r3, r1, r3
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	3332      	adds	r3, #50	; 0x32
 8004212:	4a87      	ldr	r2, [pc, #540]	; (8004430 <UART_SetConfig+0x38c>)
 8004214:	fba2 2303 	umull	r2, r3, r2, r3
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004220:	441e      	add	r6, r3
 8004222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004224:	4618      	mov	r0, r3
 8004226:	f04f 0100 	mov.w	r1, #0
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	1894      	adds	r4, r2, r2
 8004230:	623c      	str	r4, [r7, #32]
 8004232:	415b      	adcs	r3, r3
 8004234:	627b      	str	r3, [r7, #36]	; 0x24
 8004236:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800423a:	1812      	adds	r2, r2, r0
 800423c:	eb41 0303 	adc.w	r3, r1, r3
 8004240:	f04f 0400 	mov.w	r4, #0
 8004244:	f04f 0500 	mov.w	r5, #0
 8004248:	00dd      	lsls	r5, r3, #3
 800424a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800424e:	00d4      	lsls	r4, r2, #3
 8004250:	4622      	mov	r2, r4
 8004252:	462b      	mov	r3, r5
 8004254:	1814      	adds	r4, r2, r0
 8004256:	653c      	str	r4, [r7, #80]	; 0x50
 8004258:	414b      	adcs	r3, r1
 800425a:	657b      	str	r3, [r7, #84]	; 0x54
 800425c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	461a      	mov	r2, r3
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	1891      	adds	r1, r2, r2
 8004268:	61b9      	str	r1, [r7, #24]
 800426a:	415b      	adcs	r3, r3
 800426c:	61fb      	str	r3, [r7, #28]
 800426e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004272:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004276:	f7fc fce7 	bl	8000c48 <__aeabi_uldivmod>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4b6c      	ldr	r3, [pc, #432]	; (8004430 <UART_SetConfig+0x38c>)
 8004280:	fba3 1302 	umull	r1, r3, r3, r2
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	2164      	movs	r1, #100	; 0x64
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	3332      	adds	r3, #50	; 0x32
 8004292:	4a67      	ldr	r2, [pc, #412]	; (8004430 <UART_SetConfig+0x38c>)
 8004294:	fba2 2303 	umull	r2, r3, r2, r3
 8004298:	095b      	lsrs	r3, r3, #5
 800429a:	f003 0207 	and.w	r2, r3, #7
 800429e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4432      	add	r2, r6
 80042a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042a6:	e0b9      	b.n	800441c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042aa:	461c      	mov	r4, r3
 80042ac:	f04f 0500 	mov.w	r5, #0
 80042b0:	4622      	mov	r2, r4
 80042b2:	462b      	mov	r3, r5
 80042b4:	1891      	adds	r1, r2, r2
 80042b6:	6139      	str	r1, [r7, #16]
 80042b8:	415b      	adcs	r3, r3
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042c0:	1912      	adds	r2, r2, r4
 80042c2:	eb45 0303 	adc.w	r3, r5, r3
 80042c6:	f04f 0000 	mov.w	r0, #0
 80042ca:	f04f 0100 	mov.w	r1, #0
 80042ce:	00d9      	lsls	r1, r3, #3
 80042d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042d4:	00d0      	lsls	r0, r2, #3
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	eb12 0804 	adds.w	r8, r2, r4
 80042de:	eb43 0905 	adc.w	r9, r3, r5
 80042e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f04f 0100 	mov.w	r1, #0
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	008b      	lsls	r3, r1, #2
 80042f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042fa:	0082      	lsls	r2, r0, #2
 80042fc:	4640      	mov	r0, r8
 80042fe:	4649      	mov	r1, r9
 8004300:	f7fc fca2 	bl	8000c48 <__aeabi_uldivmod>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4b49      	ldr	r3, [pc, #292]	; (8004430 <UART_SetConfig+0x38c>)
 800430a:	fba3 2302 	umull	r2, r3, r3, r2
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	011e      	lsls	r6, r3, #4
 8004312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004314:	4618      	mov	r0, r3
 8004316:	f04f 0100 	mov.w	r1, #0
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	1894      	adds	r4, r2, r2
 8004320:	60bc      	str	r4, [r7, #8]
 8004322:	415b      	adcs	r3, r3
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800432a:	1812      	adds	r2, r2, r0
 800432c:	eb41 0303 	adc.w	r3, r1, r3
 8004330:	f04f 0400 	mov.w	r4, #0
 8004334:	f04f 0500 	mov.w	r5, #0
 8004338:	00dd      	lsls	r5, r3, #3
 800433a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800433e:	00d4      	lsls	r4, r2, #3
 8004340:	4622      	mov	r2, r4
 8004342:	462b      	mov	r3, r5
 8004344:	1814      	adds	r4, r2, r0
 8004346:	64bc      	str	r4, [r7, #72]	; 0x48
 8004348:	414b      	adcs	r3, r1
 800434a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800434c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	4618      	mov	r0, r3
 8004352:	f04f 0100 	mov.w	r1, #0
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	008b      	lsls	r3, r1, #2
 8004360:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004364:	0082      	lsls	r2, r0, #2
 8004366:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800436a:	f7fc fc6d 	bl	8000c48 <__aeabi_uldivmod>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	4b2f      	ldr	r3, [pc, #188]	; (8004430 <UART_SetConfig+0x38c>)
 8004374:	fba3 1302 	umull	r1, r3, r3, r2
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	2164      	movs	r1, #100	; 0x64
 800437c:	fb01 f303 	mul.w	r3, r1, r3
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	3332      	adds	r3, #50	; 0x32
 8004386:	4a2a      	ldr	r2, [pc, #168]	; (8004430 <UART_SetConfig+0x38c>)
 8004388:	fba2 2303 	umull	r2, r3, r2, r3
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004392:	441e      	add	r6, r3
 8004394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004396:	4618      	mov	r0, r3
 8004398:	f04f 0100 	mov.w	r1, #0
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	1894      	adds	r4, r2, r2
 80043a2:	603c      	str	r4, [r7, #0]
 80043a4:	415b      	adcs	r3, r3
 80043a6:	607b      	str	r3, [r7, #4]
 80043a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043ac:	1812      	adds	r2, r2, r0
 80043ae:	eb41 0303 	adc.w	r3, r1, r3
 80043b2:	f04f 0400 	mov.w	r4, #0
 80043b6:	f04f 0500 	mov.w	r5, #0
 80043ba:	00dd      	lsls	r5, r3, #3
 80043bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043c0:	00d4      	lsls	r4, r2, #3
 80043c2:	4622      	mov	r2, r4
 80043c4:	462b      	mov	r3, r5
 80043c6:	eb12 0a00 	adds.w	sl, r2, r0
 80043ca:	eb43 0b01 	adc.w	fp, r3, r1
 80043ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f04f 0100 	mov.w	r1, #0
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	008b      	lsls	r3, r1, #2
 80043e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043e6:	0082      	lsls	r2, r0, #2
 80043e8:	4650      	mov	r0, sl
 80043ea:	4659      	mov	r1, fp
 80043ec:	f7fc fc2c 	bl	8000c48 <__aeabi_uldivmod>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4b0e      	ldr	r3, [pc, #56]	; (8004430 <UART_SetConfig+0x38c>)
 80043f6:	fba3 1302 	umull	r1, r3, r3, r2
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	2164      	movs	r1, #100	; 0x64
 80043fe:	fb01 f303 	mul.w	r3, r1, r3
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	3332      	adds	r3, #50	; 0x32
 8004408:	4a09      	ldr	r2, [pc, #36]	; (8004430 <UART_SetConfig+0x38c>)
 800440a:	fba2 2303 	umull	r2, r3, r2, r3
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	f003 020f 	and.w	r2, r3, #15
 8004414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4432      	add	r2, r6
 800441a:	609a      	str	r2, [r3, #8]
}
 800441c:	bf00      	nop
 800441e:	377c      	adds	r7, #124	; 0x7c
 8004420:	46bd      	mov	sp, r7
 8004422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004426:	bf00      	nop
 8004428:	40011000 	.word	0x40011000
 800442c:	40011400 	.word	0x40011400
 8004430:	51eb851f 	.word	0x51eb851f

08004434 <__errno>:
 8004434:	4b01      	ldr	r3, [pc, #4]	; (800443c <__errno+0x8>)
 8004436:	6818      	ldr	r0, [r3, #0]
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	2000000c 	.word	0x2000000c

08004440 <__libc_init_array>:
 8004440:	b570      	push	{r4, r5, r6, lr}
 8004442:	4d0d      	ldr	r5, [pc, #52]	; (8004478 <__libc_init_array+0x38>)
 8004444:	4c0d      	ldr	r4, [pc, #52]	; (800447c <__libc_init_array+0x3c>)
 8004446:	1b64      	subs	r4, r4, r5
 8004448:	10a4      	asrs	r4, r4, #2
 800444a:	2600      	movs	r6, #0
 800444c:	42a6      	cmp	r6, r4
 800444e:	d109      	bne.n	8004464 <__libc_init_array+0x24>
 8004450:	4d0b      	ldr	r5, [pc, #44]	; (8004480 <__libc_init_array+0x40>)
 8004452:	4c0c      	ldr	r4, [pc, #48]	; (8004484 <__libc_init_array+0x44>)
 8004454:	f002 ff6a 	bl	800732c <_init>
 8004458:	1b64      	subs	r4, r4, r5
 800445a:	10a4      	asrs	r4, r4, #2
 800445c:	2600      	movs	r6, #0
 800445e:	42a6      	cmp	r6, r4
 8004460:	d105      	bne.n	800446e <__libc_init_array+0x2e>
 8004462:	bd70      	pop	{r4, r5, r6, pc}
 8004464:	f855 3b04 	ldr.w	r3, [r5], #4
 8004468:	4798      	blx	r3
 800446a:	3601      	adds	r6, #1
 800446c:	e7ee      	b.n	800444c <__libc_init_array+0xc>
 800446e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004472:	4798      	blx	r3
 8004474:	3601      	adds	r6, #1
 8004476:	e7f2      	b.n	800445e <__libc_init_array+0x1e>
 8004478:	080077e0 	.word	0x080077e0
 800447c:	080077e0 	.word	0x080077e0
 8004480:	080077e0 	.word	0x080077e0
 8004484:	080077e4 	.word	0x080077e4

08004488 <memcpy>:
 8004488:	440a      	add	r2, r1
 800448a:	4291      	cmp	r1, r2
 800448c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004490:	d100      	bne.n	8004494 <memcpy+0xc>
 8004492:	4770      	bx	lr
 8004494:	b510      	push	{r4, lr}
 8004496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800449a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800449e:	4291      	cmp	r1, r2
 80044a0:	d1f9      	bne.n	8004496 <memcpy+0xe>
 80044a2:	bd10      	pop	{r4, pc}

080044a4 <memset>:
 80044a4:	4402      	add	r2, r0
 80044a6:	4603      	mov	r3, r0
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d100      	bne.n	80044ae <memset+0xa>
 80044ac:	4770      	bx	lr
 80044ae:	f803 1b01 	strb.w	r1, [r3], #1
 80044b2:	e7f9      	b.n	80044a8 <memset+0x4>

080044b4 <__cvt>:
 80044b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044b8:	ec55 4b10 	vmov	r4, r5, d0
 80044bc:	2d00      	cmp	r5, #0
 80044be:	460e      	mov	r6, r1
 80044c0:	4619      	mov	r1, r3
 80044c2:	462b      	mov	r3, r5
 80044c4:	bfbb      	ittet	lt
 80044c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80044ca:	461d      	movlt	r5, r3
 80044cc:	2300      	movge	r3, #0
 80044ce:	232d      	movlt	r3, #45	; 0x2d
 80044d0:	700b      	strb	r3, [r1, #0]
 80044d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80044d8:	4691      	mov	r9, r2
 80044da:	f023 0820 	bic.w	r8, r3, #32
 80044de:	bfbc      	itt	lt
 80044e0:	4622      	movlt	r2, r4
 80044e2:	4614      	movlt	r4, r2
 80044e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044e8:	d005      	beq.n	80044f6 <__cvt+0x42>
 80044ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80044ee:	d100      	bne.n	80044f2 <__cvt+0x3e>
 80044f0:	3601      	adds	r6, #1
 80044f2:	2102      	movs	r1, #2
 80044f4:	e000      	b.n	80044f8 <__cvt+0x44>
 80044f6:	2103      	movs	r1, #3
 80044f8:	ab03      	add	r3, sp, #12
 80044fa:	9301      	str	r3, [sp, #4]
 80044fc:	ab02      	add	r3, sp, #8
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	ec45 4b10 	vmov	d0, r4, r5
 8004504:	4653      	mov	r3, sl
 8004506:	4632      	mov	r2, r6
 8004508:	f000 fcca 	bl	8004ea0 <_dtoa_r>
 800450c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004510:	4607      	mov	r7, r0
 8004512:	d102      	bne.n	800451a <__cvt+0x66>
 8004514:	f019 0f01 	tst.w	r9, #1
 8004518:	d022      	beq.n	8004560 <__cvt+0xac>
 800451a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800451e:	eb07 0906 	add.w	r9, r7, r6
 8004522:	d110      	bne.n	8004546 <__cvt+0x92>
 8004524:	783b      	ldrb	r3, [r7, #0]
 8004526:	2b30      	cmp	r3, #48	; 0x30
 8004528:	d10a      	bne.n	8004540 <__cvt+0x8c>
 800452a:	2200      	movs	r2, #0
 800452c:	2300      	movs	r3, #0
 800452e:	4620      	mov	r0, r4
 8004530:	4629      	mov	r1, r5
 8004532:	f7fc fac9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004536:	b918      	cbnz	r0, 8004540 <__cvt+0x8c>
 8004538:	f1c6 0601 	rsb	r6, r6, #1
 800453c:	f8ca 6000 	str.w	r6, [sl]
 8004540:	f8da 3000 	ldr.w	r3, [sl]
 8004544:	4499      	add	r9, r3
 8004546:	2200      	movs	r2, #0
 8004548:	2300      	movs	r3, #0
 800454a:	4620      	mov	r0, r4
 800454c:	4629      	mov	r1, r5
 800454e:	f7fc fabb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004552:	b108      	cbz	r0, 8004558 <__cvt+0xa4>
 8004554:	f8cd 900c 	str.w	r9, [sp, #12]
 8004558:	2230      	movs	r2, #48	; 0x30
 800455a:	9b03      	ldr	r3, [sp, #12]
 800455c:	454b      	cmp	r3, r9
 800455e:	d307      	bcc.n	8004570 <__cvt+0xbc>
 8004560:	9b03      	ldr	r3, [sp, #12]
 8004562:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004564:	1bdb      	subs	r3, r3, r7
 8004566:	4638      	mov	r0, r7
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	b004      	add	sp, #16
 800456c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004570:	1c59      	adds	r1, r3, #1
 8004572:	9103      	str	r1, [sp, #12]
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	e7f0      	b.n	800455a <__cvt+0xa6>

08004578 <__exponent>:
 8004578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800457a:	4603      	mov	r3, r0
 800457c:	2900      	cmp	r1, #0
 800457e:	bfb8      	it	lt
 8004580:	4249      	neglt	r1, r1
 8004582:	f803 2b02 	strb.w	r2, [r3], #2
 8004586:	bfb4      	ite	lt
 8004588:	222d      	movlt	r2, #45	; 0x2d
 800458a:	222b      	movge	r2, #43	; 0x2b
 800458c:	2909      	cmp	r1, #9
 800458e:	7042      	strb	r2, [r0, #1]
 8004590:	dd2a      	ble.n	80045e8 <__exponent+0x70>
 8004592:	f10d 0407 	add.w	r4, sp, #7
 8004596:	46a4      	mov	ip, r4
 8004598:	270a      	movs	r7, #10
 800459a:	46a6      	mov	lr, r4
 800459c:	460a      	mov	r2, r1
 800459e:	fb91 f6f7 	sdiv	r6, r1, r7
 80045a2:	fb07 1516 	mls	r5, r7, r6, r1
 80045a6:	3530      	adds	r5, #48	; 0x30
 80045a8:	2a63      	cmp	r2, #99	; 0x63
 80045aa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80045ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80045b2:	4631      	mov	r1, r6
 80045b4:	dcf1      	bgt.n	800459a <__exponent+0x22>
 80045b6:	3130      	adds	r1, #48	; 0x30
 80045b8:	f1ae 0502 	sub.w	r5, lr, #2
 80045bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80045c0:	1c44      	adds	r4, r0, #1
 80045c2:	4629      	mov	r1, r5
 80045c4:	4561      	cmp	r1, ip
 80045c6:	d30a      	bcc.n	80045de <__exponent+0x66>
 80045c8:	f10d 0209 	add.w	r2, sp, #9
 80045cc:	eba2 020e 	sub.w	r2, r2, lr
 80045d0:	4565      	cmp	r5, ip
 80045d2:	bf88      	it	hi
 80045d4:	2200      	movhi	r2, #0
 80045d6:	4413      	add	r3, r2
 80045d8:	1a18      	subs	r0, r3, r0
 80045da:	b003      	add	sp, #12
 80045dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80045e6:	e7ed      	b.n	80045c4 <__exponent+0x4c>
 80045e8:	2330      	movs	r3, #48	; 0x30
 80045ea:	3130      	adds	r1, #48	; 0x30
 80045ec:	7083      	strb	r3, [r0, #2]
 80045ee:	70c1      	strb	r1, [r0, #3]
 80045f0:	1d03      	adds	r3, r0, #4
 80045f2:	e7f1      	b.n	80045d8 <__exponent+0x60>

080045f4 <_printf_float>:
 80045f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f8:	ed2d 8b02 	vpush	{d8}
 80045fc:	b08d      	sub	sp, #52	; 0x34
 80045fe:	460c      	mov	r4, r1
 8004600:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004604:	4616      	mov	r6, r2
 8004606:	461f      	mov	r7, r3
 8004608:	4605      	mov	r5, r0
 800460a:	f001 fa35 	bl	8005a78 <_localeconv_r>
 800460e:	f8d0 a000 	ldr.w	sl, [r0]
 8004612:	4650      	mov	r0, sl
 8004614:	f7fb fddc 	bl	80001d0 <strlen>
 8004618:	2300      	movs	r3, #0
 800461a:	930a      	str	r3, [sp, #40]	; 0x28
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	9305      	str	r3, [sp, #20]
 8004620:	f8d8 3000 	ldr.w	r3, [r8]
 8004624:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004628:	3307      	adds	r3, #7
 800462a:	f023 0307 	bic.w	r3, r3, #7
 800462e:	f103 0208 	add.w	r2, r3, #8
 8004632:	f8c8 2000 	str.w	r2, [r8]
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800463e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004642:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004646:	9307      	str	r3, [sp, #28]
 8004648:	f8cd 8018 	str.w	r8, [sp, #24]
 800464c:	ee08 0a10 	vmov	s16, r0
 8004650:	4b9f      	ldr	r3, [pc, #636]	; (80048d0 <_printf_float+0x2dc>)
 8004652:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004656:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800465a:	f7fc fa67 	bl	8000b2c <__aeabi_dcmpun>
 800465e:	bb88      	cbnz	r0, 80046c4 <_printf_float+0xd0>
 8004660:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004664:	4b9a      	ldr	r3, [pc, #616]	; (80048d0 <_printf_float+0x2dc>)
 8004666:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800466a:	f7fc fa41 	bl	8000af0 <__aeabi_dcmple>
 800466e:	bb48      	cbnz	r0, 80046c4 <_printf_float+0xd0>
 8004670:	2200      	movs	r2, #0
 8004672:	2300      	movs	r3, #0
 8004674:	4640      	mov	r0, r8
 8004676:	4649      	mov	r1, r9
 8004678:	f7fc fa30 	bl	8000adc <__aeabi_dcmplt>
 800467c:	b110      	cbz	r0, 8004684 <_printf_float+0x90>
 800467e:	232d      	movs	r3, #45	; 0x2d
 8004680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004684:	4b93      	ldr	r3, [pc, #588]	; (80048d4 <_printf_float+0x2e0>)
 8004686:	4894      	ldr	r0, [pc, #592]	; (80048d8 <_printf_float+0x2e4>)
 8004688:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800468c:	bf94      	ite	ls
 800468e:	4698      	movls	r8, r3
 8004690:	4680      	movhi	r8, r0
 8004692:	2303      	movs	r3, #3
 8004694:	6123      	str	r3, [r4, #16]
 8004696:	9b05      	ldr	r3, [sp, #20]
 8004698:	f023 0204 	bic.w	r2, r3, #4
 800469c:	6022      	str	r2, [r4, #0]
 800469e:	f04f 0900 	mov.w	r9, #0
 80046a2:	9700      	str	r7, [sp, #0]
 80046a4:	4633      	mov	r3, r6
 80046a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80046a8:	4621      	mov	r1, r4
 80046aa:	4628      	mov	r0, r5
 80046ac:	f000 f9d8 	bl	8004a60 <_printf_common>
 80046b0:	3001      	adds	r0, #1
 80046b2:	f040 8090 	bne.w	80047d6 <_printf_float+0x1e2>
 80046b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046ba:	b00d      	add	sp, #52	; 0x34
 80046bc:	ecbd 8b02 	vpop	{d8}
 80046c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c4:	4642      	mov	r2, r8
 80046c6:	464b      	mov	r3, r9
 80046c8:	4640      	mov	r0, r8
 80046ca:	4649      	mov	r1, r9
 80046cc:	f7fc fa2e 	bl	8000b2c <__aeabi_dcmpun>
 80046d0:	b140      	cbz	r0, 80046e4 <_printf_float+0xf0>
 80046d2:	464b      	mov	r3, r9
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	bfbc      	itt	lt
 80046d8:	232d      	movlt	r3, #45	; 0x2d
 80046da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80046de:	487f      	ldr	r0, [pc, #508]	; (80048dc <_printf_float+0x2e8>)
 80046e0:	4b7f      	ldr	r3, [pc, #508]	; (80048e0 <_printf_float+0x2ec>)
 80046e2:	e7d1      	b.n	8004688 <_printf_float+0x94>
 80046e4:	6863      	ldr	r3, [r4, #4]
 80046e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80046ea:	9206      	str	r2, [sp, #24]
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	d13f      	bne.n	8004770 <_printf_float+0x17c>
 80046f0:	2306      	movs	r3, #6
 80046f2:	6063      	str	r3, [r4, #4]
 80046f4:	9b05      	ldr	r3, [sp, #20]
 80046f6:	6861      	ldr	r1, [r4, #4]
 80046f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80046fc:	2300      	movs	r3, #0
 80046fe:	9303      	str	r3, [sp, #12]
 8004700:	ab0a      	add	r3, sp, #40	; 0x28
 8004702:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004706:	ab09      	add	r3, sp, #36	; 0x24
 8004708:	ec49 8b10 	vmov	d0, r8, r9
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	6022      	str	r2, [r4, #0]
 8004710:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004714:	4628      	mov	r0, r5
 8004716:	f7ff fecd 	bl	80044b4 <__cvt>
 800471a:	9b06      	ldr	r3, [sp, #24]
 800471c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800471e:	2b47      	cmp	r3, #71	; 0x47
 8004720:	4680      	mov	r8, r0
 8004722:	d108      	bne.n	8004736 <_printf_float+0x142>
 8004724:	1cc8      	adds	r0, r1, #3
 8004726:	db02      	blt.n	800472e <_printf_float+0x13a>
 8004728:	6863      	ldr	r3, [r4, #4]
 800472a:	4299      	cmp	r1, r3
 800472c:	dd41      	ble.n	80047b2 <_printf_float+0x1be>
 800472e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004732:	fa5f fb8b 	uxtb.w	fp, fp
 8004736:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800473a:	d820      	bhi.n	800477e <_printf_float+0x18a>
 800473c:	3901      	subs	r1, #1
 800473e:	465a      	mov	r2, fp
 8004740:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004744:	9109      	str	r1, [sp, #36]	; 0x24
 8004746:	f7ff ff17 	bl	8004578 <__exponent>
 800474a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800474c:	1813      	adds	r3, r2, r0
 800474e:	2a01      	cmp	r2, #1
 8004750:	4681      	mov	r9, r0
 8004752:	6123      	str	r3, [r4, #16]
 8004754:	dc02      	bgt.n	800475c <_printf_float+0x168>
 8004756:	6822      	ldr	r2, [r4, #0]
 8004758:	07d2      	lsls	r2, r2, #31
 800475a:	d501      	bpl.n	8004760 <_printf_float+0x16c>
 800475c:	3301      	adds	r3, #1
 800475e:	6123      	str	r3, [r4, #16]
 8004760:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004764:	2b00      	cmp	r3, #0
 8004766:	d09c      	beq.n	80046a2 <_printf_float+0xae>
 8004768:	232d      	movs	r3, #45	; 0x2d
 800476a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800476e:	e798      	b.n	80046a2 <_printf_float+0xae>
 8004770:	9a06      	ldr	r2, [sp, #24]
 8004772:	2a47      	cmp	r2, #71	; 0x47
 8004774:	d1be      	bne.n	80046f4 <_printf_float+0x100>
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1bc      	bne.n	80046f4 <_printf_float+0x100>
 800477a:	2301      	movs	r3, #1
 800477c:	e7b9      	b.n	80046f2 <_printf_float+0xfe>
 800477e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004782:	d118      	bne.n	80047b6 <_printf_float+0x1c2>
 8004784:	2900      	cmp	r1, #0
 8004786:	6863      	ldr	r3, [r4, #4]
 8004788:	dd0b      	ble.n	80047a2 <_printf_float+0x1ae>
 800478a:	6121      	str	r1, [r4, #16]
 800478c:	b913      	cbnz	r3, 8004794 <_printf_float+0x1a0>
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	07d0      	lsls	r0, r2, #31
 8004792:	d502      	bpl.n	800479a <_printf_float+0x1a6>
 8004794:	3301      	adds	r3, #1
 8004796:	440b      	add	r3, r1
 8004798:	6123      	str	r3, [r4, #16]
 800479a:	65a1      	str	r1, [r4, #88]	; 0x58
 800479c:	f04f 0900 	mov.w	r9, #0
 80047a0:	e7de      	b.n	8004760 <_printf_float+0x16c>
 80047a2:	b913      	cbnz	r3, 80047aa <_printf_float+0x1b6>
 80047a4:	6822      	ldr	r2, [r4, #0]
 80047a6:	07d2      	lsls	r2, r2, #31
 80047a8:	d501      	bpl.n	80047ae <_printf_float+0x1ba>
 80047aa:	3302      	adds	r3, #2
 80047ac:	e7f4      	b.n	8004798 <_printf_float+0x1a4>
 80047ae:	2301      	movs	r3, #1
 80047b0:	e7f2      	b.n	8004798 <_printf_float+0x1a4>
 80047b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80047b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047b8:	4299      	cmp	r1, r3
 80047ba:	db05      	blt.n	80047c8 <_printf_float+0x1d4>
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	6121      	str	r1, [r4, #16]
 80047c0:	07d8      	lsls	r0, r3, #31
 80047c2:	d5ea      	bpl.n	800479a <_printf_float+0x1a6>
 80047c4:	1c4b      	adds	r3, r1, #1
 80047c6:	e7e7      	b.n	8004798 <_printf_float+0x1a4>
 80047c8:	2900      	cmp	r1, #0
 80047ca:	bfd4      	ite	le
 80047cc:	f1c1 0202 	rsble	r2, r1, #2
 80047d0:	2201      	movgt	r2, #1
 80047d2:	4413      	add	r3, r2
 80047d4:	e7e0      	b.n	8004798 <_printf_float+0x1a4>
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	055a      	lsls	r2, r3, #21
 80047da:	d407      	bmi.n	80047ec <_printf_float+0x1f8>
 80047dc:	6923      	ldr	r3, [r4, #16]
 80047de:	4642      	mov	r2, r8
 80047e0:	4631      	mov	r1, r6
 80047e2:	4628      	mov	r0, r5
 80047e4:	47b8      	blx	r7
 80047e6:	3001      	adds	r0, #1
 80047e8:	d12c      	bne.n	8004844 <_printf_float+0x250>
 80047ea:	e764      	b.n	80046b6 <_printf_float+0xc2>
 80047ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80047f0:	f240 80e0 	bls.w	80049b4 <_printf_float+0x3c0>
 80047f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047f8:	2200      	movs	r2, #0
 80047fa:	2300      	movs	r3, #0
 80047fc:	f7fc f964 	bl	8000ac8 <__aeabi_dcmpeq>
 8004800:	2800      	cmp	r0, #0
 8004802:	d034      	beq.n	800486e <_printf_float+0x27a>
 8004804:	4a37      	ldr	r2, [pc, #220]	; (80048e4 <_printf_float+0x2f0>)
 8004806:	2301      	movs	r3, #1
 8004808:	4631      	mov	r1, r6
 800480a:	4628      	mov	r0, r5
 800480c:	47b8      	blx	r7
 800480e:	3001      	adds	r0, #1
 8004810:	f43f af51 	beq.w	80046b6 <_printf_float+0xc2>
 8004814:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004818:	429a      	cmp	r2, r3
 800481a:	db02      	blt.n	8004822 <_printf_float+0x22e>
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	07d8      	lsls	r0, r3, #31
 8004820:	d510      	bpl.n	8004844 <_printf_float+0x250>
 8004822:	ee18 3a10 	vmov	r3, s16
 8004826:	4652      	mov	r2, sl
 8004828:	4631      	mov	r1, r6
 800482a:	4628      	mov	r0, r5
 800482c:	47b8      	blx	r7
 800482e:	3001      	adds	r0, #1
 8004830:	f43f af41 	beq.w	80046b6 <_printf_float+0xc2>
 8004834:	f04f 0800 	mov.w	r8, #0
 8004838:	f104 091a 	add.w	r9, r4, #26
 800483c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800483e:	3b01      	subs	r3, #1
 8004840:	4543      	cmp	r3, r8
 8004842:	dc09      	bgt.n	8004858 <_printf_float+0x264>
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	079b      	lsls	r3, r3, #30
 8004848:	f100 8105 	bmi.w	8004a56 <_printf_float+0x462>
 800484c:	68e0      	ldr	r0, [r4, #12]
 800484e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004850:	4298      	cmp	r0, r3
 8004852:	bfb8      	it	lt
 8004854:	4618      	movlt	r0, r3
 8004856:	e730      	b.n	80046ba <_printf_float+0xc6>
 8004858:	2301      	movs	r3, #1
 800485a:	464a      	mov	r2, r9
 800485c:	4631      	mov	r1, r6
 800485e:	4628      	mov	r0, r5
 8004860:	47b8      	blx	r7
 8004862:	3001      	adds	r0, #1
 8004864:	f43f af27 	beq.w	80046b6 <_printf_float+0xc2>
 8004868:	f108 0801 	add.w	r8, r8, #1
 800486c:	e7e6      	b.n	800483c <_printf_float+0x248>
 800486e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004870:	2b00      	cmp	r3, #0
 8004872:	dc39      	bgt.n	80048e8 <_printf_float+0x2f4>
 8004874:	4a1b      	ldr	r2, [pc, #108]	; (80048e4 <_printf_float+0x2f0>)
 8004876:	2301      	movs	r3, #1
 8004878:	4631      	mov	r1, r6
 800487a:	4628      	mov	r0, r5
 800487c:	47b8      	blx	r7
 800487e:	3001      	adds	r0, #1
 8004880:	f43f af19 	beq.w	80046b6 <_printf_float+0xc2>
 8004884:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004888:	4313      	orrs	r3, r2
 800488a:	d102      	bne.n	8004892 <_printf_float+0x29e>
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	07d9      	lsls	r1, r3, #31
 8004890:	d5d8      	bpl.n	8004844 <_printf_float+0x250>
 8004892:	ee18 3a10 	vmov	r3, s16
 8004896:	4652      	mov	r2, sl
 8004898:	4631      	mov	r1, r6
 800489a:	4628      	mov	r0, r5
 800489c:	47b8      	blx	r7
 800489e:	3001      	adds	r0, #1
 80048a0:	f43f af09 	beq.w	80046b6 <_printf_float+0xc2>
 80048a4:	f04f 0900 	mov.w	r9, #0
 80048a8:	f104 0a1a 	add.w	sl, r4, #26
 80048ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ae:	425b      	negs	r3, r3
 80048b0:	454b      	cmp	r3, r9
 80048b2:	dc01      	bgt.n	80048b8 <_printf_float+0x2c4>
 80048b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048b6:	e792      	b.n	80047de <_printf_float+0x1ea>
 80048b8:	2301      	movs	r3, #1
 80048ba:	4652      	mov	r2, sl
 80048bc:	4631      	mov	r1, r6
 80048be:	4628      	mov	r0, r5
 80048c0:	47b8      	blx	r7
 80048c2:	3001      	adds	r0, #1
 80048c4:	f43f aef7 	beq.w	80046b6 <_printf_float+0xc2>
 80048c8:	f109 0901 	add.w	r9, r9, #1
 80048cc:	e7ee      	b.n	80048ac <_printf_float+0x2b8>
 80048ce:	bf00      	nop
 80048d0:	7fefffff 	.word	0x7fefffff
 80048d4:	08007384 	.word	0x08007384
 80048d8:	08007388 	.word	0x08007388
 80048dc:	08007390 	.word	0x08007390
 80048e0:	0800738c 	.word	0x0800738c
 80048e4:	08007394 	.word	0x08007394
 80048e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048ec:	429a      	cmp	r2, r3
 80048ee:	bfa8      	it	ge
 80048f0:	461a      	movge	r2, r3
 80048f2:	2a00      	cmp	r2, #0
 80048f4:	4691      	mov	r9, r2
 80048f6:	dc37      	bgt.n	8004968 <_printf_float+0x374>
 80048f8:	f04f 0b00 	mov.w	fp, #0
 80048fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004900:	f104 021a 	add.w	r2, r4, #26
 8004904:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004906:	9305      	str	r3, [sp, #20]
 8004908:	eba3 0309 	sub.w	r3, r3, r9
 800490c:	455b      	cmp	r3, fp
 800490e:	dc33      	bgt.n	8004978 <_printf_float+0x384>
 8004910:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004914:	429a      	cmp	r2, r3
 8004916:	db3b      	blt.n	8004990 <_printf_float+0x39c>
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	07da      	lsls	r2, r3, #31
 800491c:	d438      	bmi.n	8004990 <_printf_float+0x39c>
 800491e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004920:	9b05      	ldr	r3, [sp, #20]
 8004922:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	eba2 0901 	sub.w	r9, r2, r1
 800492a:	4599      	cmp	r9, r3
 800492c:	bfa8      	it	ge
 800492e:	4699      	movge	r9, r3
 8004930:	f1b9 0f00 	cmp.w	r9, #0
 8004934:	dc35      	bgt.n	80049a2 <_printf_float+0x3ae>
 8004936:	f04f 0800 	mov.w	r8, #0
 800493a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800493e:	f104 0a1a 	add.w	sl, r4, #26
 8004942:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	eba3 0309 	sub.w	r3, r3, r9
 800494c:	4543      	cmp	r3, r8
 800494e:	f77f af79 	ble.w	8004844 <_printf_float+0x250>
 8004952:	2301      	movs	r3, #1
 8004954:	4652      	mov	r2, sl
 8004956:	4631      	mov	r1, r6
 8004958:	4628      	mov	r0, r5
 800495a:	47b8      	blx	r7
 800495c:	3001      	adds	r0, #1
 800495e:	f43f aeaa 	beq.w	80046b6 <_printf_float+0xc2>
 8004962:	f108 0801 	add.w	r8, r8, #1
 8004966:	e7ec      	b.n	8004942 <_printf_float+0x34e>
 8004968:	4613      	mov	r3, r2
 800496a:	4631      	mov	r1, r6
 800496c:	4642      	mov	r2, r8
 800496e:	4628      	mov	r0, r5
 8004970:	47b8      	blx	r7
 8004972:	3001      	adds	r0, #1
 8004974:	d1c0      	bne.n	80048f8 <_printf_float+0x304>
 8004976:	e69e      	b.n	80046b6 <_printf_float+0xc2>
 8004978:	2301      	movs	r3, #1
 800497a:	4631      	mov	r1, r6
 800497c:	4628      	mov	r0, r5
 800497e:	9205      	str	r2, [sp, #20]
 8004980:	47b8      	blx	r7
 8004982:	3001      	adds	r0, #1
 8004984:	f43f ae97 	beq.w	80046b6 <_printf_float+0xc2>
 8004988:	9a05      	ldr	r2, [sp, #20]
 800498a:	f10b 0b01 	add.w	fp, fp, #1
 800498e:	e7b9      	b.n	8004904 <_printf_float+0x310>
 8004990:	ee18 3a10 	vmov	r3, s16
 8004994:	4652      	mov	r2, sl
 8004996:	4631      	mov	r1, r6
 8004998:	4628      	mov	r0, r5
 800499a:	47b8      	blx	r7
 800499c:	3001      	adds	r0, #1
 800499e:	d1be      	bne.n	800491e <_printf_float+0x32a>
 80049a0:	e689      	b.n	80046b6 <_printf_float+0xc2>
 80049a2:	9a05      	ldr	r2, [sp, #20]
 80049a4:	464b      	mov	r3, r9
 80049a6:	4442      	add	r2, r8
 80049a8:	4631      	mov	r1, r6
 80049aa:	4628      	mov	r0, r5
 80049ac:	47b8      	blx	r7
 80049ae:	3001      	adds	r0, #1
 80049b0:	d1c1      	bne.n	8004936 <_printf_float+0x342>
 80049b2:	e680      	b.n	80046b6 <_printf_float+0xc2>
 80049b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049b6:	2a01      	cmp	r2, #1
 80049b8:	dc01      	bgt.n	80049be <_printf_float+0x3ca>
 80049ba:	07db      	lsls	r3, r3, #31
 80049bc:	d538      	bpl.n	8004a30 <_printf_float+0x43c>
 80049be:	2301      	movs	r3, #1
 80049c0:	4642      	mov	r2, r8
 80049c2:	4631      	mov	r1, r6
 80049c4:	4628      	mov	r0, r5
 80049c6:	47b8      	blx	r7
 80049c8:	3001      	adds	r0, #1
 80049ca:	f43f ae74 	beq.w	80046b6 <_printf_float+0xc2>
 80049ce:	ee18 3a10 	vmov	r3, s16
 80049d2:	4652      	mov	r2, sl
 80049d4:	4631      	mov	r1, r6
 80049d6:	4628      	mov	r0, r5
 80049d8:	47b8      	blx	r7
 80049da:	3001      	adds	r0, #1
 80049dc:	f43f ae6b 	beq.w	80046b6 <_printf_float+0xc2>
 80049e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049e4:	2200      	movs	r2, #0
 80049e6:	2300      	movs	r3, #0
 80049e8:	f7fc f86e 	bl	8000ac8 <__aeabi_dcmpeq>
 80049ec:	b9d8      	cbnz	r0, 8004a26 <_printf_float+0x432>
 80049ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049f0:	f108 0201 	add.w	r2, r8, #1
 80049f4:	3b01      	subs	r3, #1
 80049f6:	4631      	mov	r1, r6
 80049f8:	4628      	mov	r0, r5
 80049fa:	47b8      	blx	r7
 80049fc:	3001      	adds	r0, #1
 80049fe:	d10e      	bne.n	8004a1e <_printf_float+0x42a>
 8004a00:	e659      	b.n	80046b6 <_printf_float+0xc2>
 8004a02:	2301      	movs	r3, #1
 8004a04:	4652      	mov	r2, sl
 8004a06:	4631      	mov	r1, r6
 8004a08:	4628      	mov	r0, r5
 8004a0a:	47b8      	blx	r7
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	f43f ae52 	beq.w	80046b6 <_printf_float+0xc2>
 8004a12:	f108 0801 	add.w	r8, r8, #1
 8004a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	4543      	cmp	r3, r8
 8004a1c:	dcf1      	bgt.n	8004a02 <_printf_float+0x40e>
 8004a1e:	464b      	mov	r3, r9
 8004a20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a24:	e6dc      	b.n	80047e0 <_printf_float+0x1ec>
 8004a26:	f04f 0800 	mov.w	r8, #0
 8004a2a:	f104 0a1a 	add.w	sl, r4, #26
 8004a2e:	e7f2      	b.n	8004a16 <_printf_float+0x422>
 8004a30:	2301      	movs	r3, #1
 8004a32:	4642      	mov	r2, r8
 8004a34:	e7df      	b.n	80049f6 <_printf_float+0x402>
 8004a36:	2301      	movs	r3, #1
 8004a38:	464a      	mov	r2, r9
 8004a3a:	4631      	mov	r1, r6
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	47b8      	blx	r7
 8004a40:	3001      	adds	r0, #1
 8004a42:	f43f ae38 	beq.w	80046b6 <_printf_float+0xc2>
 8004a46:	f108 0801 	add.w	r8, r8, #1
 8004a4a:	68e3      	ldr	r3, [r4, #12]
 8004a4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a4e:	1a5b      	subs	r3, r3, r1
 8004a50:	4543      	cmp	r3, r8
 8004a52:	dcf0      	bgt.n	8004a36 <_printf_float+0x442>
 8004a54:	e6fa      	b.n	800484c <_printf_float+0x258>
 8004a56:	f04f 0800 	mov.w	r8, #0
 8004a5a:	f104 0919 	add.w	r9, r4, #25
 8004a5e:	e7f4      	b.n	8004a4a <_printf_float+0x456>

08004a60 <_printf_common>:
 8004a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a64:	4616      	mov	r6, r2
 8004a66:	4699      	mov	r9, r3
 8004a68:	688a      	ldr	r2, [r1, #8]
 8004a6a:	690b      	ldr	r3, [r1, #16]
 8004a6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a70:	4293      	cmp	r3, r2
 8004a72:	bfb8      	it	lt
 8004a74:	4613      	movlt	r3, r2
 8004a76:	6033      	str	r3, [r6, #0]
 8004a78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a7c:	4607      	mov	r7, r0
 8004a7e:	460c      	mov	r4, r1
 8004a80:	b10a      	cbz	r2, 8004a86 <_printf_common+0x26>
 8004a82:	3301      	adds	r3, #1
 8004a84:	6033      	str	r3, [r6, #0]
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	0699      	lsls	r1, r3, #26
 8004a8a:	bf42      	ittt	mi
 8004a8c:	6833      	ldrmi	r3, [r6, #0]
 8004a8e:	3302      	addmi	r3, #2
 8004a90:	6033      	strmi	r3, [r6, #0]
 8004a92:	6825      	ldr	r5, [r4, #0]
 8004a94:	f015 0506 	ands.w	r5, r5, #6
 8004a98:	d106      	bne.n	8004aa8 <_printf_common+0x48>
 8004a9a:	f104 0a19 	add.w	sl, r4, #25
 8004a9e:	68e3      	ldr	r3, [r4, #12]
 8004aa0:	6832      	ldr	r2, [r6, #0]
 8004aa2:	1a9b      	subs	r3, r3, r2
 8004aa4:	42ab      	cmp	r3, r5
 8004aa6:	dc26      	bgt.n	8004af6 <_printf_common+0x96>
 8004aa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004aac:	1e13      	subs	r3, r2, #0
 8004aae:	6822      	ldr	r2, [r4, #0]
 8004ab0:	bf18      	it	ne
 8004ab2:	2301      	movne	r3, #1
 8004ab4:	0692      	lsls	r2, r2, #26
 8004ab6:	d42b      	bmi.n	8004b10 <_printf_common+0xb0>
 8004ab8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004abc:	4649      	mov	r1, r9
 8004abe:	4638      	mov	r0, r7
 8004ac0:	47c0      	blx	r8
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	d01e      	beq.n	8004b04 <_printf_common+0xa4>
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	68e5      	ldr	r5, [r4, #12]
 8004aca:	6832      	ldr	r2, [r6, #0]
 8004acc:	f003 0306 	and.w	r3, r3, #6
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	bf08      	it	eq
 8004ad4:	1aad      	subeq	r5, r5, r2
 8004ad6:	68a3      	ldr	r3, [r4, #8]
 8004ad8:	6922      	ldr	r2, [r4, #16]
 8004ada:	bf0c      	ite	eq
 8004adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ae0:	2500      	movne	r5, #0
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	bfc4      	itt	gt
 8004ae6:	1a9b      	subgt	r3, r3, r2
 8004ae8:	18ed      	addgt	r5, r5, r3
 8004aea:	2600      	movs	r6, #0
 8004aec:	341a      	adds	r4, #26
 8004aee:	42b5      	cmp	r5, r6
 8004af0:	d11a      	bne.n	8004b28 <_printf_common+0xc8>
 8004af2:	2000      	movs	r0, #0
 8004af4:	e008      	b.n	8004b08 <_printf_common+0xa8>
 8004af6:	2301      	movs	r3, #1
 8004af8:	4652      	mov	r2, sl
 8004afa:	4649      	mov	r1, r9
 8004afc:	4638      	mov	r0, r7
 8004afe:	47c0      	blx	r8
 8004b00:	3001      	adds	r0, #1
 8004b02:	d103      	bne.n	8004b0c <_printf_common+0xac>
 8004b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b0c:	3501      	adds	r5, #1
 8004b0e:	e7c6      	b.n	8004a9e <_printf_common+0x3e>
 8004b10:	18e1      	adds	r1, r4, r3
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	2030      	movs	r0, #48	; 0x30
 8004b16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b1a:	4422      	add	r2, r4
 8004b1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b24:	3302      	adds	r3, #2
 8004b26:	e7c7      	b.n	8004ab8 <_printf_common+0x58>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	4622      	mov	r2, r4
 8004b2c:	4649      	mov	r1, r9
 8004b2e:	4638      	mov	r0, r7
 8004b30:	47c0      	blx	r8
 8004b32:	3001      	adds	r0, #1
 8004b34:	d0e6      	beq.n	8004b04 <_printf_common+0xa4>
 8004b36:	3601      	adds	r6, #1
 8004b38:	e7d9      	b.n	8004aee <_printf_common+0x8e>
	...

08004b3c <_printf_i>:
 8004b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b40:	460c      	mov	r4, r1
 8004b42:	4691      	mov	r9, r2
 8004b44:	7e27      	ldrb	r7, [r4, #24]
 8004b46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b48:	2f78      	cmp	r7, #120	; 0x78
 8004b4a:	4680      	mov	r8, r0
 8004b4c:	469a      	mov	sl, r3
 8004b4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b52:	d807      	bhi.n	8004b64 <_printf_i+0x28>
 8004b54:	2f62      	cmp	r7, #98	; 0x62
 8004b56:	d80a      	bhi.n	8004b6e <_printf_i+0x32>
 8004b58:	2f00      	cmp	r7, #0
 8004b5a:	f000 80d8 	beq.w	8004d0e <_printf_i+0x1d2>
 8004b5e:	2f58      	cmp	r7, #88	; 0x58
 8004b60:	f000 80a3 	beq.w	8004caa <_printf_i+0x16e>
 8004b64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b6c:	e03a      	b.n	8004be4 <_printf_i+0xa8>
 8004b6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b72:	2b15      	cmp	r3, #21
 8004b74:	d8f6      	bhi.n	8004b64 <_printf_i+0x28>
 8004b76:	a001      	add	r0, pc, #4	; (adr r0, 8004b7c <_printf_i+0x40>)
 8004b78:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b7c:	08004bd5 	.word	0x08004bd5
 8004b80:	08004be9 	.word	0x08004be9
 8004b84:	08004b65 	.word	0x08004b65
 8004b88:	08004b65 	.word	0x08004b65
 8004b8c:	08004b65 	.word	0x08004b65
 8004b90:	08004b65 	.word	0x08004b65
 8004b94:	08004be9 	.word	0x08004be9
 8004b98:	08004b65 	.word	0x08004b65
 8004b9c:	08004b65 	.word	0x08004b65
 8004ba0:	08004b65 	.word	0x08004b65
 8004ba4:	08004b65 	.word	0x08004b65
 8004ba8:	08004cf5 	.word	0x08004cf5
 8004bac:	08004c19 	.word	0x08004c19
 8004bb0:	08004cd7 	.word	0x08004cd7
 8004bb4:	08004b65 	.word	0x08004b65
 8004bb8:	08004b65 	.word	0x08004b65
 8004bbc:	08004d17 	.word	0x08004d17
 8004bc0:	08004b65 	.word	0x08004b65
 8004bc4:	08004c19 	.word	0x08004c19
 8004bc8:	08004b65 	.word	0x08004b65
 8004bcc:	08004b65 	.word	0x08004b65
 8004bd0:	08004cdf 	.word	0x08004cdf
 8004bd4:	680b      	ldr	r3, [r1, #0]
 8004bd6:	1d1a      	adds	r2, r3, #4
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	600a      	str	r2, [r1, #0]
 8004bdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004be0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0a3      	b.n	8004d30 <_printf_i+0x1f4>
 8004be8:	6825      	ldr	r5, [r4, #0]
 8004bea:	6808      	ldr	r0, [r1, #0]
 8004bec:	062e      	lsls	r6, r5, #24
 8004bee:	f100 0304 	add.w	r3, r0, #4
 8004bf2:	d50a      	bpl.n	8004c0a <_printf_i+0xce>
 8004bf4:	6805      	ldr	r5, [r0, #0]
 8004bf6:	600b      	str	r3, [r1, #0]
 8004bf8:	2d00      	cmp	r5, #0
 8004bfa:	da03      	bge.n	8004c04 <_printf_i+0xc8>
 8004bfc:	232d      	movs	r3, #45	; 0x2d
 8004bfe:	426d      	negs	r5, r5
 8004c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c04:	485e      	ldr	r0, [pc, #376]	; (8004d80 <_printf_i+0x244>)
 8004c06:	230a      	movs	r3, #10
 8004c08:	e019      	b.n	8004c3e <_printf_i+0x102>
 8004c0a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c0e:	6805      	ldr	r5, [r0, #0]
 8004c10:	600b      	str	r3, [r1, #0]
 8004c12:	bf18      	it	ne
 8004c14:	b22d      	sxthne	r5, r5
 8004c16:	e7ef      	b.n	8004bf8 <_printf_i+0xbc>
 8004c18:	680b      	ldr	r3, [r1, #0]
 8004c1a:	6825      	ldr	r5, [r4, #0]
 8004c1c:	1d18      	adds	r0, r3, #4
 8004c1e:	6008      	str	r0, [r1, #0]
 8004c20:	0628      	lsls	r0, r5, #24
 8004c22:	d501      	bpl.n	8004c28 <_printf_i+0xec>
 8004c24:	681d      	ldr	r5, [r3, #0]
 8004c26:	e002      	b.n	8004c2e <_printf_i+0xf2>
 8004c28:	0669      	lsls	r1, r5, #25
 8004c2a:	d5fb      	bpl.n	8004c24 <_printf_i+0xe8>
 8004c2c:	881d      	ldrh	r5, [r3, #0]
 8004c2e:	4854      	ldr	r0, [pc, #336]	; (8004d80 <_printf_i+0x244>)
 8004c30:	2f6f      	cmp	r7, #111	; 0x6f
 8004c32:	bf0c      	ite	eq
 8004c34:	2308      	moveq	r3, #8
 8004c36:	230a      	movne	r3, #10
 8004c38:	2100      	movs	r1, #0
 8004c3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c3e:	6866      	ldr	r6, [r4, #4]
 8004c40:	60a6      	str	r6, [r4, #8]
 8004c42:	2e00      	cmp	r6, #0
 8004c44:	bfa2      	ittt	ge
 8004c46:	6821      	ldrge	r1, [r4, #0]
 8004c48:	f021 0104 	bicge.w	r1, r1, #4
 8004c4c:	6021      	strge	r1, [r4, #0]
 8004c4e:	b90d      	cbnz	r5, 8004c54 <_printf_i+0x118>
 8004c50:	2e00      	cmp	r6, #0
 8004c52:	d04d      	beq.n	8004cf0 <_printf_i+0x1b4>
 8004c54:	4616      	mov	r6, r2
 8004c56:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c5a:	fb03 5711 	mls	r7, r3, r1, r5
 8004c5e:	5dc7      	ldrb	r7, [r0, r7]
 8004c60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c64:	462f      	mov	r7, r5
 8004c66:	42bb      	cmp	r3, r7
 8004c68:	460d      	mov	r5, r1
 8004c6a:	d9f4      	bls.n	8004c56 <_printf_i+0x11a>
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d10b      	bne.n	8004c88 <_printf_i+0x14c>
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	07df      	lsls	r7, r3, #31
 8004c74:	d508      	bpl.n	8004c88 <_printf_i+0x14c>
 8004c76:	6923      	ldr	r3, [r4, #16]
 8004c78:	6861      	ldr	r1, [r4, #4]
 8004c7a:	4299      	cmp	r1, r3
 8004c7c:	bfde      	ittt	le
 8004c7e:	2330      	movle	r3, #48	; 0x30
 8004c80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c84:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004c88:	1b92      	subs	r2, r2, r6
 8004c8a:	6122      	str	r2, [r4, #16]
 8004c8c:	f8cd a000 	str.w	sl, [sp]
 8004c90:	464b      	mov	r3, r9
 8004c92:	aa03      	add	r2, sp, #12
 8004c94:	4621      	mov	r1, r4
 8004c96:	4640      	mov	r0, r8
 8004c98:	f7ff fee2 	bl	8004a60 <_printf_common>
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d14c      	bne.n	8004d3a <_printf_i+0x1fe>
 8004ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ca4:	b004      	add	sp, #16
 8004ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004caa:	4835      	ldr	r0, [pc, #212]	; (8004d80 <_printf_i+0x244>)
 8004cac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	680e      	ldr	r6, [r1, #0]
 8004cb4:	061f      	lsls	r7, r3, #24
 8004cb6:	f856 5b04 	ldr.w	r5, [r6], #4
 8004cba:	600e      	str	r6, [r1, #0]
 8004cbc:	d514      	bpl.n	8004ce8 <_printf_i+0x1ac>
 8004cbe:	07d9      	lsls	r1, r3, #31
 8004cc0:	bf44      	itt	mi
 8004cc2:	f043 0320 	orrmi.w	r3, r3, #32
 8004cc6:	6023      	strmi	r3, [r4, #0]
 8004cc8:	b91d      	cbnz	r5, 8004cd2 <_printf_i+0x196>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	f023 0320 	bic.w	r3, r3, #32
 8004cd0:	6023      	str	r3, [r4, #0]
 8004cd2:	2310      	movs	r3, #16
 8004cd4:	e7b0      	b.n	8004c38 <_printf_i+0xfc>
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	f043 0320 	orr.w	r3, r3, #32
 8004cdc:	6023      	str	r3, [r4, #0]
 8004cde:	2378      	movs	r3, #120	; 0x78
 8004ce0:	4828      	ldr	r0, [pc, #160]	; (8004d84 <_printf_i+0x248>)
 8004ce2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ce6:	e7e3      	b.n	8004cb0 <_printf_i+0x174>
 8004ce8:	065e      	lsls	r6, r3, #25
 8004cea:	bf48      	it	mi
 8004cec:	b2ad      	uxthmi	r5, r5
 8004cee:	e7e6      	b.n	8004cbe <_printf_i+0x182>
 8004cf0:	4616      	mov	r6, r2
 8004cf2:	e7bb      	b.n	8004c6c <_printf_i+0x130>
 8004cf4:	680b      	ldr	r3, [r1, #0]
 8004cf6:	6826      	ldr	r6, [r4, #0]
 8004cf8:	6960      	ldr	r0, [r4, #20]
 8004cfa:	1d1d      	adds	r5, r3, #4
 8004cfc:	600d      	str	r5, [r1, #0]
 8004cfe:	0635      	lsls	r5, r6, #24
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	d501      	bpl.n	8004d08 <_printf_i+0x1cc>
 8004d04:	6018      	str	r0, [r3, #0]
 8004d06:	e002      	b.n	8004d0e <_printf_i+0x1d2>
 8004d08:	0671      	lsls	r1, r6, #25
 8004d0a:	d5fb      	bpl.n	8004d04 <_printf_i+0x1c8>
 8004d0c:	8018      	strh	r0, [r3, #0]
 8004d0e:	2300      	movs	r3, #0
 8004d10:	6123      	str	r3, [r4, #16]
 8004d12:	4616      	mov	r6, r2
 8004d14:	e7ba      	b.n	8004c8c <_printf_i+0x150>
 8004d16:	680b      	ldr	r3, [r1, #0]
 8004d18:	1d1a      	adds	r2, r3, #4
 8004d1a:	600a      	str	r2, [r1, #0]
 8004d1c:	681e      	ldr	r6, [r3, #0]
 8004d1e:	6862      	ldr	r2, [r4, #4]
 8004d20:	2100      	movs	r1, #0
 8004d22:	4630      	mov	r0, r6
 8004d24:	f7fb fa5c 	bl	80001e0 <memchr>
 8004d28:	b108      	cbz	r0, 8004d2e <_printf_i+0x1f2>
 8004d2a:	1b80      	subs	r0, r0, r6
 8004d2c:	6060      	str	r0, [r4, #4]
 8004d2e:	6863      	ldr	r3, [r4, #4]
 8004d30:	6123      	str	r3, [r4, #16]
 8004d32:	2300      	movs	r3, #0
 8004d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d38:	e7a8      	b.n	8004c8c <_printf_i+0x150>
 8004d3a:	6923      	ldr	r3, [r4, #16]
 8004d3c:	4632      	mov	r2, r6
 8004d3e:	4649      	mov	r1, r9
 8004d40:	4640      	mov	r0, r8
 8004d42:	47d0      	blx	sl
 8004d44:	3001      	adds	r0, #1
 8004d46:	d0ab      	beq.n	8004ca0 <_printf_i+0x164>
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	079b      	lsls	r3, r3, #30
 8004d4c:	d413      	bmi.n	8004d76 <_printf_i+0x23a>
 8004d4e:	68e0      	ldr	r0, [r4, #12]
 8004d50:	9b03      	ldr	r3, [sp, #12]
 8004d52:	4298      	cmp	r0, r3
 8004d54:	bfb8      	it	lt
 8004d56:	4618      	movlt	r0, r3
 8004d58:	e7a4      	b.n	8004ca4 <_printf_i+0x168>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	4632      	mov	r2, r6
 8004d5e:	4649      	mov	r1, r9
 8004d60:	4640      	mov	r0, r8
 8004d62:	47d0      	blx	sl
 8004d64:	3001      	adds	r0, #1
 8004d66:	d09b      	beq.n	8004ca0 <_printf_i+0x164>
 8004d68:	3501      	adds	r5, #1
 8004d6a:	68e3      	ldr	r3, [r4, #12]
 8004d6c:	9903      	ldr	r1, [sp, #12]
 8004d6e:	1a5b      	subs	r3, r3, r1
 8004d70:	42ab      	cmp	r3, r5
 8004d72:	dcf2      	bgt.n	8004d5a <_printf_i+0x21e>
 8004d74:	e7eb      	b.n	8004d4e <_printf_i+0x212>
 8004d76:	2500      	movs	r5, #0
 8004d78:	f104 0619 	add.w	r6, r4, #25
 8004d7c:	e7f5      	b.n	8004d6a <_printf_i+0x22e>
 8004d7e:	bf00      	nop
 8004d80:	08007396 	.word	0x08007396
 8004d84:	080073a7 	.word	0x080073a7

08004d88 <quorem>:
 8004d88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8c:	6903      	ldr	r3, [r0, #16]
 8004d8e:	690c      	ldr	r4, [r1, #16]
 8004d90:	42a3      	cmp	r3, r4
 8004d92:	4607      	mov	r7, r0
 8004d94:	f2c0 8081 	blt.w	8004e9a <quorem+0x112>
 8004d98:	3c01      	subs	r4, #1
 8004d9a:	f101 0814 	add.w	r8, r1, #20
 8004d9e:	f100 0514 	add.w	r5, r0, #20
 8004da2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004da6:	9301      	str	r3, [sp, #4]
 8004da8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004dac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004db0:	3301      	adds	r3, #1
 8004db2:	429a      	cmp	r2, r3
 8004db4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004db8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004dbc:	fbb2 f6f3 	udiv	r6, r2, r3
 8004dc0:	d331      	bcc.n	8004e26 <quorem+0x9e>
 8004dc2:	f04f 0e00 	mov.w	lr, #0
 8004dc6:	4640      	mov	r0, r8
 8004dc8:	46ac      	mov	ip, r5
 8004dca:	46f2      	mov	sl, lr
 8004dcc:	f850 2b04 	ldr.w	r2, [r0], #4
 8004dd0:	b293      	uxth	r3, r2
 8004dd2:	fb06 e303 	mla	r3, r6, r3, lr
 8004dd6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	ebaa 0303 	sub.w	r3, sl, r3
 8004de0:	0c12      	lsrs	r2, r2, #16
 8004de2:	f8dc a000 	ldr.w	sl, [ip]
 8004de6:	fb06 e202 	mla	r2, r6, r2, lr
 8004dea:	fa13 f38a 	uxtah	r3, r3, sl
 8004dee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004df2:	fa1f fa82 	uxth.w	sl, r2
 8004df6:	f8dc 2000 	ldr.w	r2, [ip]
 8004dfa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004dfe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e08:	4581      	cmp	r9, r0
 8004e0a:	f84c 3b04 	str.w	r3, [ip], #4
 8004e0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004e12:	d2db      	bcs.n	8004dcc <quorem+0x44>
 8004e14:	f855 300b 	ldr.w	r3, [r5, fp]
 8004e18:	b92b      	cbnz	r3, 8004e26 <quorem+0x9e>
 8004e1a:	9b01      	ldr	r3, [sp, #4]
 8004e1c:	3b04      	subs	r3, #4
 8004e1e:	429d      	cmp	r5, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	d32e      	bcc.n	8004e82 <quorem+0xfa>
 8004e24:	613c      	str	r4, [r7, #16]
 8004e26:	4638      	mov	r0, r7
 8004e28:	f001 f8b0 	bl	8005f8c <__mcmp>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	db24      	blt.n	8004e7a <quorem+0xf2>
 8004e30:	3601      	adds	r6, #1
 8004e32:	4628      	mov	r0, r5
 8004e34:	f04f 0c00 	mov.w	ip, #0
 8004e38:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e3c:	f8d0 e000 	ldr.w	lr, [r0]
 8004e40:	b293      	uxth	r3, r2
 8004e42:	ebac 0303 	sub.w	r3, ip, r3
 8004e46:	0c12      	lsrs	r2, r2, #16
 8004e48:	fa13 f38e 	uxtah	r3, r3, lr
 8004e4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004e50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e5a:	45c1      	cmp	r9, r8
 8004e5c:	f840 3b04 	str.w	r3, [r0], #4
 8004e60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004e64:	d2e8      	bcs.n	8004e38 <quorem+0xb0>
 8004e66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e6e:	b922      	cbnz	r2, 8004e7a <quorem+0xf2>
 8004e70:	3b04      	subs	r3, #4
 8004e72:	429d      	cmp	r5, r3
 8004e74:	461a      	mov	r2, r3
 8004e76:	d30a      	bcc.n	8004e8e <quorem+0x106>
 8004e78:	613c      	str	r4, [r7, #16]
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	b003      	add	sp, #12
 8004e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	3b04      	subs	r3, #4
 8004e86:	2a00      	cmp	r2, #0
 8004e88:	d1cc      	bne.n	8004e24 <quorem+0x9c>
 8004e8a:	3c01      	subs	r4, #1
 8004e8c:	e7c7      	b.n	8004e1e <quorem+0x96>
 8004e8e:	6812      	ldr	r2, [r2, #0]
 8004e90:	3b04      	subs	r3, #4
 8004e92:	2a00      	cmp	r2, #0
 8004e94:	d1f0      	bne.n	8004e78 <quorem+0xf0>
 8004e96:	3c01      	subs	r4, #1
 8004e98:	e7eb      	b.n	8004e72 <quorem+0xea>
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	e7ee      	b.n	8004e7c <quorem+0xf4>
	...

08004ea0 <_dtoa_r>:
 8004ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea4:	ed2d 8b02 	vpush	{d8}
 8004ea8:	ec57 6b10 	vmov	r6, r7, d0
 8004eac:	b095      	sub	sp, #84	; 0x54
 8004eae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004eb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004eb4:	9105      	str	r1, [sp, #20]
 8004eb6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004eba:	4604      	mov	r4, r0
 8004ebc:	9209      	str	r2, [sp, #36]	; 0x24
 8004ebe:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ec0:	b975      	cbnz	r5, 8004ee0 <_dtoa_r+0x40>
 8004ec2:	2010      	movs	r0, #16
 8004ec4:	f000 fddc 	bl	8005a80 <malloc>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	6260      	str	r0, [r4, #36]	; 0x24
 8004ecc:	b920      	cbnz	r0, 8004ed8 <_dtoa_r+0x38>
 8004ece:	4bb2      	ldr	r3, [pc, #712]	; (8005198 <_dtoa_r+0x2f8>)
 8004ed0:	21ea      	movs	r1, #234	; 0xea
 8004ed2:	48b2      	ldr	r0, [pc, #712]	; (800519c <_dtoa_r+0x2fc>)
 8004ed4:	f001 fa24 	bl	8006320 <__assert_func>
 8004ed8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004edc:	6005      	str	r5, [r0, #0]
 8004ede:	60c5      	str	r5, [r0, #12]
 8004ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ee2:	6819      	ldr	r1, [r3, #0]
 8004ee4:	b151      	cbz	r1, 8004efc <_dtoa_r+0x5c>
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	604a      	str	r2, [r1, #4]
 8004eea:	2301      	movs	r3, #1
 8004eec:	4093      	lsls	r3, r2
 8004eee:	608b      	str	r3, [r1, #8]
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	f000 fe0d 	bl	8005b10 <_Bfree>
 8004ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	1e3b      	subs	r3, r7, #0
 8004efe:	bfb9      	ittee	lt
 8004f00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f04:	9303      	strlt	r3, [sp, #12]
 8004f06:	2300      	movge	r3, #0
 8004f08:	f8c8 3000 	strge.w	r3, [r8]
 8004f0c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004f10:	4ba3      	ldr	r3, [pc, #652]	; (80051a0 <_dtoa_r+0x300>)
 8004f12:	bfbc      	itt	lt
 8004f14:	2201      	movlt	r2, #1
 8004f16:	f8c8 2000 	strlt.w	r2, [r8]
 8004f1a:	ea33 0309 	bics.w	r3, r3, r9
 8004f1e:	d11b      	bne.n	8004f58 <_dtoa_r+0xb8>
 8004f20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f22:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f2c:	4333      	orrs	r3, r6
 8004f2e:	f000 857a 	beq.w	8005a26 <_dtoa_r+0xb86>
 8004f32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f34:	b963      	cbnz	r3, 8004f50 <_dtoa_r+0xb0>
 8004f36:	4b9b      	ldr	r3, [pc, #620]	; (80051a4 <_dtoa_r+0x304>)
 8004f38:	e024      	b.n	8004f84 <_dtoa_r+0xe4>
 8004f3a:	4b9b      	ldr	r3, [pc, #620]	; (80051a8 <_dtoa_r+0x308>)
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	3308      	adds	r3, #8
 8004f40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	9800      	ldr	r0, [sp, #0]
 8004f46:	b015      	add	sp, #84	; 0x54
 8004f48:	ecbd 8b02 	vpop	{d8}
 8004f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f50:	4b94      	ldr	r3, [pc, #592]	; (80051a4 <_dtoa_r+0x304>)
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	3303      	adds	r3, #3
 8004f56:	e7f3      	b.n	8004f40 <_dtoa_r+0xa0>
 8004f58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	ec51 0b17 	vmov	r0, r1, d7
 8004f62:	2300      	movs	r3, #0
 8004f64:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004f68:	f7fb fdae 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f6c:	4680      	mov	r8, r0
 8004f6e:	b158      	cbz	r0, 8004f88 <_dtoa_r+0xe8>
 8004f70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f72:	2301      	movs	r3, #1
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8551 	beq.w	8005a20 <_dtoa_r+0xb80>
 8004f7e:	488b      	ldr	r0, [pc, #556]	; (80051ac <_dtoa_r+0x30c>)
 8004f80:	6018      	str	r0, [r3, #0]
 8004f82:	1e43      	subs	r3, r0, #1
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	e7dd      	b.n	8004f44 <_dtoa_r+0xa4>
 8004f88:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004f8c:	aa12      	add	r2, sp, #72	; 0x48
 8004f8e:	a913      	add	r1, sp, #76	; 0x4c
 8004f90:	4620      	mov	r0, r4
 8004f92:	f001 f89f 	bl	80060d4 <__d2b>
 8004f96:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004f9a:	4683      	mov	fp, r0
 8004f9c:	2d00      	cmp	r5, #0
 8004f9e:	d07c      	beq.n	800509a <_dtoa_r+0x1fa>
 8004fa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fa2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004fa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004faa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004fae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004fb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004fb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004fba:	4b7d      	ldr	r3, [pc, #500]	; (80051b0 <_dtoa_r+0x310>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	4630      	mov	r0, r6
 8004fc0:	4639      	mov	r1, r7
 8004fc2:	f7fb f961 	bl	8000288 <__aeabi_dsub>
 8004fc6:	a36e      	add	r3, pc, #440	; (adr r3, 8005180 <_dtoa_r+0x2e0>)
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f7fb fb14 	bl	80005f8 <__aeabi_dmul>
 8004fd0:	a36d      	add	r3, pc, #436	; (adr r3, 8005188 <_dtoa_r+0x2e8>)
 8004fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd6:	f7fb f959 	bl	800028c <__adddf3>
 8004fda:	4606      	mov	r6, r0
 8004fdc:	4628      	mov	r0, r5
 8004fde:	460f      	mov	r7, r1
 8004fe0:	f7fb faa0 	bl	8000524 <__aeabi_i2d>
 8004fe4:	a36a      	add	r3, pc, #424	; (adr r3, 8005190 <_dtoa_r+0x2f0>)
 8004fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fea:	f7fb fb05 	bl	80005f8 <__aeabi_dmul>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	4639      	mov	r1, r7
 8004ff6:	f7fb f949 	bl	800028c <__adddf3>
 8004ffa:	4606      	mov	r6, r0
 8004ffc:	460f      	mov	r7, r1
 8004ffe:	f7fb fdab 	bl	8000b58 <__aeabi_d2iz>
 8005002:	2200      	movs	r2, #0
 8005004:	4682      	mov	sl, r0
 8005006:	2300      	movs	r3, #0
 8005008:	4630      	mov	r0, r6
 800500a:	4639      	mov	r1, r7
 800500c:	f7fb fd66 	bl	8000adc <__aeabi_dcmplt>
 8005010:	b148      	cbz	r0, 8005026 <_dtoa_r+0x186>
 8005012:	4650      	mov	r0, sl
 8005014:	f7fb fa86 	bl	8000524 <__aeabi_i2d>
 8005018:	4632      	mov	r2, r6
 800501a:	463b      	mov	r3, r7
 800501c:	f7fb fd54 	bl	8000ac8 <__aeabi_dcmpeq>
 8005020:	b908      	cbnz	r0, 8005026 <_dtoa_r+0x186>
 8005022:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005026:	f1ba 0f16 	cmp.w	sl, #22
 800502a:	d854      	bhi.n	80050d6 <_dtoa_r+0x236>
 800502c:	4b61      	ldr	r3, [pc, #388]	; (80051b4 <_dtoa_r+0x314>)
 800502e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005036:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800503a:	f7fb fd4f 	bl	8000adc <__aeabi_dcmplt>
 800503e:	2800      	cmp	r0, #0
 8005040:	d04b      	beq.n	80050da <_dtoa_r+0x23a>
 8005042:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005046:	2300      	movs	r3, #0
 8005048:	930e      	str	r3, [sp, #56]	; 0x38
 800504a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800504c:	1b5d      	subs	r5, r3, r5
 800504e:	1e6b      	subs	r3, r5, #1
 8005050:	9304      	str	r3, [sp, #16]
 8005052:	bf43      	ittte	mi
 8005054:	2300      	movmi	r3, #0
 8005056:	f1c5 0801 	rsbmi	r8, r5, #1
 800505a:	9304      	strmi	r3, [sp, #16]
 800505c:	f04f 0800 	movpl.w	r8, #0
 8005060:	f1ba 0f00 	cmp.w	sl, #0
 8005064:	db3b      	blt.n	80050de <_dtoa_r+0x23e>
 8005066:	9b04      	ldr	r3, [sp, #16]
 8005068:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800506c:	4453      	add	r3, sl
 800506e:	9304      	str	r3, [sp, #16]
 8005070:	2300      	movs	r3, #0
 8005072:	9306      	str	r3, [sp, #24]
 8005074:	9b05      	ldr	r3, [sp, #20]
 8005076:	2b09      	cmp	r3, #9
 8005078:	d869      	bhi.n	800514e <_dtoa_r+0x2ae>
 800507a:	2b05      	cmp	r3, #5
 800507c:	bfc4      	itt	gt
 800507e:	3b04      	subgt	r3, #4
 8005080:	9305      	strgt	r3, [sp, #20]
 8005082:	9b05      	ldr	r3, [sp, #20]
 8005084:	f1a3 0302 	sub.w	r3, r3, #2
 8005088:	bfcc      	ite	gt
 800508a:	2500      	movgt	r5, #0
 800508c:	2501      	movle	r5, #1
 800508e:	2b03      	cmp	r3, #3
 8005090:	d869      	bhi.n	8005166 <_dtoa_r+0x2c6>
 8005092:	e8df f003 	tbb	[pc, r3]
 8005096:	4e2c      	.short	0x4e2c
 8005098:	5a4c      	.short	0x5a4c
 800509a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800509e:	441d      	add	r5, r3
 80050a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80050a4:	2b20      	cmp	r3, #32
 80050a6:	bfc1      	itttt	gt
 80050a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80050ac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80050b0:	fa09 f303 	lslgt.w	r3, r9, r3
 80050b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80050b8:	bfda      	itte	le
 80050ba:	f1c3 0320 	rsble	r3, r3, #32
 80050be:	fa06 f003 	lslle.w	r0, r6, r3
 80050c2:	4318      	orrgt	r0, r3
 80050c4:	f7fb fa1e 	bl	8000504 <__aeabi_ui2d>
 80050c8:	2301      	movs	r3, #1
 80050ca:	4606      	mov	r6, r0
 80050cc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80050d0:	3d01      	subs	r5, #1
 80050d2:	9310      	str	r3, [sp, #64]	; 0x40
 80050d4:	e771      	b.n	8004fba <_dtoa_r+0x11a>
 80050d6:	2301      	movs	r3, #1
 80050d8:	e7b6      	b.n	8005048 <_dtoa_r+0x1a8>
 80050da:	900e      	str	r0, [sp, #56]	; 0x38
 80050dc:	e7b5      	b.n	800504a <_dtoa_r+0x1aa>
 80050de:	f1ca 0300 	rsb	r3, sl, #0
 80050e2:	9306      	str	r3, [sp, #24]
 80050e4:	2300      	movs	r3, #0
 80050e6:	eba8 080a 	sub.w	r8, r8, sl
 80050ea:	930d      	str	r3, [sp, #52]	; 0x34
 80050ec:	e7c2      	b.n	8005074 <_dtoa_r+0x1d4>
 80050ee:	2300      	movs	r3, #0
 80050f0:	9308      	str	r3, [sp, #32]
 80050f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	dc39      	bgt.n	800516c <_dtoa_r+0x2cc>
 80050f8:	f04f 0901 	mov.w	r9, #1
 80050fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005100:	464b      	mov	r3, r9
 8005102:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005106:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005108:	2200      	movs	r2, #0
 800510a:	6042      	str	r2, [r0, #4]
 800510c:	2204      	movs	r2, #4
 800510e:	f102 0614 	add.w	r6, r2, #20
 8005112:	429e      	cmp	r6, r3
 8005114:	6841      	ldr	r1, [r0, #4]
 8005116:	d92f      	bls.n	8005178 <_dtoa_r+0x2d8>
 8005118:	4620      	mov	r0, r4
 800511a:	f000 fcb9 	bl	8005a90 <_Balloc>
 800511e:	9000      	str	r0, [sp, #0]
 8005120:	2800      	cmp	r0, #0
 8005122:	d14b      	bne.n	80051bc <_dtoa_r+0x31c>
 8005124:	4b24      	ldr	r3, [pc, #144]	; (80051b8 <_dtoa_r+0x318>)
 8005126:	4602      	mov	r2, r0
 8005128:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800512c:	e6d1      	b.n	8004ed2 <_dtoa_r+0x32>
 800512e:	2301      	movs	r3, #1
 8005130:	e7de      	b.n	80050f0 <_dtoa_r+0x250>
 8005132:	2300      	movs	r3, #0
 8005134:	9308      	str	r3, [sp, #32]
 8005136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005138:	eb0a 0903 	add.w	r9, sl, r3
 800513c:	f109 0301 	add.w	r3, r9, #1
 8005140:	2b01      	cmp	r3, #1
 8005142:	9301      	str	r3, [sp, #4]
 8005144:	bfb8      	it	lt
 8005146:	2301      	movlt	r3, #1
 8005148:	e7dd      	b.n	8005106 <_dtoa_r+0x266>
 800514a:	2301      	movs	r3, #1
 800514c:	e7f2      	b.n	8005134 <_dtoa_r+0x294>
 800514e:	2501      	movs	r5, #1
 8005150:	2300      	movs	r3, #0
 8005152:	9305      	str	r3, [sp, #20]
 8005154:	9508      	str	r5, [sp, #32]
 8005156:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800515a:	2200      	movs	r2, #0
 800515c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005160:	2312      	movs	r3, #18
 8005162:	9209      	str	r2, [sp, #36]	; 0x24
 8005164:	e7cf      	b.n	8005106 <_dtoa_r+0x266>
 8005166:	2301      	movs	r3, #1
 8005168:	9308      	str	r3, [sp, #32]
 800516a:	e7f4      	b.n	8005156 <_dtoa_r+0x2b6>
 800516c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005170:	f8cd 9004 	str.w	r9, [sp, #4]
 8005174:	464b      	mov	r3, r9
 8005176:	e7c6      	b.n	8005106 <_dtoa_r+0x266>
 8005178:	3101      	adds	r1, #1
 800517a:	6041      	str	r1, [r0, #4]
 800517c:	0052      	lsls	r2, r2, #1
 800517e:	e7c6      	b.n	800510e <_dtoa_r+0x26e>
 8005180:	636f4361 	.word	0x636f4361
 8005184:	3fd287a7 	.word	0x3fd287a7
 8005188:	8b60c8b3 	.word	0x8b60c8b3
 800518c:	3fc68a28 	.word	0x3fc68a28
 8005190:	509f79fb 	.word	0x509f79fb
 8005194:	3fd34413 	.word	0x3fd34413
 8005198:	080073c5 	.word	0x080073c5
 800519c:	080073dc 	.word	0x080073dc
 80051a0:	7ff00000 	.word	0x7ff00000
 80051a4:	080073c1 	.word	0x080073c1
 80051a8:	080073b8 	.word	0x080073b8
 80051ac:	08007395 	.word	0x08007395
 80051b0:	3ff80000 	.word	0x3ff80000
 80051b4:	080074d8 	.word	0x080074d8
 80051b8:	0800743b 	.word	0x0800743b
 80051bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051be:	9a00      	ldr	r2, [sp, #0]
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	9b01      	ldr	r3, [sp, #4]
 80051c4:	2b0e      	cmp	r3, #14
 80051c6:	f200 80ad 	bhi.w	8005324 <_dtoa_r+0x484>
 80051ca:	2d00      	cmp	r5, #0
 80051cc:	f000 80aa 	beq.w	8005324 <_dtoa_r+0x484>
 80051d0:	f1ba 0f00 	cmp.w	sl, #0
 80051d4:	dd36      	ble.n	8005244 <_dtoa_r+0x3a4>
 80051d6:	4ac3      	ldr	r2, [pc, #780]	; (80054e4 <_dtoa_r+0x644>)
 80051d8:	f00a 030f 	and.w	r3, sl, #15
 80051dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80051e0:	ed93 7b00 	vldr	d7, [r3]
 80051e4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80051e8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80051ec:	eeb0 8a47 	vmov.f32	s16, s14
 80051f0:	eef0 8a67 	vmov.f32	s17, s15
 80051f4:	d016      	beq.n	8005224 <_dtoa_r+0x384>
 80051f6:	4bbc      	ldr	r3, [pc, #752]	; (80054e8 <_dtoa_r+0x648>)
 80051f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80051fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005200:	f7fb fb24 	bl	800084c <__aeabi_ddiv>
 8005204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005208:	f007 070f 	and.w	r7, r7, #15
 800520c:	2503      	movs	r5, #3
 800520e:	4eb6      	ldr	r6, [pc, #728]	; (80054e8 <_dtoa_r+0x648>)
 8005210:	b957      	cbnz	r7, 8005228 <_dtoa_r+0x388>
 8005212:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005216:	ec53 2b18 	vmov	r2, r3, d8
 800521a:	f7fb fb17 	bl	800084c <__aeabi_ddiv>
 800521e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005222:	e029      	b.n	8005278 <_dtoa_r+0x3d8>
 8005224:	2502      	movs	r5, #2
 8005226:	e7f2      	b.n	800520e <_dtoa_r+0x36e>
 8005228:	07f9      	lsls	r1, r7, #31
 800522a:	d508      	bpl.n	800523e <_dtoa_r+0x39e>
 800522c:	ec51 0b18 	vmov	r0, r1, d8
 8005230:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005234:	f7fb f9e0 	bl	80005f8 <__aeabi_dmul>
 8005238:	ec41 0b18 	vmov	d8, r0, r1
 800523c:	3501      	adds	r5, #1
 800523e:	107f      	asrs	r7, r7, #1
 8005240:	3608      	adds	r6, #8
 8005242:	e7e5      	b.n	8005210 <_dtoa_r+0x370>
 8005244:	f000 80a6 	beq.w	8005394 <_dtoa_r+0x4f4>
 8005248:	f1ca 0600 	rsb	r6, sl, #0
 800524c:	4ba5      	ldr	r3, [pc, #660]	; (80054e4 <_dtoa_r+0x644>)
 800524e:	4fa6      	ldr	r7, [pc, #664]	; (80054e8 <_dtoa_r+0x648>)
 8005250:	f006 020f 	and.w	r2, r6, #15
 8005254:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005260:	f7fb f9ca 	bl	80005f8 <__aeabi_dmul>
 8005264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005268:	1136      	asrs	r6, r6, #4
 800526a:	2300      	movs	r3, #0
 800526c:	2502      	movs	r5, #2
 800526e:	2e00      	cmp	r6, #0
 8005270:	f040 8085 	bne.w	800537e <_dtoa_r+0x4de>
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1d2      	bne.n	800521e <_dtoa_r+0x37e>
 8005278:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 808c 	beq.w	8005398 <_dtoa_r+0x4f8>
 8005280:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005284:	4b99      	ldr	r3, [pc, #612]	; (80054ec <_dtoa_r+0x64c>)
 8005286:	2200      	movs	r2, #0
 8005288:	4630      	mov	r0, r6
 800528a:	4639      	mov	r1, r7
 800528c:	f7fb fc26 	bl	8000adc <__aeabi_dcmplt>
 8005290:	2800      	cmp	r0, #0
 8005292:	f000 8081 	beq.w	8005398 <_dtoa_r+0x4f8>
 8005296:	9b01      	ldr	r3, [sp, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d07d      	beq.n	8005398 <_dtoa_r+0x4f8>
 800529c:	f1b9 0f00 	cmp.w	r9, #0
 80052a0:	dd3c      	ble.n	800531c <_dtoa_r+0x47c>
 80052a2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80052a6:	9307      	str	r3, [sp, #28]
 80052a8:	2200      	movs	r2, #0
 80052aa:	4b91      	ldr	r3, [pc, #580]	; (80054f0 <_dtoa_r+0x650>)
 80052ac:	4630      	mov	r0, r6
 80052ae:	4639      	mov	r1, r7
 80052b0:	f7fb f9a2 	bl	80005f8 <__aeabi_dmul>
 80052b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052b8:	3501      	adds	r5, #1
 80052ba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80052be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80052c2:	4628      	mov	r0, r5
 80052c4:	f7fb f92e 	bl	8000524 <__aeabi_i2d>
 80052c8:	4632      	mov	r2, r6
 80052ca:	463b      	mov	r3, r7
 80052cc:	f7fb f994 	bl	80005f8 <__aeabi_dmul>
 80052d0:	4b88      	ldr	r3, [pc, #544]	; (80054f4 <_dtoa_r+0x654>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	f7fa ffda 	bl	800028c <__adddf3>
 80052d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80052dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052e0:	9303      	str	r3, [sp, #12]
 80052e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d15c      	bne.n	80053a2 <_dtoa_r+0x502>
 80052e8:	4b83      	ldr	r3, [pc, #524]	; (80054f8 <_dtoa_r+0x658>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	4630      	mov	r0, r6
 80052ee:	4639      	mov	r1, r7
 80052f0:	f7fa ffca 	bl	8000288 <__aeabi_dsub>
 80052f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052f8:	4606      	mov	r6, r0
 80052fa:	460f      	mov	r7, r1
 80052fc:	f7fb fc0c 	bl	8000b18 <__aeabi_dcmpgt>
 8005300:	2800      	cmp	r0, #0
 8005302:	f040 8296 	bne.w	8005832 <_dtoa_r+0x992>
 8005306:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800530a:	4630      	mov	r0, r6
 800530c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005310:	4639      	mov	r1, r7
 8005312:	f7fb fbe3 	bl	8000adc <__aeabi_dcmplt>
 8005316:	2800      	cmp	r0, #0
 8005318:	f040 8288 	bne.w	800582c <_dtoa_r+0x98c>
 800531c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005320:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005324:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005326:	2b00      	cmp	r3, #0
 8005328:	f2c0 8158 	blt.w	80055dc <_dtoa_r+0x73c>
 800532c:	f1ba 0f0e 	cmp.w	sl, #14
 8005330:	f300 8154 	bgt.w	80055dc <_dtoa_r+0x73c>
 8005334:	4b6b      	ldr	r3, [pc, #428]	; (80054e4 <_dtoa_r+0x644>)
 8005336:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800533a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800533e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005340:	2b00      	cmp	r3, #0
 8005342:	f280 80e3 	bge.w	800550c <_dtoa_r+0x66c>
 8005346:	9b01      	ldr	r3, [sp, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	f300 80df 	bgt.w	800550c <_dtoa_r+0x66c>
 800534e:	f040 826d 	bne.w	800582c <_dtoa_r+0x98c>
 8005352:	4b69      	ldr	r3, [pc, #420]	; (80054f8 <_dtoa_r+0x658>)
 8005354:	2200      	movs	r2, #0
 8005356:	4640      	mov	r0, r8
 8005358:	4649      	mov	r1, r9
 800535a:	f7fb f94d 	bl	80005f8 <__aeabi_dmul>
 800535e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005362:	f7fb fbcf 	bl	8000b04 <__aeabi_dcmpge>
 8005366:	9e01      	ldr	r6, [sp, #4]
 8005368:	4637      	mov	r7, r6
 800536a:	2800      	cmp	r0, #0
 800536c:	f040 8243 	bne.w	80057f6 <_dtoa_r+0x956>
 8005370:	9d00      	ldr	r5, [sp, #0]
 8005372:	2331      	movs	r3, #49	; 0x31
 8005374:	f805 3b01 	strb.w	r3, [r5], #1
 8005378:	f10a 0a01 	add.w	sl, sl, #1
 800537c:	e23f      	b.n	80057fe <_dtoa_r+0x95e>
 800537e:	07f2      	lsls	r2, r6, #31
 8005380:	d505      	bpl.n	800538e <_dtoa_r+0x4ee>
 8005382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005386:	f7fb f937 	bl	80005f8 <__aeabi_dmul>
 800538a:	3501      	adds	r5, #1
 800538c:	2301      	movs	r3, #1
 800538e:	1076      	asrs	r6, r6, #1
 8005390:	3708      	adds	r7, #8
 8005392:	e76c      	b.n	800526e <_dtoa_r+0x3ce>
 8005394:	2502      	movs	r5, #2
 8005396:	e76f      	b.n	8005278 <_dtoa_r+0x3d8>
 8005398:	9b01      	ldr	r3, [sp, #4]
 800539a:	f8cd a01c 	str.w	sl, [sp, #28]
 800539e:	930c      	str	r3, [sp, #48]	; 0x30
 80053a0:	e78d      	b.n	80052be <_dtoa_r+0x41e>
 80053a2:	9900      	ldr	r1, [sp, #0]
 80053a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80053a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053a8:	4b4e      	ldr	r3, [pc, #312]	; (80054e4 <_dtoa_r+0x644>)
 80053aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80053ae:	4401      	add	r1, r0
 80053b0:	9102      	str	r1, [sp, #8]
 80053b2:	9908      	ldr	r1, [sp, #32]
 80053b4:	eeb0 8a47 	vmov.f32	s16, s14
 80053b8:	eef0 8a67 	vmov.f32	s17, s15
 80053bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80053c4:	2900      	cmp	r1, #0
 80053c6:	d045      	beq.n	8005454 <_dtoa_r+0x5b4>
 80053c8:	494c      	ldr	r1, [pc, #304]	; (80054fc <_dtoa_r+0x65c>)
 80053ca:	2000      	movs	r0, #0
 80053cc:	f7fb fa3e 	bl	800084c <__aeabi_ddiv>
 80053d0:	ec53 2b18 	vmov	r2, r3, d8
 80053d4:	f7fa ff58 	bl	8000288 <__aeabi_dsub>
 80053d8:	9d00      	ldr	r5, [sp, #0]
 80053da:	ec41 0b18 	vmov	d8, r0, r1
 80053de:	4639      	mov	r1, r7
 80053e0:	4630      	mov	r0, r6
 80053e2:	f7fb fbb9 	bl	8000b58 <__aeabi_d2iz>
 80053e6:	900c      	str	r0, [sp, #48]	; 0x30
 80053e8:	f7fb f89c 	bl	8000524 <__aeabi_i2d>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4630      	mov	r0, r6
 80053f2:	4639      	mov	r1, r7
 80053f4:	f7fa ff48 	bl	8000288 <__aeabi_dsub>
 80053f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053fa:	3330      	adds	r3, #48	; 0x30
 80053fc:	f805 3b01 	strb.w	r3, [r5], #1
 8005400:	ec53 2b18 	vmov	r2, r3, d8
 8005404:	4606      	mov	r6, r0
 8005406:	460f      	mov	r7, r1
 8005408:	f7fb fb68 	bl	8000adc <__aeabi_dcmplt>
 800540c:	2800      	cmp	r0, #0
 800540e:	d165      	bne.n	80054dc <_dtoa_r+0x63c>
 8005410:	4632      	mov	r2, r6
 8005412:	463b      	mov	r3, r7
 8005414:	4935      	ldr	r1, [pc, #212]	; (80054ec <_dtoa_r+0x64c>)
 8005416:	2000      	movs	r0, #0
 8005418:	f7fa ff36 	bl	8000288 <__aeabi_dsub>
 800541c:	ec53 2b18 	vmov	r2, r3, d8
 8005420:	f7fb fb5c 	bl	8000adc <__aeabi_dcmplt>
 8005424:	2800      	cmp	r0, #0
 8005426:	f040 80b9 	bne.w	800559c <_dtoa_r+0x6fc>
 800542a:	9b02      	ldr	r3, [sp, #8]
 800542c:	429d      	cmp	r5, r3
 800542e:	f43f af75 	beq.w	800531c <_dtoa_r+0x47c>
 8005432:	4b2f      	ldr	r3, [pc, #188]	; (80054f0 <_dtoa_r+0x650>)
 8005434:	ec51 0b18 	vmov	r0, r1, d8
 8005438:	2200      	movs	r2, #0
 800543a:	f7fb f8dd 	bl	80005f8 <__aeabi_dmul>
 800543e:	4b2c      	ldr	r3, [pc, #176]	; (80054f0 <_dtoa_r+0x650>)
 8005440:	ec41 0b18 	vmov	d8, r0, r1
 8005444:	2200      	movs	r2, #0
 8005446:	4630      	mov	r0, r6
 8005448:	4639      	mov	r1, r7
 800544a:	f7fb f8d5 	bl	80005f8 <__aeabi_dmul>
 800544e:	4606      	mov	r6, r0
 8005450:	460f      	mov	r7, r1
 8005452:	e7c4      	b.n	80053de <_dtoa_r+0x53e>
 8005454:	ec51 0b17 	vmov	r0, r1, d7
 8005458:	f7fb f8ce 	bl	80005f8 <__aeabi_dmul>
 800545c:	9b02      	ldr	r3, [sp, #8]
 800545e:	9d00      	ldr	r5, [sp, #0]
 8005460:	930c      	str	r3, [sp, #48]	; 0x30
 8005462:	ec41 0b18 	vmov	d8, r0, r1
 8005466:	4639      	mov	r1, r7
 8005468:	4630      	mov	r0, r6
 800546a:	f7fb fb75 	bl	8000b58 <__aeabi_d2iz>
 800546e:	9011      	str	r0, [sp, #68]	; 0x44
 8005470:	f7fb f858 	bl	8000524 <__aeabi_i2d>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4630      	mov	r0, r6
 800547a:	4639      	mov	r1, r7
 800547c:	f7fa ff04 	bl	8000288 <__aeabi_dsub>
 8005480:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005482:	3330      	adds	r3, #48	; 0x30
 8005484:	f805 3b01 	strb.w	r3, [r5], #1
 8005488:	9b02      	ldr	r3, [sp, #8]
 800548a:	429d      	cmp	r5, r3
 800548c:	4606      	mov	r6, r0
 800548e:	460f      	mov	r7, r1
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	d134      	bne.n	8005500 <_dtoa_r+0x660>
 8005496:	4b19      	ldr	r3, [pc, #100]	; (80054fc <_dtoa_r+0x65c>)
 8005498:	ec51 0b18 	vmov	r0, r1, d8
 800549c:	f7fa fef6 	bl	800028c <__adddf3>
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4630      	mov	r0, r6
 80054a6:	4639      	mov	r1, r7
 80054a8:	f7fb fb36 	bl	8000b18 <__aeabi_dcmpgt>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d175      	bne.n	800559c <_dtoa_r+0x6fc>
 80054b0:	ec53 2b18 	vmov	r2, r3, d8
 80054b4:	4911      	ldr	r1, [pc, #68]	; (80054fc <_dtoa_r+0x65c>)
 80054b6:	2000      	movs	r0, #0
 80054b8:	f7fa fee6 	bl	8000288 <__aeabi_dsub>
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	4630      	mov	r0, r6
 80054c2:	4639      	mov	r1, r7
 80054c4:	f7fb fb0a 	bl	8000adc <__aeabi_dcmplt>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	f43f af27 	beq.w	800531c <_dtoa_r+0x47c>
 80054ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054d0:	1e6b      	subs	r3, r5, #1
 80054d2:	930c      	str	r3, [sp, #48]	; 0x30
 80054d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80054d8:	2b30      	cmp	r3, #48	; 0x30
 80054da:	d0f8      	beq.n	80054ce <_dtoa_r+0x62e>
 80054dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80054e0:	e04a      	b.n	8005578 <_dtoa_r+0x6d8>
 80054e2:	bf00      	nop
 80054e4:	080074d8 	.word	0x080074d8
 80054e8:	080074b0 	.word	0x080074b0
 80054ec:	3ff00000 	.word	0x3ff00000
 80054f0:	40240000 	.word	0x40240000
 80054f4:	401c0000 	.word	0x401c0000
 80054f8:	40140000 	.word	0x40140000
 80054fc:	3fe00000 	.word	0x3fe00000
 8005500:	4baf      	ldr	r3, [pc, #700]	; (80057c0 <_dtoa_r+0x920>)
 8005502:	f7fb f879 	bl	80005f8 <__aeabi_dmul>
 8005506:	4606      	mov	r6, r0
 8005508:	460f      	mov	r7, r1
 800550a:	e7ac      	b.n	8005466 <_dtoa_r+0x5c6>
 800550c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005510:	9d00      	ldr	r5, [sp, #0]
 8005512:	4642      	mov	r2, r8
 8005514:	464b      	mov	r3, r9
 8005516:	4630      	mov	r0, r6
 8005518:	4639      	mov	r1, r7
 800551a:	f7fb f997 	bl	800084c <__aeabi_ddiv>
 800551e:	f7fb fb1b 	bl	8000b58 <__aeabi_d2iz>
 8005522:	9002      	str	r0, [sp, #8]
 8005524:	f7fa fffe 	bl	8000524 <__aeabi_i2d>
 8005528:	4642      	mov	r2, r8
 800552a:	464b      	mov	r3, r9
 800552c:	f7fb f864 	bl	80005f8 <__aeabi_dmul>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4630      	mov	r0, r6
 8005536:	4639      	mov	r1, r7
 8005538:	f7fa fea6 	bl	8000288 <__aeabi_dsub>
 800553c:	9e02      	ldr	r6, [sp, #8]
 800553e:	9f01      	ldr	r7, [sp, #4]
 8005540:	3630      	adds	r6, #48	; 0x30
 8005542:	f805 6b01 	strb.w	r6, [r5], #1
 8005546:	9e00      	ldr	r6, [sp, #0]
 8005548:	1bae      	subs	r6, r5, r6
 800554a:	42b7      	cmp	r7, r6
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	d137      	bne.n	80055c2 <_dtoa_r+0x722>
 8005552:	f7fa fe9b 	bl	800028c <__adddf3>
 8005556:	4642      	mov	r2, r8
 8005558:	464b      	mov	r3, r9
 800555a:	4606      	mov	r6, r0
 800555c:	460f      	mov	r7, r1
 800555e:	f7fb fadb 	bl	8000b18 <__aeabi_dcmpgt>
 8005562:	b9c8      	cbnz	r0, 8005598 <_dtoa_r+0x6f8>
 8005564:	4642      	mov	r2, r8
 8005566:	464b      	mov	r3, r9
 8005568:	4630      	mov	r0, r6
 800556a:	4639      	mov	r1, r7
 800556c:	f7fb faac 	bl	8000ac8 <__aeabi_dcmpeq>
 8005570:	b110      	cbz	r0, 8005578 <_dtoa_r+0x6d8>
 8005572:	9b02      	ldr	r3, [sp, #8]
 8005574:	07d9      	lsls	r1, r3, #31
 8005576:	d40f      	bmi.n	8005598 <_dtoa_r+0x6f8>
 8005578:	4620      	mov	r0, r4
 800557a:	4659      	mov	r1, fp
 800557c:	f000 fac8 	bl	8005b10 <_Bfree>
 8005580:	2300      	movs	r3, #0
 8005582:	702b      	strb	r3, [r5, #0]
 8005584:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005586:	f10a 0001 	add.w	r0, sl, #1
 800558a:	6018      	str	r0, [r3, #0]
 800558c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800558e:	2b00      	cmp	r3, #0
 8005590:	f43f acd8 	beq.w	8004f44 <_dtoa_r+0xa4>
 8005594:	601d      	str	r5, [r3, #0]
 8005596:	e4d5      	b.n	8004f44 <_dtoa_r+0xa4>
 8005598:	f8cd a01c 	str.w	sl, [sp, #28]
 800559c:	462b      	mov	r3, r5
 800559e:	461d      	mov	r5, r3
 80055a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055a4:	2a39      	cmp	r2, #57	; 0x39
 80055a6:	d108      	bne.n	80055ba <_dtoa_r+0x71a>
 80055a8:	9a00      	ldr	r2, [sp, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d1f7      	bne.n	800559e <_dtoa_r+0x6fe>
 80055ae:	9a07      	ldr	r2, [sp, #28]
 80055b0:	9900      	ldr	r1, [sp, #0]
 80055b2:	3201      	adds	r2, #1
 80055b4:	9207      	str	r2, [sp, #28]
 80055b6:	2230      	movs	r2, #48	; 0x30
 80055b8:	700a      	strb	r2, [r1, #0]
 80055ba:	781a      	ldrb	r2, [r3, #0]
 80055bc:	3201      	adds	r2, #1
 80055be:	701a      	strb	r2, [r3, #0]
 80055c0:	e78c      	b.n	80054dc <_dtoa_r+0x63c>
 80055c2:	4b7f      	ldr	r3, [pc, #508]	; (80057c0 <_dtoa_r+0x920>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	f7fb f817 	bl	80005f8 <__aeabi_dmul>
 80055ca:	2200      	movs	r2, #0
 80055cc:	2300      	movs	r3, #0
 80055ce:	4606      	mov	r6, r0
 80055d0:	460f      	mov	r7, r1
 80055d2:	f7fb fa79 	bl	8000ac8 <__aeabi_dcmpeq>
 80055d6:	2800      	cmp	r0, #0
 80055d8:	d09b      	beq.n	8005512 <_dtoa_r+0x672>
 80055da:	e7cd      	b.n	8005578 <_dtoa_r+0x6d8>
 80055dc:	9a08      	ldr	r2, [sp, #32]
 80055de:	2a00      	cmp	r2, #0
 80055e0:	f000 80c4 	beq.w	800576c <_dtoa_r+0x8cc>
 80055e4:	9a05      	ldr	r2, [sp, #20]
 80055e6:	2a01      	cmp	r2, #1
 80055e8:	f300 80a8 	bgt.w	800573c <_dtoa_r+0x89c>
 80055ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80055ee:	2a00      	cmp	r2, #0
 80055f0:	f000 80a0 	beq.w	8005734 <_dtoa_r+0x894>
 80055f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80055f8:	9e06      	ldr	r6, [sp, #24]
 80055fa:	4645      	mov	r5, r8
 80055fc:	9a04      	ldr	r2, [sp, #16]
 80055fe:	2101      	movs	r1, #1
 8005600:	441a      	add	r2, r3
 8005602:	4620      	mov	r0, r4
 8005604:	4498      	add	r8, r3
 8005606:	9204      	str	r2, [sp, #16]
 8005608:	f000 fb3e 	bl	8005c88 <__i2b>
 800560c:	4607      	mov	r7, r0
 800560e:	2d00      	cmp	r5, #0
 8005610:	dd0b      	ble.n	800562a <_dtoa_r+0x78a>
 8005612:	9b04      	ldr	r3, [sp, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	dd08      	ble.n	800562a <_dtoa_r+0x78a>
 8005618:	42ab      	cmp	r3, r5
 800561a:	9a04      	ldr	r2, [sp, #16]
 800561c:	bfa8      	it	ge
 800561e:	462b      	movge	r3, r5
 8005620:	eba8 0803 	sub.w	r8, r8, r3
 8005624:	1aed      	subs	r5, r5, r3
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	9304      	str	r3, [sp, #16]
 800562a:	9b06      	ldr	r3, [sp, #24]
 800562c:	b1fb      	cbz	r3, 800566e <_dtoa_r+0x7ce>
 800562e:	9b08      	ldr	r3, [sp, #32]
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 809f 	beq.w	8005774 <_dtoa_r+0x8d4>
 8005636:	2e00      	cmp	r6, #0
 8005638:	dd11      	ble.n	800565e <_dtoa_r+0x7be>
 800563a:	4639      	mov	r1, r7
 800563c:	4632      	mov	r2, r6
 800563e:	4620      	mov	r0, r4
 8005640:	f000 fbde 	bl	8005e00 <__pow5mult>
 8005644:	465a      	mov	r2, fp
 8005646:	4601      	mov	r1, r0
 8005648:	4607      	mov	r7, r0
 800564a:	4620      	mov	r0, r4
 800564c:	f000 fb32 	bl	8005cb4 <__multiply>
 8005650:	4659      	mov	r1, fp
 8005652:	9007      	str	r0, [sp, #28]
 8005654:	4620      	mov	r0, r4
 8005656:	f000 fa5b 	bl	8005b10 <_Bfree>
 800565a:	9b07      	ldr	r3, [sp, #28]
 800565c:	469b      	mov	fp, r3
 800565e:	9b06      	ldr	r3, [sp, #24]
 8005660:	1b9a      	subs	r2, r3, r6
 8005662:	d004      	beq.n	800566e <_dtoa_r+0x7ce>
 8005664:	4659      	mov	r1, fp
 8005666:	4620      	mov	r0, r4
 8005668:	f000 fbca 	bl	8005e00 <__pow5mult>
 800566c:	4683      	mov	fp, r0
 800566e:	2101      	movs	r1, #1
 8005670:	4620      	mov	r0, r4
 8005672:	f000 fb09 	bl	8005c88 <__i2b>
 8005676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005678:	2b00      	cmp	r3, #0
 800567a:	4606      	mov	r6, r0
 800567c:	dd7c      	ble.n	8005778 <_dtoa_r+0x8d8>
 800567e:	461a      	mov	r2, r3
 8005680:	4601      	mov	r1, r0
 8005682:	4620      	mov	r0, r4
 8005684:	f000 fbbc 	bl	8005e00 <__pow5mult>
 8005688:	9b05      	ldr	r3, [sp, #20]
 800568a:	2b01      	cmp	r3, #1
 800568c:	4606      	mov	r6, r0
 800568e:	dd76      	ble.n	800577e <_dtoa_r+0x8de>
 8005690:	2300      	movs	r3, #0
 8005692:	9306      	str	r3, [sp, #24]
 8005694:	6933      	ldr	r3, [r6, #16]
 8005696:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800569a:	6918      	ldr	r0, [r3, #16]
 800569c:	f000 faa4 	bl	8005be8 <__hi0bits>
 80056a0:	f1c0 0020 	rsb	r0, r0, #32
 80056a4:	9b04      	ldr	r3, [sp, #16]
 80056a6:	4418      	add	r0, r3
 80056a8:	f010 001f 	ands.w	r0, r0, #31
 80056ac:	f000 8086 	beq.w	80057bc <_dtoa_r+0x91c>
 80056b0:	f1c0 0320 	rsb	r3, r0, #32
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	dd7f      	ble.n	80057b8 <_dtoa_r+0x918>
 80056b8:	f1c0 001c 	rsb	r0, r0, #28
 80056bc:	9b04      	ldr	r3, [sp, #16]
 80056be:	4403      	add	r3, r0
 80056c0:	4480      	add	r8, r0
 80056c2:	4405      	add	r5, r0
 80056c4:	9304      	str	r3, [sp, #16]
 80056c6:	f1b8 0f00 	cmp.w	r8, #0
 80056ca:	dd05      	ble.n	80056d8 <_dtoa_r+0x838>
 80056cc:	4659      	mov	r1, fp
 80056ce:	4642      	mov	r2, r8
 80056d0:	4620      	mov	r0, r4
 80056d2:	f000 fbef 	bl	8005eb4 <__lshift>
 80056d6:	4683      	mov	fp, r0
 80056d8:	9b04      	ldr	r3, [sp, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	dd05      	ble.n	80056ea <_dtoa_r+0x84a>
 80056de:	4631      	mov	r1, r6
 80056e0:	461a      	mov	r2, r3
 80056e2:	4620      	mov	r0, r4
 80056e4:	f000 fbe6 	bl	8005eb4 <__lshift>
 80056e8:	4606      	mov	r6, r0
 80056ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d069      	beq.n	80057c4 <_dtoa_r+0x924>
 80056f0:	4631      	mov	r1, r6
 80056f2:	4658      	mov	r0, fp
 80056f4:	f000 fc4a 	bl	8005f8c <__mcmp>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	da63      	bge.n	80057c4 <_dtoa_r+0x924>
 80056fc:	2300      	movs	r3, #0
 80056fe:	4659      	mov	r1, fp
 8005700:	220a      	movs	r2, #10
 8005702:	4620      	mov	r0, r4
 8005704:	f000 fa26 	bl	8005b54 <__multadd>
 8005708:	9b08      	ldr	r3, [sp, #32]
 800570a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800570e:	4683      	mov	fp, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 818f 	beq.w	8005a34 <_dtoa_r+0xb94>
 8005716:	4639      	mov	r1, r7
 8005718:	2300      	movs	r3, #0
 800571a:	220a      	movs	r2, #10
 800571c:	4620      	mov	r0, r4
 800571e:	f000 fa19 	bl	8005b54 <__multadd>
 8005722:	f1b9 0f00 	cmp.w	r9, #0
 8005726:	4607      	mov	r7, r0
 8005728:	f300 808e 	bgt.w	8005848 <_dtoa_r+0x9a8>
 800572c:	9b05      	ldr	r3, [sp, #20]
 800572e:	2b02      	cmp	r3, #2
 8005730:	dc50      	bgt.n	80057d4 <_dtoa_r+0x934>
 8005732:	e089      	b.n	8005848 <_dtoa_r+0x9a8>
 8005734:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005736:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800573a:	e75d      	b.n	80055f8 <_dtoa_r+0x758>
 800573c:	9b01      	ldr	r3, [sp, #4]
 800573e:	1e5e      	subs	r6, r3, #1
 8005740:	9b06      	ldr	r3, [sp, #24]
 8005742:	42b3      	cmp	r3, r6
 8005744:	bfbf      	itttt	lt
 8005746:	9b06      	ldrlt	r3, [sp, #24]
 8005748:	9606      	strlt	r6, [sp, #24]
 800574a:	1af2      	sublt	r2, r6, r3
 800574c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800574e:	bfb6      	itet	lt
 8005750:	189b      	addlt	r3, r3, r2
 8005752:	1b9e      	subge	r6, r3, r6
 8005754:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005756:	9b01      	ldr	r3, [sp, #4]
 8005758:	bfb8      	it	lt
 800575a:	2600      	movlt	r6, #0
 800575c:	2b00      	cmp	r3, #0
 800575e:	bfb5      	itete	lt
 8005760:	eba8 0503 	sublt.w	r5, r8, r3
 8005764:	9b01      	ldrge	r3, [sp, #4]
 8005766:	2300      	movlt	r3, #0
 8005768:	4645      	movge	r5, r8
 800576a:	e747      	b.n	80055fc <_dtoa_r+0x75c>
 800576c:	9e06      	ldr	r6, [sp, #24]
 800576e:	9f08      	ldr	r7, [sp, #32]
 8005770:	4645      	mov	r5, r8
 8005772:	e74c      	b.n	800560e <_dtoa_r+0x76e>
 8005774:	9a06      	ldr	r2, [sp, #24]
 8005776:	e775      	b.n	8005664 <_dtoa_r+0x7c4>
 8005778:	9b05      	ldr	r3, [sp, #20]
 800577a:	2b01      	cmp	r3, #1
 800577c:	dc18      	bgt.n	80057b0 <_dtoa_r+0x910>
 800577e:	9b02      	ldr	r3, [sp, #8]
 8005780:	b9b3      	cbnz	r3, 80057b0 <_dtoa_r+0x910>
 8005782:	9b03      	ldr	r3, [sp, #12]
 8005784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005788:	b9a3      	cbnz	r3, 80057b4 <_dtoa_r+0x914>
 800578a:	9b03      	ldr	r3, [sp, #12]
 800578c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005790:	0d1b      	lsrs	r3, r3, #20
 8005792:	051b      	lsls	r3, r3, #20
 8005794:	b12b      	cbz	r3, 80057a2 <_dtoa_r+0x902>
 8005796:	9b04      	ldr	r3, [sp, #16]
 8005798:	3301      	adds	r3, #1
 800579a:	9304      	str	r3, [sp, #16]
 800579c:	f108 0801 	add.w	r8, r8, #1
 80057a0:	2301      	movs	r3, #1
 80057a2:	9306      	str	r3, [sp, #24]
 80057a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f47f af74 	bne.w	8005694 <_dtoa_r+0x7f4>
 80057ac:	2001      	movs	r0, #1
 80057ae:	e779      	b.n	80056a4 <_dtoa_r+0x804>
 80057b0:	2300      	movs	r3, #0
 80057b2:	e7f6      	b.n	80057a2 <_dtoa_r+0x902>
 80057b4:	9b02      	ldr	r3, [sp, #8]
 80057b6:	e7f4      	b.n	80057a2 <_dtoa_r+0x902>
 80057b8:	d085      	beq.n	80056c6 <_dtoa_r+0x826>
 80057ba:	4618      	mov	r0, r3
 80057bc:	301c      	adds	r0, #28
 80057be:	e77d      	b.n	80056bc <_dtoa_r+0x81c>
 80057c0:	40240000 	.word	0x40240000
 80057c4:	9b01      	ldr	r3, [sp, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	dc38      	bgt.n	800583c <_dtoa_r+0x99c>
 80057ca:	9b05      	ldr	r3, [sp, #20]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	dd35      	ble.n	800583c <_dtoa_r+0x99c>
 80057d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80057d4:	f1b9 0f00 	cmp.w	r9, #0
 80057d8:	d10d      	bne.n	80057f6 <_dtoa_r+0x956>
 80057da:	4631      	mov	r1, r6
 80057dc:	464b      	mov	r3, r9
 80057de:	2205      	movs	r2, #5
 80057e0:	4620      	mov	r0, r4
 80057e2:	f000 f9b7 	bl	8005b54 <__multadd>
 80057e6:	4601      	mov	r1, r0
 80057e8:	4606      	mov	r6, r0
 80057ea:	4658      	mov	r0, fp
 80057ec:	f000 fbce 	bl	8005f8c <__mcmp>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	f73f adbd 	bgt.w	8005370 <_dtoa_r+0x4d0>
 80057f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f8:	9d00      	ldr	r5, [sp, #0]
 80057fa:	ea6f 0a03 	mvn.w	sl, r3
 80057fe:	f04f 0800 	mov.w	r8, #0
 8005802:	4631      	mov	r1, r6
 8005804:	4620      	mov	r0, r4
 8005806:	f000 f983 	bl	8005b10 <_Bfree>
 800580a:	2f00      	cmp	r7, #0
 800580c:	f43f aeb4 	beq.w	8005578 <_dtoa_r+0x6d8>
 8005810:	f1b8 0f00 	cmp.w	r8, #0
 8005814:	d005      	beq.n	8005822 <_dtoa_r+0x982>
 8005816:	45b8      	cmp	r8, r7
 8005818:	d003      	beq.n	8005822 <_dtoa_r+0x982>
 800581a:	4641      	mov	r1, r8
 800581c:	4620      	mov	r0, r4
 800581e:	f000 f977 	bl	8005b10 <_Bfree>
 8005822:	4639      	mov	r1, r7
 8005824:	4620      	mov	r0, r4
 8005826:	f000 f973 	bl	8005b10 <_Bfree>
 800582a:	e6a5      	b.n	8005578 <_dtoa_r+0x6d8>
 800582c:	2600      	movs	r6, #0
 800582e:	4637      	mov	r7, r6
 8005830:	e7e1      	b.n	80057f6 <_dtoa_r+0x956>
 8005832:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005834:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005838:	4637      	mov	r7, r6
 800583a:	e599      	b.n	8005370 <_dtoa_r+0x4d0>
 800583c:	9b08      	ldr	r3, [sp, #32]
 800583e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 80fd 	beq.w	8005a42 <_dtoa_r+0xba2>
 8005848:	2d00      	cmp	r5, #0
 800584a:	dd05      	ble.n	8005858 <_dtoa_r+0x9b8>
 800584c:	4639      	mov	r1, r7
 800584e:	462a      	mov	r2, r5
 8005850:	4620      	mov	r0, r4
 8005852:	f000 fb2f 	bl	8005eb4 <__lshift>
 8005856:	4607      	mov	r7, r0
 8005858:	9b06      	ldr	r3, [sp, #24]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d05c      	beq.n	8005918 <_dtoa_r+0xa78>
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	4620      	mov	r0, r4
 8005862:	f000 f915 	bl	8005a90 <_Balloc>
 8005866:	4605      	mov	r5, r0
 8005868:	b928      	cbnz	r0, 8005876 <_dtoa_r+0x9d6>
 800586a:	4b80      	ldr	r3, [pc, #512]	; (8005a6c <_dtoa_r+0xbcc>)
 800586c:	4602      	mov	r2, r0
 800586e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005872:	f7ff bb2e 	b.w	8004ed2 <_dtoa_r+0x32>
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	3202      	adds	r2, #2
 800587a:	0092      	lsls	r2, r2, #2
 800587c:	f107 010c 	add.w	r1, r7, #12
 8005880:	300c      	adds	r0, #12
 8005882:	f7fe fe01 	bl	8004488 <memcpy>
 8005886:	2201      	movs	r2, #1
 8005888:	4629      	mov	r1, r5
 800588a:	4620      	mov	r0, r4
 800588c:	f000 fb12 	bl	8005eb4 <__lshift>
 8005890:	9b00      	ldr	r3, [sp, #0]
 8005892:	3301      	adds	r3, #1
 8005894:	9301      	str	r3, [sp, #4]
 8005896:	9b00      	ldr	r3, [sp, #0]
 8005898:	444b      	add	r3, r9
 800589a:	9307      	str	r3, [sp, #28]
 800589c:	9b02      	ldr	r3, [sp, #8]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	46b8      	mov	r8, r7
 80058a4:	9306      	str	r3, [sp, #24]
 80058a6:	4607      	mov	r7, r0
 80058a8:	9b01      	ldr	r3, [sp, #4]
 80058aa:	4631      	mov	r1, r6
 80058ac:	3b01      	subs	r3, #1
 80058ae:	4658      	mov	r0, fp
 80058b0:	9302      	str	r3, [sp, #8]
 80058b2:	f7ff fa69 	bl	8004d88 <quorem>
 80058b6:	4603      	mov	r3, r0
 80058b8:	3330      	adds	r3, #48	; 0x30
 80058ba:	9004      	str	r0, [sp, #16]
 80058bc:	4641      	mov	r1, r8
 80058be:	4658      	mov	r0, fp
 80058c0:	9308      	str	r3, [sp, #32]
 80058c2:	f000 fb63 	bl	8005f8c <__mcmp>
 80058c6:	463a      	mov	r2, r7
 80058c8:	4681      	mov	r9, r0
 80058ca:	4631      	mov	r1, r6
 80058cc:	4620      	mov	r0, r4
 80058ce:	f000 fb79 	bl	8005fc4 <__mdiff>
 80058d2:	68c2      	ldr	r2, [r0, #12]
 80058d4:	9b08      	ldr	r3, [sp, #32]
 80058d6:	4605      	mov	r5, r0
 80058d8:	bb02      	cbnz	r2, 800591c <_dtoa_r+0xa7c>
 80058da:	4601      	mov	r1, r0
 80058dc:	4658      	mov	r0, fp
 80058de:	f000 fb55 	bl	8005f8c <__mcmp>
 80058e2:	9b08      	ldr	r3, [sp, #32]
 80058e4:	4602      	mov	r2, r0
 80058e6:	4629      	mov	r1, r5
 80058e8:	4620      	mov	r0, r4
 80058ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80058ee:	f000 f90f 	bl	8005b10 <_Bfree>
 80058f2:	9b05      	ldr	r3, [sp, #20]
 80058f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058f6:	9d01      	ldr	r5, [sp, #4]
 80058f8:	ea43 0102 	orr.w	r1, r3, r2
 80058fc:	9b06      	ldr	r3, [sp, #24]
 80058fe:	430b      	orrs	r3, r1
 8005900:	9b08      	ldr	r3, [sp, #32]
 8005902:	d10d      	bne.n	8005920 <_dtoa_r+0xa80>
 8005904:	2b39      	cmp	r3, #57	; 0x39
 8005906:	d029      	beq.n	800595c <_dtoa_r+0xabc>
 8005908:	f1b9 0f00 	cmp.w	r9, #0
 800590c:	dd01      	ble.n	8005912 <_dtoa_r+0xa72>
 800590e:	9b04      	ldr	r3, [sp, #16]
 8005910:	3331      	adds	r3, #49	; 0x31
 8005912:	9a02      	ldr	r2, [sp, #8]
 8005914:	7013      	strb	r3, [r2, #0]
 8005916:	e774      	b.n	8005802 <_dtoa_r+0x962>
 8005918:	4638      	mov	r0, r7
 800591a:	e7b9      	b.n	8005890 <_dtoa_r+0x9f0>
 800591c:	2201      	movs	r2, #1
 800591e:	e7e2      	b.n	80058e6 <_dtoa_r+0xa46>
 8005920:	f1b9 0f00 	cmp.w	r9, #0
 8005924:	db06      	blt.n	8005934 <_dtoa_r+0xa94>
 8005926:	9905      	ldr	r1, [sp, #20]
 8005928:	ea41 0909 	orr.w	r9, r1, r9
 800592c:	9906      	ldr	r1, [sp, #24]
 800592e:	ea59 0101 	orrs.w	r1, r9, r1
 8005932:	d120      	bne.n	8005976 <_dtoa_r+0xad6>
 8005934:	2a00      	cmp	r2, #0
 8005936:	ddec      	ble.n	8005912 <_dtoa_r+0xa72>
 8005938:	4659      	mov	r1, fp
 800593a:	2201      	movs	r2, #1
 800593c:	4620      	mov	r0, r4
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	f000 fab8 	bl	8005eb4 <__lshift>
 8005944:	4631      	mov	r1, r6
 8005946:	4683      	mov	fp, r0
 8005948:	f000 fb20 	bl	8005f8c <__mcmp>
 800594c:	2800      	cmp	r0, #0
 800594e:	9b01      	ldr	r3, [sp, #4]
 8005950:	dc02      	bgt.n	8005958 <_dtoa_r+0xab8>
 8005952:	d1de      	bne.n	8005912 <_dtoa_r+0xa72>
 8005954:	07da      	lsls	r2, r3, #31
 8005956:	d5dc      	bpl.n	8005912 <_dtoa_r+0xa72>
 8005958:	2b39      	cmp	r3, #57	; 0x39
 800595a:	d1d8      	bne.n	800590e <_dtoa_r+0xa6e>
 800595c:	9a02      	ldr	r2, [sp, #8]
 800595e:	2339      	movs	r3, #57	; 0x39
 8005960:	7013      	strb	r3, [r2, #0]
 8005962:	462b      	mov	r3, r5
 8005964:	461d      	mov	r5, r3
 8005966:	3b01      	subs	r3, #1
 8005968:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800596c:	2a39      	cmp	r2, #57	; 0x39
 800596e:	d050      	beq.n	8005a12 <_dtoa_r+0xb72>
 8005970:	3201      	adds	r2, #1
 8005972:	701a      	strb	r2, [r3, #0]
 8005974:	e745      	b.n	8005802 <_dtoa_r+0x962>
 8005976:	2a00      	cmp	r2, #0
 8005978:	dd03      	ble.n	8005982 <_dtoa_r+0xae2>
 800597a:	2b39      	cmp	r3, #57	; 0x39
 800597c:	d0ee      	beq.n	800595c <_dtoa_r+0xabc>
 800597e:	3301      	adds	r3, #1
 8005980:	e7c7      	b.n	8005912 <_dtoa_r+0xa72>
 8005982:	9a01      	ldr	r2, [sp, #4]
 8005984:	9907      	ldr	r1, [sp, #28]
 8005986:	f802 3c01 	strb.w	r3, [r2, #-1]
 800598a:	428a      	cmp	r2, r1
 800598c:	d02a      	beq.n	80059e4 <_dtoa_r+0xb44>
 800598e:	4659      	mov	r1, fp
 8005990:	2300      	movs	r3, #0
 8005992:	220a      	movs	r2, #10
 8005994:	4620      	mov	r0, r4
 8005996:	f000 f8dd 	bl	8005b54 <__multadd>
 800599a:	45b8      	cmp	r8, r7
 800599c:	4683      	mov	fp, r0
 800599e:	f04f 0300 	mov.w	r3, #0
 80059a2:	f04f 020a 	mov.w	r2, #10
 80059a6:	4641      	mov	r1, r8
 80059a8:	4620      	mov	r0, r4
 80059aa:	d107      	bne.n	80059bc <_dtoa_r+0xb1c>
 80059ac:	f000 f8d2 	bl	8005b54 <__multadd>
 80059b0:	4680      	mov	r8, r0
 80059b2:	4607      	mov	r7, r0
 80059b4:	9b01      	ldr	r3, [sp, #4]
 80059b6:	3301      	adds	r3, #1
 80059b8:	9301      	str	r3, [sp, #4]
 80059ba:	e775      	b.n	80058a8 <_dtoa_r+0xa08>
 80059bc:	f000 f8ca 	bl	8005b54 <__multadd>
 80059c0:	4639      	mov	r1, r7
 80059c2:	4680      	mov	r8, r0
 80059c4:	2300      	movs	r3, #0
 80059c6:	220a      	movs	r2, #10
 80059c8:	4620      	mov	r0, r4
 80059ca:	f000 f8c3 	bl	8005b54 <__multadd>
 80059ce:	4607      	mov	r7, r0
 80059d0:	e7f0      	b.n	80059b4 <_dtoa_r+0xb14>
 80059d2:	f1b9 0f00 	cmp.w	r9, #0
 80059d6:	9a00      	ldr	r2, [sp, #0]
 80059d8:	bfcc      	ite	gt
 80059da:	464d      	movgt	r5, r9
 80059dc:	2501      	movle	r5, #1
 80059de:	4415      	add	r5, r2
 80059e0:	f04f 0800 	mov.w	r8, #0
 80059e4:	4659      	mov	r1, fp
 80059e6:	2201      	movs	r2, #1
 80059e8:	4620      	mov	r0, r4
 80059ea:	9301      	str	r3, [sp, #4]
 80059ec:	f000 fa62 	bl	8005eb4 <__lshift>
 80059f0:	4631      	mov	r1, r6
 80059f2:	4683      	mov	fp, r0
 80059f4:	f000 faca 	bl	8005f8c <__mcmp>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	dcb2      	bgt.n	8005962 <_dtoa_r+0xac2>
 80059fc:	d102      	bne.n	8005a04 <_dtoa_r+0xb64>
 80059fe:	9b01      	ldr	r3, [sp, #4]
 8005a00:	07db      	lsls	r3, r3, #31
 8005a02:	d4ae      	bmi.n	8005962 <_dtoa_r+0xac2>
 8005a04:	462b      	mov	r3, r5
 8005a06:	461d      	mov	r5, r3
 8005a08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a0c:	2a30      	cmp	r2, #48	; 0x30
 8005a0e:	d0fa      	beq.n	8005a06 <_dtoa_r+0xb66>
 8005a10:	e6f7      	b.n	8005802 <_dtoa_r+0x962>
 8005a12:	9a00      	ldr	r2, [sp, #0]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d1a5      	bne.n	8005964 <_dtoa_r+0xac4>
 8005a18:	f10a 0a01 	add.w	sl, sl, #1
 8005a1c:	2331      	movs	r3, #49	; 0x31
 8005a1e:	e779      	b.n	8005914 <_dtoa_r+0xa74>
 8005a20:	4b13      	ldr	r3, [pc, #76]	; (8005a70 <_dtoa_r+0xbd0>)
 8005a22:	f7ff baaf 	b.w	8004f84 <_dtoa_r+0xe4>
 8005a26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f47f aa86 	bne.w	8004f3a <_dtoa_r+0x9a>
 8005a2e:	4b11      	ldr	r3, [pc, #68]	; (8005a74 <_dtoa_r+0xbd4>)
 8005a30:	f7ff baa8 	b.w	8004f84 <_dtoa_r+0xe4>
 8005a34:	f1b9 0f00 	cmp.w	r9, #0
 8005a38:	dc03      	bgt.n	8005a42 <_dtoa_r+0xba2>
 8005a3a:	9b05      	ldr	r3, [sp, #20]
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	f73f aec9 	bgt.w	80057d4 <_dtoa_r+0x934>
 8005a42:	9d00      	ldr	r5, [sp, #0]
 8005a44:	4631      	mov	r1, r6
 8005a46:	4658      	mov	r0, fp
 8005a48:	f7ff f99e 	bl	8004d88 <quorem>
 8005a4c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005a50:	f805 3b01 	strb.w	r3, [r5], #1
 8005a54:	9a00      	ldr	r2, [sp, #0]
 8005a56:	1aaa      	subs	r2, r5, r2
 8005a58:	4591      	cmp	r9, r2
 8005a5a:	ddba      	ble.n	80059d2 <_dtoa_r+0xb32>
 8005a5c:	4659      	mov	r1, fp
 8005a5e:	2300      	movs	r3, #0
 8005a60:	220a      	movs	r2, #10
 8005a62:	4620      	mov	r0, r4
 8005a64:	f000 f876 	bl	8005b54 <__multadd>
 8005a68:	4683      	mov	fp, r0
 8005a6a:	e7eb      	b.n	8005a44 <_dtoa_r+0xba4>
 8005a6c:	0800743b 	.word	0x0800743b
 8005a70:	08007394 	.word	0x08007394
 8005a74:	080073b8 	.word	0x080073b8

08005a78 <_localeconv_r>:
 8005a78:	4800      	ldr	r0, [pc, #0]	; (8005a7c <_localeconv_r+0x4>)
 8005a7a:	4770      	bx	lr
 8005a7c:	20000160 	.word	0x20000160

08005a80 <malloc>:
 8005a80:	4b02      	ldr	r3, [pc, #8]	; (8005a8c <malloc+0xc>)
 8005a82:	4601      	mov	r1, r0
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	f000 bbe1 	b.w	800624c <_malloc_r>
 8005a8a:	bf00      	nop
 8005a8c:	2000000c 	.word	0x2000000c

08005a90 <_Balloc>:
 8005a90:	b570      	push	{r4, r5, r6, lr}
 8005a92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a94:	4604      	mov	r4, r0
 8005a96:	460d      	mov	r5, r1
 8005a98:	b976      	cbnz	r6, 8005ab8 <_Balloc+0x28>
 8005a9a:	2010      	movs	r0, #16
 8005a9c:	f7ff fff0 	bl	8005a80 <malloc>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	6260      	str	r0, [r4, #36]	; 0x24
 8005aa4:	b920      	cbnz	r0, 8005ab0 <_Balloc+0x20>
 8005aa6:	4b18      	ldr	r3, [pc, #96]	; (8005b08 <_Balloc+0x78>)
 8005aa8:	4818      	ldr	r0, [pc, #96]	; (8005b0c <_Balloc+0x7c>)
 8005aaa:	2166      	movs	r1, #102	; 0x66
 8005aac:	f000 fc38 	bl	8006320 <__assert_func>
 8005ab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ab4:	6006      	str	r6, [r0, #0]
 8005ab6:	60c6      	str	r6, [r0, #12]
 8005ab8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005aba:	68f3      	ldr	r3, [r6, #12]
 8005abc:	b183      	cbz	r3, 8005ae0 <_Balloc+0x50>
 8005abe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ac6:	b9b8      	cbnz	r0, 8005af8 <_Balloc+0x68>
 8005ac8:	2101      	movs	r1, #1
 8005aca:	fa01 f605 	lsl.w	r6, r1, r5
 8005ace:	1d72      	adds	r2, r6, #5
 8005ad0:	0092      	lsls	r2, r2, #2
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f000 fb5a 	bl	800618c <_calloc_r>
 8005ad8:	b160      	cbz	r0, 8005af4 <_Balloc+0x64>
 8005ada:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ade:	e00e      	b.n	8005afe <_Balloc+0x6e>
 8005ae0:	2221      	movs	r2, #33	; 0x21
 8005ae2:	2104      	movs	r1, #4
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f000 fb51 	bl	800618c <_calloc_r>
 8005aea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aec:	60f0      	str	r0, [r6, #12]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1e4      	bne.n	8005abe <_Balloc+0x2e>
 8005af4:	2000      	movs	r0, #0
 8005af6:	bd70      	pop	{r4, r5, r6, pc}
 8005af8:	6802      	ldr	r2, [r0, #0]
 8005afa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005afe:	2300      	movs	r3, #0
 8005b00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b04:	e7f7      	b.n	8005af6 <_Balloc+0x66>
 8005b06:	bf00      	nop
 8005b08:	080073c5 	.word	0x080073c5
 8005b0c:	0800744c 	.word	0x0800744c

08005b10 <_Bfree>:
 8005b10:	b570      	push	{r4, r5, r6, lr}
 8005b12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b14:	4605      	mov	r5, r0
 8005b16:	460c      	mov	r4, r1
 8005b18:	b976      	cbnz	r6, 8005b38 <_Bfree+0x28>
 8005b1a:	2010      	movs	r0, #16
 8005b1c:	f7ff ffb0 	bl	8005a80 <malloc>
 8005b20:	4602      	mov	r2, r0
 8005b22:	6268      	str	r0, [r5, #36]	; 0x24
 8005b24:	b920      	cbnz	r0, 8005b30 <_Bfree+0x20>
 8005b26:	4b09      	ldr	r3, [pc, #36]	; (8005b4c <_Bfree+0x3c>)
 8005b28:	4809      	ldr	r0, [pc, #36]	; (8005b50 <_Bfree+0x40>)
 8005b2a:	218a      	movs	r1, #138	; 0x8a
 8005b2c:	f000 fbf8 	bl	8006320 <__assert_func>
 8005b30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b34:	6006      	str	r6, [r0, #0]
 8005b36:	60c6      	str	r6, [r0, #12]
 8005b38:	b13c      	cbz	r4, 8005b4a <_Bfree+0x3a>
 8005b3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b3c:	6862      	ldr	r2, [r4, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b44:	6021      	str	r1, [r4, #0]
 8005b46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b4a:	bd70      	pop	{r4, r5, r6, pc}
 8005b4c:	080073c5 	.word	0x080073c5
 8005b50:	0800744c 	.word	0x0800744c

08005b54 <__multadd>:
 8005b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b58:	690e      	ldr	r6, [r1, #16]
 8005b5a:	4607      	mov	r7, r0
 8005b5c:	4698      	mov	r8, r3
 8005b5e:	460c      	mov	r4, r1
 8005b60:	f101 0014 	add.w	r0, r1, #20
 8005b64:	2300      	movs	r3, #0
 8005b66:	6805      	ldr	r5, [r0, #0]
 8005b68:	b2a9      	uxth	r1, r5
 8005b6a:	fb02 8101 	mla	r1, r2, r1, r8
 8005b6e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005b72:	0c2d      	lsrs	r5, r5, #16
 8005b74:	fb02 c505 	mla	r5, r2, r5, ip
 8005b78:	b289      	uxth	r1, r1
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005b80:	429e      	cmp	r6, r3
 8005b82:	f840 1b04 	str.w	r1, [r0], #4
 8005b86:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005b8a:	dcec      	bgt.n	8005b66 <__multadd+0x12>
 8005b8c:	f1b8 0f00 	cmp.w	r8, #0
 8005b90:	d022      	beq.n	8005bd8 <__multadd+0x84>
 8005b92:	68a3      	ldr	r3, [r4, #8]
 8005b94:	42b3      	cmp	r3, r6
 8005b96:	dc19      	bgt.n	8005bcc <__multadd+0x78>
 8005b98:	6861      	ldr	r1, [r4, #4]
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	3101      	adds	r1, #1
 8005b9e:	f7ff ff77 	bl	8005a90 <_Balloc>
 8005ba2:	4605      	mov	r5, r0
 8005ba4:	b928      	cbnz	r0, 8005bb2 <__multadd+0x5e>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	4b0d      	ldr	r3, [pc, #52]	; (8005be0 <__multadd+0x8c>)
 8005baa:	480e      	ldr	r0, [pc, #56]	; (8005be4 <__multadd+0x90>)
 8005bac:	21b5      	movs	r1, #181	; 0xb5
 8005bae:	f000 fbb7 	bl	8006320 <__assert_func>
 8005bb2:	6922      	ldr	r2, [r4, #16]
 8005bb4:	3202      	adds	r2, #2
 8005bb6:	f104 010c 	add.w	r1, r4, #12
 8005bba:	0092      	lsls	r2, r2, #2
 8005bbc:	300c      	adds	r0, #12
 8005bbe:	f7fe fc63 	bl	8004488 <memcpy>
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	f7ff ffa3 	bl	8005b10 <_Bfree>
 8005bca:	462c      	mov	r4, r5
 8005bcc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005bd0:	3601      	adds	r6, #1
 8005bd2:	f8c3 8014 	str.w	r8, [r3, #20]
 8005bd6:	6126      	str	r6, [r4, #16]
 8005bd8:	4620      	mov	r0, r4
 8005bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bde:	bf00      	nop
 8005be0:	0800743b 	.word	0x0800743b
 8005be4:	0800744c 	.word	0x0800744c

08005be8 <__hi0bits>:
 8005be8:	0c03      	lsrs	r3, r0, #16
 8005bea:	041b      	lsls	r3, r3, #16
 8005bec:	b9d3      	cbnz	r3, 8005c24 <__hi0bits+0x3c>
 8005bee:	0400      	lsls	r0, r0, #16
 8005bf0:	2310      	movs	r3, #16
 8005bf2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005bf6:	bf04      	itt	eq
 8005bf8:	0200      	lsleq	r0, r0, #8
 8005bfa:	3308      	addeq	r3, #8
 8005bfc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005c00:	bf04      	itt	eq
 8005c02:	0100      	lsleq	r0, r0, #4
 8005c04:	3304      	addeq	r3, #4
 8005c06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005c0a:	bf04      	itt	eq
 8005c0c:	0080      	lsleq	r0, r0, #2
 8005c0e:	3302      	addeq	r3, #2
 8005c10:	2800      	cmp	r0, #0
 8005c12:	db05      	blt.n	8005c20 <__hi0bits+0x38>
 8005c14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005c18:	f103 0301 	add.w	r3, r3, #1
 8005c1c:	bf08      	it	eq
 8005c1e:	2320      	moveq	r3, #32
 8005c20:	4618      	mov	r0, r3
 8005c22:	4770      	bx	lr
 8005c24:	2300      	movs	r3, #0
 8005c26:	e7e4      	b.n	8005bf2 <__hi0bits+0xa>

08005c28 <__lo0bits>:
 8005c28:	6803      	ldr	r3, [r0, #0]
 8005c2a:	f013 0207 	ands.w	r2, r3, #7
 8005c2e:	4601      	mov	r1, r0
 8005c30:	d00b      	beq.n	8005c4a <__lo0bits+0x22>
 8005c32:	07da      	lsls	r2, r3, #31
 8005c34:	d424      	bmi.n	8005c80 <__lo0bits+0x58>
 8005c36:	0798      	lsls	r0, r3, #30
 8005c38:	bf49      	itett	mi
 8005c3a:	085b      	lsrmi	r3, r3, #1
 8005c3c:	089b      	lsrpl	r3, r3, #2
 8005c3e:	2001      	movmi	r0, #1
 8005c40:	600b      	strmi	r3, [r1, #0]
 8005c42:	bf5c      	itt	pl
 8005c44:	600b      	strpl	r3, [r1, #0]
 8005c46:	2002      	movpl	r0, #2
 8005c48:	4770      	bx	lr
 8005c4a:	b298      	uxth	r0, r3
 8005c4c:	b9b0      	cbnz	r0, 8005c7c <__lo0bits+0x54>
 8005c4e:	0c1b      	lsrs	r3, r3, #16
 8005c50:	2010      	movs	r0, #16
 8005c52:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005c56:	bf04      	itt	eq
 8005c58:	0a1b      	lsreq	r3, r3, #8
 8005c5a:	3008      	addeq	r0, #8
 8005c5c:	071a      	lsls	r2, r3, #28
 8005c5e:	bf04      	itt	eq
 8005c60:	091b      	lsreq	r3, r3, #4
 8005c62:	3004      	addeq	r0, #4
 8005c64:	079a      	lsls	r2, r3, #30
 8005c66:	bf04      	itt	eq
 8005c68:	089b      	lsreq	r3, r3, #2
 8005c6a:	3002      	addeq	r0, #2
 8005c6c:	07da      	lsls	r2, r3, #31
 8005c6e:	d403      	bmi.n	8005c78 <__lo0bits+0x50>
 8005c70:	085b      	lsrs	r3, r3, #1
 8005c72:	f100 0001 	add.w	r0, r0, #1
 8005c76:	d005      	beq.n	8005c84 <__lo0bits+0x5c>
 8005c78:	600b      	str	r3, [r1, #0]
 8005c7a:	4770      	bx	lr
 8005c7c:	4610      	mov	r0, r2
 8005c7e:	e7e8      	b.n	8005c52 <__lo0bits+0x2a>
 8005c80:	2000      	movs	r0, #0
 8005c82:	4770      	bx	lr
 8005c84:	2020      	movs	r0, #32
 8005c86:	4770      	bx	lr

08005c88 <__i2b>:
 8005c88:	b510      	push	{r4, lr}
 8005c8a:	460c      	mov	r4, r1
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	f7ff feff 	bl	8005a90 <_Balloc>
 8005c92:	4602      	mov	r2, r0
 8005c94:	b928      	cbnz	r0, 8005ca2 <__i2b+0x1a>
 8005c96:	4b05      	ldr	r3, [pc, #20]	; (8005cac <__i2b+0x24>)
 8005c98:	4805      	ldr	r0, [pc, #20]	; (8005cb0 <__i2b+0x28>)
 8005c9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c9e:	f000 fb3f 	bl	8006320 <__assert_func>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	6144      	str	r4, [r0, #20]
 8005ca6:	6103      	str	r3, [r0, #16]
 8005ca8:	bd10      	pop	{r4, pc}
 8005caa:	bf00      	nop
 8005cac:	0800743b 	.word	0x0800743b
 8005cb0:	0800744c 	.word	0x0800744c

08005cb4 <__multiply>:
 8005cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb8:	4614      	mov	r4, r2
 8005cba:	690a      	ldr	r2, [r1, #16]
 8005cbc:	6923      	ldr	r3, [r4, #16]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	bfb8      	it	lt
 8005cc2:	460b      	movlt	r3, r1
 8005cc4:	460d      	mov	r5, r1
 8005cc6:	bfbc      	itt	lt
 8005cc8:	4625      	movlt	r5, r4
 8005cca:	461c      	movlt	r4, r3
 8005ccc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005cd0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005cd4:	68ab      	ldr	r3, [r5, #8]
 8005cd6:	6869      	ldr	r1, [r5, #4]
 8005cd8:	eb0a 0709 	add.w	r7, sl, r9
 8005cdc:	42bb      	cmp	r3, r7
 8005cde:	b085      	sub	sp, #20
 8005ce0:	bfb8      	it	lt
 8005ce2:	3101      	addlt	r1, #1
 8005ce4:	f7ff fed4 	bl	8005a90 <_Balloc>
 8005ce8:	b930      	cbnz	r0, 8005cf8 <__multiply+0x44>
 8005cea:	4602      	mov	r2, r0
 8005cec:	4b42      	ldr	r3, [pc, #264]	; (8005df8 <__multiply+0x144>)
 8005cee:	4843      	ldr	r0, [pc, #268]	; (8005dfc <__multiply+0x148>)
 8005cf0:	f240 115d 	movw	r1, #349	; 0x15d
 8005cf4:	f000 fb14 	bl	8006320 <__assert_func>
 8005cf8:	f100 0614 	add.w	r6, r0, #20
 8005cfc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005d00:	4633      	mov	r3, r6
 8005d02:	2200      	movs	r2, #0
 8005d04:	4543      	cmp	r3, r8
 8005d06:	d31e      	bcc.n	8005d46 <__multiply+0x92>
 8005d08:	f105 0c14 	add.w	ip, r5, #20
 8005d0c:	f104 0314 	add.w	r3, r4, #20
 8005d10:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005d14:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005d18:	9202      	str	r2, [sp, #8]
 8005d1a:	ebac 0205 	sub.w	r2, ip, r5
 8005d1e:	3a15      	subs	r2, #21
 8005d20:	f022 0203 	bic.w	r2, r2, #3
 8005d24:	3204      	adds	r2, #4
 8005d26:	f105 0115 	add.w	r1, r5, #21
 8005d2a:	458c      	cmp	ip, r1
 8005d2c:	bf38      	it	cc
 8005d2e:	2204      	movcc	r2, #4
 8005d30:	9201      	str	r2, [sp, #4]
 8005d32:	9a02      	ldr	r2, [sp, #8]
 8005d34:	9303      	str	r3, [sp, #12]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d808      	bhi.n	8005d4c <__multiply+0x98>
 8005d3a:	2f00      	cmp	r7, #0
 8005d3c:	dc55      	bgt.n	8005dea <__multiply+0x136>
 8005d3e:	6107      	str	r7, [r0, #16]
 8005d40:	b005      	add	sp, #20
 8005d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d46:	f843 2b04 	str.w	r2, [r3], #4
 8005d4a:	e7db      	b.n	8005d04 <__multiply+0x50>
 8005d4c:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d50:	f1ba 0f00 	cmp.w	sl, #0
 8005d54:	d020      	beq.n	8005d98 <__multiply+0xe4>
 8005d56:	f105 0e14 	add.w	lr, r5, #20
 8005d5a:	46b1      	mov	r9, r6
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005d62:	f8d9 b000 	ldr.w	fp, [r9]
 8005d66:	b2a1      	uxth	r1, r4
 8005d68:	fa1f fb8b 	uxth.w	fp, fp
 8005d6c:	fb0a b101 	mla	r1, sl, r1, fp
 8005d70:	4411      	add	r1, r2
 8005d72:	f8d9 2000 	ldr.w	r2, [r9]
 8005d76:	0c24      	lsrs	r4, r4, #16
 8005d78:	0c12      	lsrs	r2, r2, #16
 8005d7a:	fb0a 2404 	mla	r4, sl, r4, r2
 8005d7e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005d82:	b289      	uxth	r1, r1
 8005d84:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005d88:	45f4      	cmp	ip, lr
 8005d8a:	f849 1b04 	str.w	r1, [r9], #4
 8005d8e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005d92:	d8e4      	bhi.n	8005d5e <__multiply+0xaa>
 8005d94:	9901      	ldr	r1, [sp, #4]
 8005d96:	5072      	str	r2, [r6, r1]
 8005d98:	9a03      	ldr	r2, [sp, #12]
 8005d9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d9e:	3304      	adds	r3, #4
 8005da0:	f1b9 0f00 	cmp.w	r9, #0
 8005da4:	d01f      	beq.n	8005de6 <__multiply+0x132>
 8005da6:	6834      	ldr	r4, [r6, #0]
 8005da8:	f105 0114 	add.w	r1, r5, #20
 8005dac:	46b6      	mov	lr, r6
 8005dae:	f04f 0a00 	mov.w	sl, #0
 8005db2:	880a      	ldrh	r2, [r1, #0]
 8005db4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005db8:	fb09 b202 	mla	r2, r9, r2, fp
 8005dbc:	4492      	add	sl, r2
 8005dbe:	b2a4      	uxth	r4, r4
 8005dc0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005dc4:	f84e 4b04 	str.w	r4, [lr], #4
 8005dc8:	f851 4b04 	ldr.w	r4, [r1], #4
 8005dcc:	f8be 2000 	ldrh.w	r2, [lr]
 8005dd0:	0c24      	lsrs	r4, r4, #16
 8005dd2:	fb09 2404 	mla	r4, r9, r4, r2
 8005dd6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005dda:	458c      	cmp	ip, r1
 8005ddc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005de0:	d8e7      	bhi.n	8005db2 <__multiply+0xfe>
 8005de2:	9a01      	ldr	r2, [sp, #4]
 8005de4:	50b4      	str	r4, [r6, r2]
 8005de6:	3604      	adds	r6, #4
 8005de8:	e7a3      	b.n	8005d32 <__multiply+0x7e>
 8005dea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1a5      	bne.n	8005d3e <__multiply+0x8a>
 8005df2:	3f01      	subs	r7, #1
 8005df4:	e7a1      	b.n	8005d3a <__multiply+0x86>
 8005df6:	bf00      	nop
 8005df8:	0800743b 	.word	0x0800743b
 8005dfc:	0800744c 	.word	0x0800744c

08005e00 <__pow5mult>:
 8005e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e04:	4615      	mov	r5, r2
 8005e06:	f012 0203 	ands.w	r2, r2, #3
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	460f      	mov	r7, r1
 8005e0e:	d007      	beq.n	8005e20 <__pow5mult+0x20>
 8005e10:	4c25      	ldr	r4, [pc, #148]	; (8005ea8 <__pow5mult+0xa8>)
 8005e12:	3a01      	subs	r2, #1
 8005e14:	2300      	movs	r3, #0
 8005e16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e1a:	f7ff fe9b 	bl	8005b54 <__multadd>
 8005e1e:	4607      	mov	r7, r0
 8005e20:	10ad      	asrs	r5, r5, #2
 8005e22:	d03d      	beq.n	8005ea0 <__pow5mult+0xa0>
 8005e24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e26:	b97c      	cbnz	r4, 8005e48 <__pow5mult+0x48>
 8005e28:	2010      	movs	r0, #16
 8005e2a:	f7ff fe29 	bl	8005a80 <malloc>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	6270      	str	r0, [r6, #36]	; 0x24
 8005e32:	b928      	cbnz	r0, 8005e40 <__pow5mult+0x40>
 8005e34:	4b1d      	ldr	r3, [pc, #116]	; (8005eac <__pow5mult+0xac>)
 8005e36:	481e      	ldr	r0, [pc, #120]	; (8005eb0 <__pow5mult+0xb0>)
 8005e38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005e3c:	f000 fa70 	bl	8006320 <__assert_func>
 8005e40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e44:	6004      	str	r4, [r0, #0]
 8005e46:	60c4      	str	r4, [r0, #12]
 8005e48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e50:	b94c      	cbnz	r4, 8005e66 <__pow5mult+0x66>
 8005e52:	f240 2171 	movw	r1, #625	; 0x271
 8005e56:	4630      	mov	r0, r6
 8005e58:	f7ff ff16 	bl	8005c88 <__i2b>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e62:	4604      	mov	r4, r0
 8005e64:	6003      	str	r3, [r0, #0]
 8005e66:	f04f 0900 	mov.w	r9, #0
 8005e6a:	07eb      	lsls	r3, r5, #31
 8005e6c:	d50a      	bpl.n	8005e84 <__pow5mult+0x84>
 8005e6e:	4639      	mov	r1, r7
 8005e70:	4622      	mov	r2, r4
 8005e72:	4630      	mov	r0, r6
 8005e74:	f7ff ff1e 	bl	8005cb4 <__multiply>
 8005e78:	4639      	mov	r1, r7
 8005e7a:	4680      	mov	r8, r0
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	f7ff fe47 	bl	8005b10 <_Bfree>
 8005e82:	4647      	mov	r7, r8
 8005e84:	106d      	asrs	r5, r5, #1
 8005e86:	d00b      	beq.n	8005ea0 <__pow5mult+0xa0>
 8005e88:	6820      	ldr	r0, [r4, #0]
 8005e8a:	b938      	cbnz	r0, 8005e9c <__pow5mult+0x9c>
 8005e8c:	4622      	mov	r2, r4
 8005e8e:	4621      	mov	r1, r4
 8005e90:	4630      	mov	r0, r6
 8005e92:	f7ff ff0f 	bl	8005cb4 <__multiply>
 8005e96:	6020      	str	r0, [r4, #0]
 8005e98:	f8c0 9000 	str.w	r9, [r0]
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	e7e4      	b.n	8005e6a <__pow5mult+0x6a>
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ea6:	bf00      	nop
 8005ea8:	080075a0 	.word	0x080075a0
 8005eac:	080073c5 	.word	0x080073c5
 8005eb0:	0800744c 	.word	0x0800744c

08005eb4 <__lshift>:
 8005eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb8:	460c      	mov	r4, r1
 8005eba:	6849      	ldr	r1, [r1, #4]
 8005ebc:	6923      	ldr	r3, [r4, #16]
 8005ebe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ec2:	68a3      	ldr	r3, [r4, #8]
 8005ec4:	4607      	mov	r7, r0
 8005ec6:	4691      	mov	r9, r2
 8005ec8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ecc:	f108 0601 	add.w	r6, r8, #1
 8005ed0:	42b3      	cmp	r3, r6
 8005ed2:	db0b      	blt.n	8005eec <__lshift+0x38>
 8005ed4:	4638      	mov	r0, r7
 8005ed6:	f7ff fddb 	bl	8005a90 <_Balloc>
 8005eda:	4605      	mov	r5, r0
 8005edc:	b948      	cbnz	r0, 8005ef2 <__lshift+0x3e>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	4b28      	ldr	r3, [pc, #160]	; (8005f84 <__lshift+0xd0>)
 8005ee2:	4829      	ldr	r0, [pc, #164]	; (8005f88 <__lshift+0xd4>)
 8005ee4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005ee8:	f000 fa1a 	bl	8006320 <__assert_func>
 8005eec:	3101      	adds	r1, #1
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	e7ee      	b.n	8005ed0 <__lshift+0x1c>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f100 0114 	add.w	r1, r0, #20
 8005ef8:	f100 0210 	add.w	r2, r0, #16
 8005efc:	4618      	mov	r0, r3
 8005efe:	4553      	cmp	r3, sl
 8005f00:	db33      	blt.n	8005f6a <__lshift+0xb6>
 8005f02:	6920      	ldr	r0, [r4, #16]
 8005f04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f08:	f104 0314 	add.w	r3, r4, #20
 8005f0c:	f019 091f 	ands.w	r9, r9, #31
 8005f10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f18:	d02b      	beq.n	8005f72 <__lshift+0xbe>
 8005f1a:	f1c9 0e20 	rsb	lr, r9, #32
 8005f1e:	468a      	mov	sl, r1
 8005f20:	2200      	movs	r2, #0
 8005f22:	6818      	ldr	r0, [r3, #0]
 8005f24:	fa00 f009 	lsl.w	r0, r0, r9
 8005f28:	4302      	orrs	r2, r0
 8005f2a:	f84a 2b04 	str.w	r2, [sl], #4
 8005f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f32:	459c      	cmp	ip, r3
 8005f34:	fa22 f20e 	lsr.w	r2, r2, lr
 8005f38:	d8f3      	bhi.n	8005f22 <__lshift+0x6e>
 8005f3a:	ebac 0304 	sub.w	r3, ip, r4
 8005f3e:	3b15      	subs	r3, #21
 8005f40:	f023 0303 	bic.w	r3, r3, #3
 8005f44:	3304      	adds	r3, #4
 8005f46:	f104 0015 	add.w	r0, r4, #21
 8005f4a:	4584      	cmp	ip, r0
 8005f4c:	bf38      	it	cc
 8005f4e:	2304      	movcc	r3, #4
 8005f50:	50ca      	str	r2, [r1, r3]
 8005f52:	b10a      	cbz	r2, 8005f58 <__lshift+0xa4>
 8005f54:	f108 0602 	add.w	r6, r8, #2
 8005f58:	3e01      	subs	r6, #1
 8005f5a:	4638      	mov	r0, r7
 8005f5c:	612e      	str	r6, [r5, #16]
 8005f5e:	4621      	mov	r1, r4
 8005f60:	f7ff fdd6 	bl	8005b10 <_Bfree>
 8005f64:	4628      	mov	r0, r5
 8005f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f6e:	3301      	adds	r3, #1
 8005f70:	e7c5      	b.n	8005efe <__lshift+0x4a>
 8005f72:	3904      	subs	r1, #4
 8005f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f78:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f7c:	459c      	cmp	ip, r3
 8005f7e:	d8f9      	bhi.n	8005f74 <__lshift+0xc0>
 8005f80:	e7ea      	b.n	8005f58 <__lshift+0xa4>
 8005f82:	bf00      	nop
 8005f84:	0800743b 	.word	0x0800743b
 8005f88:	0800744c 	.word	0x0800744c

08005f8c <__mcmp>:
 8005f8c:	b530      	push	{r4, r5, lr}
 8005f8e:	6902      	ldr	r2, [r0, #16]
 8005f90:	690c      	ldr	r4, [r1, #16]
 8005f92:	1b12      	subs	r2, r2, r4
 8005f94:	d10e      	bne.n	8005fb4 <__mcmp+0x28>
 8005f96:	f100 0314 	add.w	r3, r0, #20
 8005f9a:	3114      	adds	r1, #20
 8005f9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005fa0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005fa4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005fa8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005fac:	42a5      	cmp	r5, r4
 8005fae:	d003      	beq.n	8005fb8 <__mcmp+0x2c>
 8005fb0:	d305      	bcc.n	8005fbe <__mcmp+0x32>
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	bd30      	pop	{r4, r5, pc}
 8005fb8:	4283      	cmp	r3, r0
 8005fba:	d3f3      	bcc.n	8005fa4 <__mcmp+0x18>
 8005fbc:	e7fa      	b.n	8005fb4 <__mcmp+0x28>
 8005fbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fc2:	e7f7      	b.n	8005fb4 <__mcmp+0x28>

08005fc4 <__mdiff>:
 8005fc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc8:	460c      	mov	r4, r1
 8005fca:	4606      	mov	r6, r0
 8005fcc:	4611      	mov	r1, r2
 8005fce:	4620      	mov	r0, r4
 8005fd0:	4617      	mov	r7, r2
 8005fd2:	f7ff ffdb 	bl	8005f8c <__mcmp>
 8005fd6:	1e05      	subs	r5, r0, #0
 8005fd8:	d110      	bne.n	8005ffc <__mdiff+0x38>
 8005fda:	4629      	mov	r1, r5
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f7ff fd57 	bl	8005a90 <_Balloc>
 8005fe2:	b930      	cbnz	r0, 8005ff2 <__mdiff+0x2e>
 8005fe4:	4b39      	ldr	r3, [pc, #228]	; (80060cc <__mdiff+0x108>)
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	f240 2132 	movw	r1, #562	; 0x232
 8005fec:	4838      	ldr	r0, [pc, #224]	; (80060d0 <__mdiff+0x10c>)
 8005fee:	f000 f997 	bl	8006320 <__assert_func>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005ff8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffc:	bfa4      	itt	ge
 8005ffe:	463b      	movge	r3, r7
 8006000:	4627      	movge	r7, r4
 8006002:	4630      	mov	r0, r6
 8006004:	6879      	ldr	r1, [r7, #4]
 8006006:	bfa6      	itte	ge
 8006008:	461c      	movge	r4, r3
 800600a:	2500      	movge	r5, #0
 800600c:	2501      	movlt	r5, #1
 800600e:	f7ff fd3f 	bl	8005a90 <_Balloc>
 8006012:	b920      	cbnz	r0, 800601e <__mdiff+0x5a>
 8006014:	4b2d      	ldr	r3, [pc, #180]	; (80060cc <__mdiff+0x108>)
 8006016:	4602      	mov	r2, r0
 8006018:	f44f 7110 	mov.w	r1, #576	; 0x240
 800601c:	e7e6      	b.n	8005fec <__mdiff+0x28>
 800601e:	693e      	ldr	r6, [r7, #16]
 8006020:	60c5      	str	r5, [r0, #12]
 8006022:	6925      	ldr	r5, [r4, #16]
 8006024:	f107 0114 	add.w	r1, r7, #20
 8006028:	f104 0914 	add.w	r9, r4, #20
 800602c:	f100 0e14 	add.w	lr, r0, #20
 8006030:	f107 0210 	add.w	r2, r7, #16
 8006034:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006038:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800603c:	46f2      	mov	sl, lr
 800603e:	2700      	movs	r7, #0
 8006040:	f859 3b04 	ldr.w	r3, [r9], #4
 8006044:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006048:	fa1f f883 	uxth.w	r8, r3
 800604c:	fa17 f78b 	uxtah	r7, r7, fp
 8006050:	0c1b      	lsrs	r3, r3, #16
 8006052:	eba7 0808 	sub.w	r8, r7, r8
 8006056:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800605a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800605e:	fa1f f888 	uxth.w	r8, r8
 8006062:	141f      	asrs	r7, r3, #16
 8006064:	454d      	cmp	r5, r9
 8006066:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800606a:	f84a 3b04 	str.w	r3, [sl], #4
 800606e:	d8e7      	bhi.n	8006040 <__mdiff+0x7c>
 8006070:	1b2b      	subs	r3, r5, r4
 8006072:	3b15      	subs	r3, #21
 8006074:	f023 0303 	bic.w	r3, r3, #3
 8006078:	3304      	adds	r3, #4
 800607a:	3415      	adds	r4, #21
 800607c:	42a5      	cmp	r5, r4
 800607e:	bf38      	it	cc
 8006080:	2304      	movcc	r3, #4
 8006082:	4419      	add	r1, r3
 8006084:	4473      	add	r3, lr
 8006086:	469e      	mov	lr, r3
 8006088:	460d      	mov	r5, r1
 800608a:	4565      	cmp	r5, ip
 800608c:	d30e      	bcc.n	80060ac <__mdiff+0xe8>
 800608e:	f10c 0203 	add.w	r2, ip, #3
 8006092:	1a52      	subs	r2, r2, r1
 8006094:	f022 0203 	bic.w	r2, r2, #3
 8006098:	3903      	subs	r1, #3
 800609a:	458c      	cmp	ip, r1
 800609c:	bf38      	it	cc
 800609e:	2200      	movcc	r2, #0
 80060a0:	441a      	add	r2, r3
 80060a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80060a6:	b17b      	cbz	r3, 80060c8 <__mdiff+0x104>
 80060a8:	6106      	str	r6, [r0, #16]
 80060aa:	e7a5      	b.n	8005ff8 <__mdiff+0x34>
 80060ac:	f855 8b04 	ldr.w	r8, [r5], #4
 80060b0:	fa17 f488 	uxtah	r4, r7, r8
 80060b4:	1422      	asrs	r2, r4, #16
 80060b6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80060ba:	b2a4      	uxth	r4, r4
 80060bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80060c0:	f84e 4b04 	str.w	r4, [lr], #4
 80060c4:	1417      	asrs	r7, r2, #16
 80060c6:	e7e0      	b.n	800608a <__mdiff+0xc6>
 80060c8:	3e01      	subs	r6, #1
 80060ca:	e7ea      	b.n	80060a2 <__mdiff+0xde>
 80060cc:	0800743b 	.word	0x0800743b
 80060d0:	0800744c 	.word	0x0800744c

080060d4 <__d2b>:
 80060d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060d8:	4689      	mov	r9, r1
 80060da:	2101      	movs	r1, #1
 80060dc:	ec57 6b10 	vmov	r6, r7, d0
 80060e0:	4690      	mov	r8, r2
 80060e2:	f7ff fcd5 	bl	8005a90 <_Balloc>
 80060e6:	4604      	mov	r4, r0
 80060e8:	b930      	cbnz	r0, 80060f8 <__d2b+0x24>
 80060ea:	4602      	mov	r2, r0
 80060ec:	4b25      	ldr	r3, [pc, #148]	; (8006184 <__d2b+0xb0>)
 80060ee:	4826      	ldr	r0, [pc, #152]	; (8006188 <__d2b+0xb4>)
 80060f0:	f240 310a 	movw	r1, #778	; 0x30a
 80060f4:	f000 f914 	bl	8006320 <__assert_func>
 80060f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80060fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006100:	bb35      	cbnz	r5, 8006150 <__d2b+0x7c>
 8006102:	2e00      	cmp	r6, #0
 8006104:	9301      	str	r3, [sp, #4]
 8006106:	d028      	beq.n	800615a <__d2b+0x86>
 8006108:	4668      	mov	r0, sp
 800610a:	9600      	str	r6, [sp, #0]
 800610c:	f7ff fd8c 	bl	8005c28 <__lo0bits>
 8006110:	9900      	ldr	r1, [sp, #0]
 8006112:	b300      	cbz	r0, 8006156 <__d2b+0x82>
 8006114:	9a01      	ldr	r2, [sp, #4]
 8006116:	f1c0 0320 	rsb	r3, r0, #32
 800611a:	fa02 f303 	lsl.w	r3, r2, r3
 800611e:	430b      	orrs	r3, r1
 8006120:	40c2      	lsrs	r2, r0
 8006122:	6163      	str	r3, [r4, #20]
 8006124:	9201      	str	r2, [sp, #4]
 8006126:	9b01      	ldr	r3, [sp, #4]
 8006128:	61a3      	str	r3, [r4, #24]
 800612a:	2b00      	cmp	r3, #0
 800612c:	bf14      	ite	ne
 800612e:	2202      	movne	r2, #2
 8006130:	2201      	moveq	r2, #1
 8006132:	6122      	str	r2, [r4, #16]
 8006134:	b1d5      	cbz	r5, 800616c <__d2b+0x98>
 8006136:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800613a:	4405      	add	r5, r0
 800613c:	f8c9 5000 	str.w	r5, [r9]
 8006140:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006144:	f8c8 0000 	str.w	r0, [r8]
 8006148:	4620      	mov	r0, r4
 800614a:	b003      	add	sp, #12
 800614c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006150:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006154:	e7d5      	b.n	8006102 <__d2b+0x2e>
 8006156:	6161      	str	r1, [r4, #20]
 8006158:	e7e5      	b.n	8006126 <__d2b+0x52>
 800615a:	a801      	add	r0, sp, #4
 800615c:	f7ff fd64 	bl	8005c28 <__lo0bits>
 8006160:	9b01      	ldr	r3, [sp, #4]
 8006162:	6163      	str	r3, [r4, #20]
 8006164:	2201      	movs	r2, #1
 8006166:	6122      	str	r2, [r4, #16]
 8006168:	3020      	adds	r0, #32
 800616a:	e7e3      	b.n	8006134 <__d2b+0x60>
 800616c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006170:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006174:	f8c9 0000 	str.w	r0, [r9]
 8006178:	6918      	ldr	r0, [r3, #16]
 800617a:	f7ff fd35 	bl	8005be8 <__hi0bits>
 800617e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006182:	e7df      	b.n	8006144 <__d2b+0x70>
 8006184:	0800743b 	.word	0x0800743b
 8006188:	0800744c 	.word	0x0800744c

0800618c <_calloc_r>:
 800618c:	b513      	push	{r0, r1, r4, lr}
 800618e:	434a      	muls	r2, r1
 8006190:	4611      	mov	r1, r2
 8006192:	9201      	str	r2, [sp, #4]
 8006194:	f000 f85a 	bl	800624c <_malloc_r>
 8006198:	4604      	mov	r4, r0
 800619a:	b118      	cbz	r0, 80061a4 <_calloc_r+0x18>
 800619c:	9a01      	ldr	r2, [sp, #4]
 800619e:	2100      	movs	r1, #0
 80061a0:	f7fe f980 	bl	80044a4 <memset>
 80061a4:	4620      	mov	r0, r4
 80061a6:	b002      	add	sp, #8
 80061a8:	bd10      	pop	{r4, pc}
	...

080061ac <_free_r>:
 80061ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061ae:	2900      	cmp	r1, #0
 80061b0:	d048      	beq.n	8006244 <_free_r+0x98>
 80061b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061b6:	9001      	str	r0, [sp, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f1a1 0404 	sub.w	r4, r1, #4
 80061be:	bfb8      	it	lt
 80061c0:	18e4      	addlt	r4, r4, r3
 80061c2:	f000 f8ef 	bl	80063a4 <__malloc_lock>
 80061c6:	4a20      	ldr	r2, [pc, #128]	; (8006248 <_free_r+0x9c>)
 80061c8:	9801      	ldr	r0, [sp, #4]
 80061ca:	6813      	ldr	r3, [r2, #0]
 80061cc:	4615      	mov	r5, r2
 80061ce:	b933      	cbnz	r3, 80061de <_free_r+0x32>
 80061d0:	6063      	str	r3, [r4, #4]
 80061d2:	6014      	str	r4, [r2, #0]
 80061d4:	b003      	add	sp, #12
 80061d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061da:	f000 b8e9 	b.w	80063b0 <__malloc_unlock>
 80061de:	42a3      	cmp	r3, r4
 80061e0:	d90b      	bls.n	80061fa <_free_r+0x4e>
 80061e2:	6821      	ldr	r1, [r4, #0]
 80061e4:	1862      	adds	r2, r4, r1
 80061e6:	4293      	cmp	r3, r2
 80061e8:	bf04      	itt	eq
 80061ea:	681a      	ldreq	r2, [r3, #0]
 80061ec:	685b      	ldreq	r3, [r3, #4]
 80061ee:	6063      	str	r3, [r4, #4]
 80061f0:	bf04      	itt	eq
 80061f2:	1852      	addeq	r2, r2, r1
 80061f4:	6022      	streq	r2, [r4, #0]
 80061f6:	602c      	str	r4, [r5, #0]
 80061f8:	e7ec      	b.n	80061d4 <_free_r+0x28>
 80061fa:	461a      	mov	r2, r3
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	b10b      	cbz	r3, 8006204 <_free_r+0x58>
 8006200:	42a3      	cmp	r3, r4
 8006202:	d9fa      	bls.n	80061fa <_free_r+0x4e>
 8006204:	6811      	ldr	r1, [r2, #0]
 8006206:	1855      	adds	r5, r2, r1
 8006208:	42a5      	cmp	r5, r4
 800620a:	d10b      	bne.n	8006224 <_free_r+0x78>
 800620c:	6824      	ldr	r4, [r4, #0]
 800620e:	4421      	add	r1, r4
 8006210:	1854      	adds	r4, r2, r1
 8006212:	42a3      	cmp	r3, r4
 8006214:	6011      	str	r1, [r2, #0]
 8006216:	d1dd      	bne.n	80061d4 <_free_r+0x28>
 8006218:	681c      	ldr	r4, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	6053      	str	r3, [r2, #4]
 800621e:	4421      	add	r1, r4
 8006220:	6011      	str	r1, [r2, #0]
 8006222:	e7d7      	b.n	80061d4 <_free_r+0x28>
 8006224:	d902      	bls.n	800622c <_free_r+0x80>
 8006226:	230c      	movs	r3, #12
 8006228:	6003      	str	r3, [r0, #0]
 800622a:	e7d3      	b.n	80061d4 <_free_r+0x28>
 800622c:	6825      	ldr	r5, [r4, #0]
 800622e:	1961      	adds	r1, r4, r5
 8006230:	428b      	cmp	r3, r1
 8006232:	bf04      	itt	eq
 8006234:	6819      	ldreq	r1, [r3, #0]
 8006236:	685b      	ldreq	r3, [r3, #4]
 8006238:	6063      	str	r3, [r4, #4]
 800623a:	bf04      	itt	eq
 800623c:	1949      	addeq	r1, r1, r5
 800623e:	6021      	streq	r1, [r4, #0]
 8006240:	6054      	str	r4, [r2, #4]
 8006242:	e7c7      	b.n	80061d4 <_free_r+0x28>
 8006244:	b003      	add	sp, #12
 8006246:	bd30      	pop	{r4, r5, pc}
 8006248:	20000260 	.word	0x20000260

0800624c <_malloc_r>:
 800624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624e:	1ccd      	adds	r5, r1, #3
 8006250:	f025 0503 	bic.w	r5, r5, #3
 8006254:	3508      	adds	r5, #8
 8006256:	2d0c      	cmp	r5, #12
 8006258:	bf38      	it	cc
 800625a:	250c      	movcc	r5, #12
 800625c:	2d00      	cmp	r5, #0
 800625e:	4606      	mov	r6, r0
 8006260:	db01      	blt.n	8006266 <_malloc_r+0x1a>
 8006262:	42a9      	cmp	r1, r5
 8006264:	d903      	bls.n	800626e <_malloc_r+0x22>
 8006266:	230c      	movs	r3, #12
 8006268:	6033      	str	r3, [r6, #0]
 800626a:	2000      	movs	r0, #0
 800626c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800626e:	f000 f899 	bl	80063a4 <__malloc_lock>
 8006272:	4921      	ldr	r1, [pc, #132]	; (80062f8 <_malloc_r+0xac>)
 8006274:	680a      	ldr	r2, [r1, #0]
 8006276:	4614      	mov	r4, r2
 8006278:	b99c      	cbnz	r4, 80062a2 <_malloc_r+0x56>
 800627a:	4f20      	ldr	r7, [pc, #128]	; (80062fc <_malloc_r+0xb0>)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	b923      	cbnz	r3, 800628a <_malloc_r+0x3e>
 8006280:	4621      	mov	r1, r4
 8006282:	4630      	mov	r0, r6
 8006284:	f000 f83c 	bl	8006300 <_sbrk_r>
 8006288:	6038      	str	r0, [r7, #0]
 800628a:	4629      	mov	r1, r5
 800628c:	4630      	mov	r0, r6
 800628e:	f000 f837 	bl	8006300 <_sbrk_r>
 8006292:	1c43      	adds	r3, r0, #1
 8006294:	d123      	bne.n	80062de <_malloc_r+0x92>
 8006296:	230c      	movs	r3, #12
 8006298:	6033      	str	r3, [r6, #0]
 800629a:	4630      	mov	r0, r6
 800629c:	f000 f888 	bl	80063b0 <__malloc_unlock>
 80062a0:	e7e3      	b.n	800626a <_malloc_r+0x1e>
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	1b5b      	subs	r3, r3, r5
 80062a6:	d417      	bmi.n	80062d8 <_malloc_r+0x8c>
 80062a8:	2b0b      	cmp	r3, #11
 80062aa:	d903      	bls.n	80062b4 <_malloc_r+0x68>
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	441c      	add	r4, r3
 80062b0:	6025      	str	r5, [r4, #0]
 80062b2:	e004      	b.n	80062be <_malloc_r+0x72>
 80062b4:	6863      	ldr	r3, [r4, #4]
 80062b6:	42a2      	cmp	r2, r4
 80062b8:	bf0c      	ite	eq
 80062ba:	600b      	streq	r3, [r1, #0]
 80062bc:	6053      	strne	r3, [r2, #4]
 80062be:	4630      	mov	r0, r6
 80062c0:	f000 f876 	bl	80063b0 <__malloc_unlock>
 80062c4:	f104 000b 	add.w	r0, r4, #11
 80062c8:	1d23      	adds	r3, r4, #4
 80062ca:	f020 0007 	bic.w	r0, r0, #7
 80062ce:	1ac2      	subs	r2, r0, r3
 80062d0:	d0cc      	beq.n	800626c <_malloc_r+0x20>
 80062d2:	1a1b      	subs	r3, r3, r0
 80062d4:	50a3      	str	r3, [r4, r2]
 80062d6:	e7c9      	b.n	800626c <_malloc_r+0x20>
 80062d8:	4622      	mov	r2, r4
 80062da:	6864      	ldr	r4, [r4, #4]
 80062dc:	e7cc      	b.n	8006278 <_malloc_r+0x2c>
 80062de:	1cc4      	adds	r4, r0, #3
 80062e0:	f024 0403 	bic.w	r4, r4, #3
 80062e4:	42a0      	cmp	r0, r4
 80062e6:	d0e3      	beq.n	80062b0 <_malloc_r+0x64>
 80062e8:	1a21      	subs	r1, r4, r0
 80062ea:	4630      	mov	r0, r6
 80062ec:	f000 f808 	bl	8006300 <_sbrk_r>
 80062f0:	3001      	adds	r0, #1
 80062f2:	d1dd      	bne.n	80062b0 <_malloc_r+0x64>
 80062f4:	e7cf      	b.n	8006296 <_malloc_r+0x4a>
 80062f6:	bf00      	nop
 80062f8:	20000260 	.word	0x20000260
 80062fc:	20000264 	.word	0x20000264

08006300 <_sbrk_r>:
 8006300:	b538      	push	{r3, r4, r5, lr}
 8006302:	4d06      	ldr	r5, [pc, #24]	; (800631c <_sbrk_r+0x1c>)
 8006304:	2300      	movs	r3, #0
 8006306:	4604      	mov	r4, r0
 8006308:	4608      	mov	r0, r1
 800630a:	602b      	str	r3, [r5, #0]
 800630c:	f7fb fdd8 	bl	8001ec0 <_sbrk>
 8006310:	1c43      	adds	r3, r0, #1
 8006312:	d102      	bne.n	800631a <_sbrk_r+0x1a>
 8006314:	682b      	ldr	r3, [r5, #0]
 8006316:	b103      	cbz	r3, 800631a <_sbrk_r+0x1a>
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	bd38      	pop	{r3, r4, r5, pc}
 800631c:	20000350 	.word	0x20000350

08006320 <__assert_func>:
 8006320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006322:	4614      	mov	r4, r2
 8006324:	461a      	mov	r2, r3
 8006326:	4b09      	ldr	r3, [pc, #36]	; (800634c <__assert_func+0x2c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4605      	mov	r5, r0
 800632c:	68d8      	ldr	r0, [r3, #12]
 800632e:	b14c      	cbz	r4, 8006344 <__assert_func+0x24>
 8006330:	4b07      	ldr	r3, [pc, #28]	; (8006350 <__assert_func+0x30>)
 8006332:	9100      	str	r1, [sp, #0]
 8006334:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006338:	4906      	ldr	r1, [pc, #24]	; (8006354 <__assert_func+0x34>)
 800633a:	462b      	mov	r3, r5
 800633c:	f000 f80e 	bl	800635c <fiprintf>
 8006340:	f000 fa64 	bl	800680c <abort>
 8006344:	4b04      	ldr	r3, [pc, #16]	; (8006358 <__assert_func+0x38>)
 8006346:	461c      	mov	r4, r3
 8006348:	e7f3      	b.n	8006332 <__assert_func+0x12>
 800634a:	bf00      	nop
 800634c:	2000000c 	.word	0x2000000c
 8006350:	080075ac 	.word	0x080075ac
 8006354:	080075b9 	.word	0x080075b9
 8006358:	080075e7 	.word	0x080075e7

0800635c <fiprintf>:
 800635c:	b40e      	push	{r1, r2, r3}
 800635e:	b503      	push	{r0, r1, lr}
 8006360:	4601      	mov	r1, r0
 8006362:	ab03      	add	r3, sp, #12
 8006364:	4805      	ldr	r0, [pc, #20]	; (800637c <fiprintf+0x20>)
 8006366:	f853 2b04 	ldr.w	r2, [r3], #4
 800636a:	6800      	ldr	r0, [r0, #0]
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	f000 f84f 	bl	8006410 <_vfiprintf_r>
 8006372:	b002      	add	sp, #8
 8006374:	f85d eb04 	ldr.w	lr, [sp], #4
 8006378:	b003      	add	sp, #12
 800637a:	4770      	bx	lr
 800637c:	2000000c 	.word	0x2000000c

08006380 <__ascii_mbtowc>:
 8006380:	b082      	sub	sp, #8
 8006382:	b901      	cbnz	r1, 8006386 <__ascii_mbtowc+0x6>
 8006384:	a901      	add	r1, sp, #4
 8006386:	b142      	cbz	r2, 800639a <__ascii_mbtowc+0x1a>
 8006388:	b14b      	cbz	r3, 800639e <__ascii_mbtowc+0x1e>
 800638a:	7813      	ldrb	r3, [r2, #0]
 800638c:	600b      	str	r3, [r1, #0]
 800638e:	7812      	ldrb	r2, [r2, #0]
 8006390:	1e10      	subs	r0, r2, #0
 8006392:	bf18      	it	ne
 8006394:	2001      	movne	r0, #1
 8006396:	b002      	add	sp, #8
 8006398:	4770      	bx	lr
 800639a:	4610      	mov	r0, r2
 800639c:	e7fb      	b.n	8006396 <__ascii_mbtowc+0x16>
 800639e:	f06f 0001 	mvn.w	r0, #1
 80063a2:	e7f8      	b.n	8006396 <__ascii_mbtowc+0x16>

080063a4 <__malloc_lock>:
 80063a4:	4801      	ldr	r0, [pc, #4]	; (80063ac <__malloc_lock+0x8>)
 80063a6:	f000 bbf1 	b.w	8006b8c <__retarget_lock_acquire_recursive>
 80063aa:	bf00      	nop
 80063ac:	20000358 	.word	0x20000358

080063b0 <__malloc_unlock>:
 80063b0:	4801      	ldr	r0, [pc, #4]	; (80063b8 <__malloc_unlock+0x8>)
 80063b2:	f000 bbec 	b.w	8006b8e <__retarget_lock_release_recursive>
 80063b6:	bf00      	nop
 80063b8:	20000358 	.word	0x20000358

080063bc <__sfputc_r>:
 80063bc:	6893      	ldr	r3, [r2, #8]
 80063be:	3b01      	subs	r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	b410      	push	{r4}
 80063c4:	6093      	str	r3, [r2, #8]
 80063c6:	da08      	bge.n	80063da <__sfputc_r+0x1e>
 80063c8:	6994      	ldr	r4, [r2, #24]
 80063ca:	42a3      	cmp	r3, r4
 80063cc:	db01      	blt.n	80063d2 <__sfputc_r+0x16>
 80063ce:	290a      	cmp	r1, #10
 80063d0:	d103      	bne.n	80063da <__sfputc_r+0x1e>
 80063d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063d6:	f000 b94b 	b.w	8006670 <__swbuf_r>
 80063da:	6813      	ldr	r3, [r2, #0]
 80063dc:	1c58      	adds	r0, r3, #1
 80063de:	6010      	str	r0, [r2, #0]
 80063e0:	7019      	strb	r1, [r3, #0]
 80063e2:	4608      	mov	r0, r1
 80063e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <__sfputs_r>:
 80063ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ec:	4606      	mov	r6, r0
 80063ee:	460f      	mov	r7, r1
 80063f0:	4614      	mov	r4, r2
 80063f2:	18d5      	adds	r5, r2, r3
 80063f4:	42ac      	cmp	r4, r5
 80063f6:	d101      	bne.n	80063fc <__sfputs_r+0x12>
 80063f8:	2000      	movs	r0, #0
 80063fa:	e007      	b.n	800640c <__sfputs_r+0x22>
 80063fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006400:	463a      	mov	r2, r7
 8006402:	4630      	mov	r0, r6
 8006404:	f7ff ffda 	bl	80063bc <__sfputc_r>
 8006408:	1c43      	adds	r3, r0, #1
 800640a:	d1f3      	bne.n	80063f4 <__sfputs_r+0xa>
 800640c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006410 <_vfiprintf_r>:
 8006410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006414:	460d      	mov	r5, r1
 8006416:	b09d      	sub	sp, #116	; 0x74
 8006418:	4614      	mov	r4, r2
 800641a:	4698      	mov	r8, r3
 800641c:	4606      	mov	r6, r0
 800641e:	b118      	cbz	r0, 8006428 <_vfiprintf_r+0x18>
 8006420:	6983      	ldr	r3, [r0, #24]
 8006422:	b90b      	cbnz	r3, 8006428 <_vfiprintf_r+0x18>
 8006424:	f000 fb14 	bl	8006a50 <__sinit>
 8006428:	4b89      	ldr	r3, [pc, #548]	; (8006650 <_vfiprintf_r+0x240>)
 800642a:	429d      	cmp	r5, r3
 800642c:	d11b      	bne.n	8006466 <_vfiprintf_r+0x56>
 800642e:	6875      	ldr	r5, [r6, #4]
 8006430:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006432:	07d9      	lsls	r1, r3, #31
 8006434:	d405      	bmi.n	8006442 <_vfiprintf_r+0x32>
 8006436:	89ab      	ldrh	r3, [r5, #12]
 8006438:	059a      	lsls	r2, r3, #22
 800643a:	d402      	bmi.n	8006442 <_vfiprintf_r+0x32>
 800643c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800643e:	f000 fba5 	bl	8006b8c <__retarget_lock_acquire_recursive>
 8006442:	89ab      	ldrh	r3, [r5, #12]
 8006444:	071b      	lsls	r3, r3, #28
 8006446:	d501      	bpl.n	800644c <_vfiprintf_r+0x3c>
 8006448:	692b      	ldr	r3, [r5, #16]
 800644a:	b9eb      	cbnz	r3, 8006488 <_vfiprintf_r+0x78>
 800644c:	4629      	mov	r1, r5
 800644e:	4630      	mov	r0, r6
 8006450:	f000 f96e 	bl	8006730 <__swsetup_r>
 8006454:	b1c0      	cbz	r0, 8006488 <_vfiprintf_r+0x78>
 8006456:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006458:	07dc      	lsls	r4, r3, #31
 800645a:	d50e      	bpl.n	800647a <_vfiprintf_r+0x6a>
 800645c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006460:	b01d      	add	sp, #116	; 0x74
 8006462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006466:	4b7b      	ldr	r3, [pc, #492]	; (8006654 <_vfiprintf_r+0x244>)
 8006468:	429d      	cmp	r5, r3
 800646a:	d101      	bne.n	8006470 <_vfiprintf_r+0x60>
 800646c:	68b5      	ldr	r5, [r6, #8]
 800646e:	e7df      	b.n	8006430 <_vfiprintf_r+0x20>
 8006470:	4b79      	ldr	r3, [pc, #484]	; (8006658 <_vfiprintf_r+0x248>)
 8006472:	429d      	cmp	r5, r3
 8006474:	bf08      	it	eq
 8006476:	68f5      	ldreq	r5, [r6, #12]
 8006478:	e7da      	b.n	8006430 <_vfiprintf_r+0x20>
 800647a:	89ab      	ldrh	r3, [r5, #12]
 800647c:	0598      	lsls	r0, r3, #22
 800647e:	d4ed      	bmi.n	800645c <_vfiprintf_r+0x4c>
 8006480:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006482:	f000 fb84 	bl	8006b8e <__retarget_lock_release_recursive>
 8006486:	e7e9      	b.n	800645c <_vfiprintf_r+0x4c>
 8006488:	2300      	movs	r3, #0
 800648a:	9309      	str	r3, [sp, #36]	; 0x24
 800648c:	2320      	movs	r3, #32
 800648e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006492:	f8cd 800c 	str.w	r8, [sp, #12]
 8006496:	2330      	movs	r3, #48	; 0x30
 8006498:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800665c <_vfiprintf_r+0x24c>
 800649c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064a0:	f04f 0901 	mov.w	r9, #1
 80064a4:	4623      	mov	r3, r4
 80064a6:	469a      	mov	sl, r3
 80064a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064ac:	b10a      	cbz	r2, 80064b2 <_vfiprintf_r+0xa2>
 80064ae:	2a25      	cmp	r2, #37	; 0x25
 80064b0:	d1f9      	bne.n	80064a6 <_vfiprintf_r+0x96>
 80064b2:	ebba 0b04 	subs.w	fp, sl, r4
 80064b6:	d00b      	beq.n	80064d0 <_vfiprintf_r+0xc0>
 80064b8:	465b      	mov	r3, fp
 80064ba:	4622      	mov	r2, r4
 80064bc:	4629      	mov	r1, r5
 80064be:	4630      	mov	r0, r6
 80064c0:	f7ff ff93 	bl	80063ea <__sfputs_r>
 80064c4:	3001      	adds	r0, #1
 80064c6:	f000 80aa 	beq.w	800661e <_vfiprintf_r+0x20e>
 80064ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064cc:	445a      	add	r2, fp
 80064ce:	9209      	str	r2, [sp, #36]	; 0x24
 80064d0:	f89a 3000 	ldrb.w	r3, [sl]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 80a2 	beq.w	800661e <_vfiprintf_r+0x20e>
 80064da:	2300      	movs	r3, #0
 80064dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064e4:	f10a 0a01 	add.w	sl, sl, #1
 80064e8:	9304      	str	r3, [sp, #16]
 80064ea:	9307      	str	r3, [sp, #28]
 80064ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064f0:	931a      	str	r3, [sp, #104]	; 0x68
 80064f2:	4654      	mov	r4, sl
 80064f4:	2205      	movs	r2, #5
 80064f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064fa:	4858      	ldr	r0, [pc, #352]	; (800665c <_vfiprintf_r+0x24c>)
 80064fc:	f7f9 fe70 	bl	80001e0 <memchr>
 8006500:	9a04      	ldr	r2, [sp, #16]
 8006502:	b9d8      	cbnz	r0, 800653c <_vfiprintf_r+0x12c>
 8006504:	06d1      	lsls	r1, r2, #27
 8006506:	bf44      	itt	mi
 8006508:	2320      	movmi	r3, #32
 800650a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800650e:	0713      	lsls	r3, r2, #28
 8006510:	bf44      	itt	mi
 8006512:	232b      	movmi	r3, #43	; 0x2b
 8006514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006518:	f89a 3000 	ldrb.w	r3, [sl]
 800651c:	2b2a      	cmp	r3, #42	; 0x2a
 800651e:	d015      	beq.n	800654c <_vfiprintf_r+0x13c>
 8006520:	9a07      	ldr	r2, [sp, #28]
 8006522:	4654      	mov	r4, sl
 8006524:	2000      	movs	r0, #0
 8006526:	f04f 0c0a 	mov.w	ip, #10
 800652a:	4621      	mov	r1, r4
 800652c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006530:	3b30      	subs	r3, #48	; 0x30
 8006532:	2b09      	cmp	r3, #9
 8006534:	d94e      	bls.n	80065d4 <_vfiprintf_r+0x1c4>
 8006536:	b1b0      	cbz	r0, 8006566 <_vfiprintf_r+0x156>
 8006538:	9207      	str	r2, [sp, #28]
 800653a:	e014      	b.n	8006566 <_vfiprintf_r+0x156>
 800653c:	eba0 0308 	sub.w	r3, r0, r8
 8006540:	fa09 f303 	lsl.w	r3, r9, r3
 8006544:	4313      	orrs	r3, r2
 8006546:	9304      	str	r3, [sp, #16]
 8006548:	46a2      	mov	sl, r4
 800654a:	e7d2      	b.n	80064f2 <_vfiprintf_r+0xe2>
 800654c:	9b03      	ldr	r3, [sp, #12]
 800654e:	1d19      	adds	r1, r3, #4
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	9103      	str	r1, [sp, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	bfbb      	ittet	lt
 8006558:	425b      	neglt	r3, r3
 800655a:	f042 0202 	orrlt.w	r2, r2, #2
 800655e:	9307      	strge	r3, [sp, #28]
 8006560:	9307      	strlt	r3, [sp, #28]
 8006562:	bfb8      	it	lt
 8006564:	9204      	strlt	r2, [sp, #16]
 8006566:	7823      	ldrb	r3, [r4, #0]
 8006568:	2b2e      	cmp	r3, #46	; 0x2e
 800656a:	d10c      	bne.n	8006586 <_vfiprintf_r+0x176>
 800656c:	7863      	ldrb	r3, [r4, #1]
 800656e:	2b2a      	cmp	r3, #42	; 0x2a
 8006570:	d135      	bne.n	80065de <_vfiprintf_r+0x1ce>
 8006572:	9b03      	ldr	r3, [sp, #12]
 8006574:	1d1a      	adds	r2, r3, #4
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	9203      	str	r2, [sp, #12]
 800657a:	2b00      	cmp	r3, #0
 800657c:	bfb8      	it	lt
 800657e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006582:	3402      	adds	r4, #2
 8006584:	9305      	str	r3, [sp, #20]
 8006586:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800666c <_vfiprintf_r+0x25c>
 800658a:	7821      	ldrb	r1, [r4, #0]
 800658c:	2203      	movs	r2, #3
 800658e:	4650      	mov	r0, sl
 8006590:	f7f9 fe26 	bl	80001e0 <memchr>
 8006594:	b140      	cbz	r0, 80065a8 <_vfiprintf_r+0x198>
 8006596:	2340      	movs	r3, #64	; 0x40
 8006598:	eba0 000a 	sub.w	r0, r0, sl
 800659c:	fa03 f000 	lsl.w	r0, r3, r0
 80065a0:	9b04      	ldr	r3, [sp, #16]
 80065a2:	4303      	orrs	r3, r0
 80065a4:	3401      	adds	r4, #1
 80065a6:	9304      	str	r3, [sp, #16]
 80065a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ac:	482c      	ldr	r0, [pc, #176]	; (8006660 <_vfiprintf_r+0x250>)
 80065ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065b2:	2206      	movs	r2, #6
 80065b4:	f7f9 fe14 	bl	80001e0 <memchr>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d03f      	beq.n	800663c <_vfiprintf_r+0x22c>
 80065bc:	4b29      	ldr	r3, [pc, #164]	; (8006664 <_vfiprintf_r+0x254>)
 80065be:	bb1b      	cbnz	r3, 8006608 <_vfiprintf_r+0x1f8>
 80065c0:	9b03      	ldr	r3, [sp, #12]
 80065c2:	3307      	adds	r3, #7
 80065c4:	f023 0307 	bic.w	r3, r3, #7
 80065c8:	3308      	adds	r3, #8
 80065ca:	9303      	str	r3, [sp, #12]
 80065cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ce:	443b      	add	r3, r7
 80065d0:	9309      	str	r3, [sp, #36]	; 0x24
 80065d2:	e767      	b.n	80064a4 <_vfiprintf_r+0x94>
 80065d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80065d8:	460c      	mov	r4, r1
 80065da:	2001      	movs	r0, #1
 80065dc:	e7a5      	b.n	800652a <_vfiprintf_r+0x11a>
 80065de:	2300      	movs	r3, #0
 80065e0:	3401      	adds	r4, #1
 80065e2:	9305      	str	r3, [sp, #20]
 80065e4:	4619      	mov	r1, r3
 80065e6:	f04f 0c0a 	mov.w	ip, #10
 80065ea:	4620      	mov	r0, r4
 80065ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065f0:	3a30      	subs	r2, #48	; 0x30
 80065f2:	2a09      	cmp	r2, #9
 80065f4:	d903      	bls.n	80065fe <_vfiprintf_r+0x1ee>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0c5      	beq.n	8006586 <_vfiprintf_r+0x176>
 80065fa:	9105      	str	r1, [sp, #20]
 80065fc:	e7c3      	b.n	8006586 <_vfiprintf_r+0x176>
 80065fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006602:	4604      	mov	r4, r0
 8006604:	2301      	movs	r3, #1
 8006606:	e7f0      	b.n	80065ea <_vfiprintf_r+0x1da>
 8006608:	ab03      	add	r3, sp, #12
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	462a      	mov	r2, r5
 800660e:	4b16      	ldr	r3, [pc, #88]	; (8006668 <_vfiprintf_r+0x258>)
 8006610:	a904      	add	r1, sp, #16
 8006612:	4630      	mov	r0, r6
 8006614:	f7fd ffee 	bl	80045f4 <_printf_float>
 8006618:	4607      	mov	r7, r0
 800661a:	1c78      	adds	r0, r7, #1
 800661c:	d1d6      	bne.n	80065cc <_vfiprintf_r+0x1bc>
 800661e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006620:	07d9      	lsls	r1, r3, #31
 8006622:	d405      	bmi.n	8006630 <_vfiprintf_r+0x220>
 8006624:	89ab      	ldrh	r3, [r5, #12]
 8006626:	059a      	lsls	r2, r3, #22
 8006628:	d402      	bmi.n	8006630 <_vfiprintf_r+0x220>
 800662a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800662c:	f000 faaf 	bl	8006b8e <__retarget_lock_release_recursive>
 8006630:	89ab      	ldrh	r3, [r5, #12]
 8006632:	065b      	lsls	r3, r3, #25
 8006634:	f53f af12 	bmi.w	800645c <_vfiprintf_r+0x4c>
 8006638:	9809      	ldr	r0, [sp, #36]	; 0x24
 800663a:	e711      	b.n	8006460 <_vfiprintf_r+0x50>
 800663c:	ab03      	add	r3, sp, #12
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	462a      	mov	r2, r5
 8006642:	4b09      	ldr	r3, [pc, #36]	; (8006668 <_vfiprintf_r+0x258>)
 8006644:	a904      	add	r1, sp, #16
 8006646:	4630      	mov	r0, r6
 8006648:	f7fe fa78 	bl	8004b3c <_printf_i>
 800664c:	e7e4      	b.n	8006618 <_vfiprintf_r+0x208>
 800664e:	bf00      	nop
 8006650:	08007724 	.word	0x08007724
 8006654:	08007744 	.word	0x08007744
 8006658:	08007704 	.word	0x08007704
 800665c:	080075f2 	.word	0x080075f2
 8006660:	080075fc 	.word	0x080075fc
 8006664:	080045f5 	.word	0x080045f5
 8006668:	080063eb 	.word	0x080063eb
 800666c:	080075f8 	.word	0x080075f8

08006670 <__swbuf_r>:
 8006670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006672:	460e      	mov	r6, r1
 8006674:	4614      	mov	r4, r2
 8006676:	4605      	mov	r5, r0
 8006678:	b118      	cbz	r0, 8006682 <__swbuf_r+0x12>
 800667a:	6983      	ldr	r3, [r0, #24]
 800667c:	b90b      	cbnz	r3, 8006682 <__swbuf_r+0x12>
 800667e:	f000 f9e7 	bl	8006a50 <__sinit>
 8006682:	4b21      	ldr	r3, [pc, #132]	; (8006708 <__swbuf_r+0x98>)
 8006684:	429c      	cmp	r4, r3
 8006686:	d12b      	bne.n	80066e0 <__swbuf_r+0x70>
 8006688:	686c      	ldr	r4, [r5, #4]
 800668a:	69a3      	ldr	r3, [r4, #24]
 800668c:	60a3      	str	r3, [r4, #8]
 800668e:	89a3      	ldrh	r3, [r4, #12]
 8006690:	071a      	lsls	r2, r3, #28
 8006692:	d52f      	bpl.n	80066f4 <__swbuf_r+0x84>
 8006694:	6923      	ldr	r3, [r4, #16]
 8006696:	b36b      	cbz	r3, 80066f4 <__swbuf_r+0x84>
 8006698:	6923      	ldr	r3, [r4, #16]
 800669a:	6820      	ldr	r0, [r4, #0]
 800669c:	1ac0      	subs	r0, r0, r3
 800669e:	6963      	ldr	r3, [r4, #20]
 80066a0:	b2f6      	uxtb	r6, r6
 80066a2:	4283      	cmp	r3, r0
 80066a4:	4637      	mov	r7, r6
 80066a6:	dc04      	bgt.n	80066b2 <__swbuf_r+0x42>
 80066a8:	4621      	mov	r1, r4
 80066aa:	4628      	mov	r0, r5
 80066ac:	f000 f93c 	bl	8006928 <_fflush_r>
 80066b0:	bb30      	cbnz	r0, 8006700 <__swbuf_r+0x90>
 80066b2:	68a3      	ldr	r3, [r4, #8]
 80066b4:	3b01      	subs	r3, #1
 80066b6:	60a3      	str	r3, [r4, #8]
 80066b8:	6823      	ldr	r3, [r4, #0]
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	6022      	str	r2, [r4, #0]
 80066be:	701e      	strb	r6, [r3, #0]
 80066c0:	6963      	ldr	r3, [r4, #20]
 80066c2:	3001      	adds	r0, #1
 80066c4:	4283      	cmp	r3, r0
 80066c6:	d004      	beq.n	80066d2 <__swbuf_r+0x62>
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	07db      	lsls	r3, r3, #31
 80066cc:	d506      	bpl.n	80066dc <__swbuf_r+0x6c>
 80066ce:	2e0a      	cmp	r6, #10
 80066d0:	d104      	bne.n	80066dc <__swbuf_r+0x6c>
 80066d2:	4621      	mov	r1, r4
 80066d4:	4628      	mov	r0, r5
 80066d6:	f000 f927 	bl	8006928 <_fflush_r>
 80066da:	b988      	cbnz	r0, 8006700 <__swbuf_r+0x90>
 80066dc:	4638      	mov	r0, r7
 80066de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066e0:	4b0a      	ldr	r3, [pc, #40]	; (800670c <__swbuf_r+0x9c>)
 80066e2:	429c      	cmp	r4, r3
 80066e4:	d101      	bne.n	80066ea <__swbuf_r+0x7a>
 80066e6:	68ac      	ldr	r4, [r5, #8]
 80066e8:	e7cf      	b.n	800668a <__swbuf_r+0x1a>
 80066ea:	4b09      	ldr	r3, [pc, #36]	; (8006710 <__swbuf_r+0xa0>)
 80066ec:	429c      	cmp	r4, r3
 80066ee:	bf08      	it	eq
 80066f0:	68ec      	ldreq	r4, [r5, #12]
 80066f2:	e7ca      	b.n	800668a <__swbuf_r+0x1a>
 80066f4:	4621      	mov	r1, r4
 80066f6:	4628      	mov	r0, r5
 80066f8:	f000 f81a 	bl	8006730 <__swsetup_r>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d0cb      	beq.n	8006698 <__swbuf_r+0x28>
 8006700:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006704:	e7ea      	b.n	80066dc <__swbuf_r+0x6c>
 8006706:	bf00      	nop
 8006708:	08007724 	.word	0x08007724
 800670c:	08007744 	.word	0x08007744
 8006710:	08007704 	.word	0x08007704

08006714 <__ascii_wctomb>:
 8006714:	b149      	cbz	r1, 800672a <__ascii_wctomb+0x16>
 8006716:	2aff      	cmp	r2, #255	; 0xff
 8006718:	bf85      	ittet	hi
 800671a:	238a      	movhi	r3, #138	; 0x8a
 800671c:	6003      	strhi	r3, [r0, #0]
 800671e:	700a      	strbls	r2, [r1, #0]
 8006720:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006724:	bf98      	it	ls
 8006726:	2001      	movls	r0, #1
 8006728:	4770      	bx	lr
 800672a:	4608      	mov	r0, r1
 800672c:	4770      	bx	lr
	...

08006730 <__swsetup_r>:
 8006730:	4b32      	ldr	r3, [pc, #200]	; (80067fc <__swsetup_r+0xcc>)
 8006732:	b570      	push	{r4, r5, r6, lr}
 8006734:	681d      	ldr	r5, [r3, #0]
 8006736:	4606      	mov	r6, r0
 8006738:	460c      	mov	r4, r1
 800673a:	b125      	cbz	r5, 8006746 <__swsetup_r+0x16>
 800673c:	69ab      	ldr	r3, [r5, #24]
 800673e:	b913      	cbnz	r3, 8006746 <__swsetup_r+0x16>
 8006740:	4628      	mov	r0, r5
 8006742:	f000 f985 	bl	8006a50 <__sinit>
 8006746:	4b2e      	ldr	r3, [pc, #184]	; (8006800 <__swsetup_r+0xd0>)
 8006748:	429c      	cmp	r4, r3
 800674a:	d10f      	bne.n	800676c <__swsetup_r+0x3c>
 800674c:	686c      	ldr	r4, [r5, #4]
 800674e:	89a3      	ldrh	r3, [r4, #12]
 8006750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006754:	0719      	lsls	r1, r3, #28
 8006756:	d42c      	bmi.n	80067b2 <__swsetup_r+0x82>
 8006758:	06dd      	lsls	r5, r3, #27
 800675a:	d411      	bmi.n	8006780 <__swsetup_r+0x50>
 800675c:	2309      	movs	r3, #9
 800675e:	6033      	str	r3, [r6, #0]
 8006760:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006764:	81a3      	strh	r3, [r4, #12]
 8006766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800676a:	e03e      	b.n	80067ea <__swsetup_r+0xba>
 800676c:	4b25      	ldr	r3, [pc, #148]	; (8006804 <__swsetup_r+0xd4>)
 800676e:	429c      	cmp	r4, r3
 8006770:	d101      	bne.n	8006776 <__swsetup_r+0x46>
 8006772:	68ac      	ldr	r4, [r5, #8]
 8006774:	e7eb      	b.n	800674e <__swsetup_r+0x1e>
 8006776:	4b24      	ldr	r3, [pc, #144]	; (8006808 <__swsetup_r+0xd8>)
 8006778:	429c      	cmp	r4, r3
 800677a:	bf08      	it	eq
 800677c:	68ec      	ldreq	r4, [r5, #12]
 800677e:	e7e6      	b.n	800674e <__swsetup_r+0x1e>
 8006780:	0758      	lsls	r0, r3, #29
 8006782:	d512      	bpl.n	80067aa <__swsetup_r+0x7a>
 8006784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006786:	b141      	cbz	r1, 800679a <__swsetup_r+0x6a>
 8006788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800678c:	4299      	cmp	r1, r3
 800678e:	d002      	beq.n	8006796 <__swsetup_r+0x66>
 8006790:	4630      	mov	r0, r6
 8006792:	f7ff fd0b 	bl	80061ac <_free_r>
 8006796:	2300      	movs	r3, #0
 8006798:	6363      	str	r3, [r4, #52]	; 0x34
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067a0:	81a3      	strh	r3, [r4, #12]
 80067a2:	2300      	movs	r3, #0
 80067a4:	6063      	str	r3, [r4, #4]
 80067a6:	6923      	ldr	r3, [r4, #16]
 80067a8:	6023      	str	r3, [r4, #0]
 80067aa:	89a3      	ldrh	r3, [r4, #12]
 80067ac:	f043 0308 	orr.w	r3, r3, #8
 80067b0:	81a3      	strh	r3, [r4, #12]
 80067b2:	6923      	ldr	r3, [r4, #16]
 80067b4:	b94b      	cbnz	r3, 80067ca <__swsetup_r+0x9a>
 80067b6:	89a3      	ldrh	r3, [r4, #12]
 80067b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c0:	d003      	beq.n	80067ca <__swsetup_r+0x9a>
 80067c2:	4621      	mov	r1, r4
 80067c4:	4630      	mov	r0, r6
 80067c6:	f000 fa07 	bl	8006bd8 <__smakebuf_r>
 80067ca:	89a0      	ldrh	r0, [r4, #12]
 80067cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067d0:	f010 0301 	ands.w	r3, r0, #1
 80067d4:	d00a      	beq.n	80067ec <__swsetup_r+0xbc>
 80067d6:	2300      	movs	r3, #0
 80067d8:	60a3      	str	r3, [r4, #8]
 80067da:	6963      	ldr	r3, [r4, #20]
 80067dc:	425b      	negs	r3, r3
 80067de:	61a3      	str	r3, [r4, #24]
 80067e0:	6923      	ldr	r3, [r4, #16]
 80067e2:	b943      	cbnz	r3, 80067f6 <__swsetup_r+0xc6>
 80067e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067e8:	d1ba      	bne.n	8006760 <__swsetup_r+0x30>
 80067ea:	bd70      	pop	{r4, r5, r6, pc}
 80067ec:	0781      	lsls	r1, r0, #30
 80067ee:	bf58      	it	pl
 80067f0:	6963      	ldrpl	r3, [r4, #20]
 80067f2:	60a3      	str	r3, [r4, #8]
 80067f4:	e7f4      	b.n	80067e0 <__swsetup_r+0xb0>
 80067f6:	2000      	movs	r0, #0
 80067f8:	e7f7      	b.n	80067ea <__swsetup_r+0xba>
 80067fa:	bf00      	nop
 80067fc:	2000000c 	.word	0x2000000c
 8006800:	08007724 	.word	0x08007724
 8006804:	08007744 	.word	0x08007744
 8006808:	08007704 	.word	0x08007704

0800680c <abort>:
 800680c:	b508      	push	{r3, lr}
 800680e:	2006      	movs	r0, #6
 8006810:	f000 fa4a 	bl	8006ca8 <raise>
 8006814:	2001      	movs	r0, #1
 8006816:	f7fb fadb 	bl	8001dd0 <_exit>
	...

0800681c <__sflush_r>:
 800681c:	898a      	ldrh	r2, [r1, #12]
 800681e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006822:	4605      	mov	r5, r0
 8006824:	0710      	lsls	r0, r2, #28
 8006826:	460c      	mov	r4, r1
 8006828:	d458      	bmi.n	80068dc <__sflush_r+0xc0>
 800682a:	684b      	ldr	r3, [r1, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	dc05      	bgt.n	800683c <__sflush_r+0x20>
 8006830:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006832:	2b00      	cmp	r3, #0
 8006834:	dc02      	bgt.n	800683c <__sflush_r+0x20>
 8006836:	2000      	movs	r0, #0
 8006838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800683c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800683e:	2e00      	cmp	r6, #0
 8006840:	d0f9      	beq.n	8006836 <__sflush_r+0x1a>
 8006842:	2300      	movs	r3, #0
 8006844:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006848:	682f      	ldr	r7, [r5, #0]
 800684a:	602b      	str	r3, [r5, #0]
 800684c:	d032      	beq.n	80068b4 <__sflush_r+0x98>
 800684e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006850:	89a3      	ldrh	r3, [r4, #12]
 8006852:	075a      	lsls	r2, r3, #29
 8006854:	d505      	bpl.n	8006862 <__sflush_r+0x46>
 8006856:	6863      	ldr	r3, [r4, #4]
 8006858:	1ac0      	subs	r0, r0, r3
 800685a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800685c:	b10b      	cbz	r3, 8006862 <__sflush_r+0x46>
 800685e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006860:	1ac0      	subs	r0, r0, r3
 8006862:	2300      	movs	r3, #0
 8006864:	4602      	mov	r2, r0
 8006866:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006868:	6a21      	ldr	r1, [r4, #32]
 800686a:	4628      	mov	r0, r5
 800686c:	47b0      	blx	r6
 800686e:	1c43      	adds	r3, r0, #1
 8006870:	89a3      	ldrh	r3, [r4, #12]
 8006872:	d106      	bne.n	8006882 <__sflush_r+0x66>
 8006874:	6829      	ldr	r1, [r5, #0]
 8006876:	291d      	cmp	r1, #29
 8006878:	d82c      	bhi.n	80068d4 <__sflush_r+0xb8>
 800687a:	4a2a      	ldr	r2, [pc, #168]	; (8006924 <__sflush_r+0x108>)
 800687c:	40ca      	lsrs	r2, r1
 800687e:	07d6      	lsls	r6, r2, #31
 8006880:	d528      	bpl.n	80068d4 <__sflush_r+0xb8>
 8006882:	2200      	movs	r2, #0
 8006884:	6062      	str	r2, [r4, #4]
 8006886:	04d9      	lsls	r1, r3, #19
 8006888:	6922      	ldr	r2, [r4, #16]
 800688a:	6022      	str	r2, [r4, #0]
 800688c:	d504      	bpl.n	8006898 <__sflush_r+0x7c>
 800688e:	1c42      	adds	r2, r0, #1
 8006890:	d101      	bne.n	8006896 <__sflush_r+0x7a>
 8006892:	682b      	ldr	r3, [r5, #0]
 8006894:	b903      	cbnz	r3, 8006898 <__sflush_r+0x7c>
 8006896:	6560      	str	r0, [r4, #84]	; 0x54
 8006898:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800689a:	602f      	str	r7, [r5, #0]
 800689c:	2900      	cmp	r1, #0
 800689e:	d0ca      	beq.n	8006836 <__sflush_r+0x1a>
 80068a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068a4:	4299      	cmp	r1, r3
 80068a6:	d002      	beq.n	80068ae <__sflush_r+0x92>
 80068a8:	4628      	mov	r0, r5
 80068aa:	f7ff fc7f 	bl	80061ac <_free_r>
 80068ae:	2000      	movs	r0, #0
 80068b0:	6360      	str	r0, [r4, #52]	; 0x34
 80068b2:	e7c1      	b.n	8006838 <__sflush_r+0x1c>
 80068b4:	6a21      	ldr	r1, [r4, #32]
 80068b6:	2301      	movs	r3, #1
 80068b8:	4628      	mov	r0, r5
 80068ba:	47b0      	blx	r6
 80068bc:	1c41      	adds	r1, r0, #1
 80068be:	d1c7      	bne.n	8006850 <__sflush_r+0x34>
 80068c0:	682b      	ldr	r3, [r5, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0c4      	beq.n	8006850 <__sflush_r+0x34>
 80068c6:	2b1d      	cmp	r3, #29
 80068c8:	d001      	beq.n	80068ce <__sflush_r+0xb2>
 80068ca:	2b16      	cmp	r3, #22
 80068cc:	d101      	bne.n	80068d2 <__sflush_r+0xb6>
 80068ce:	602f      	str	r7, [r5, #0]
 80068d0:	e7b1      	b.n	8006836 <__sflush_r+0x1a>
 80068d2:	89a3      	ldrh	r3, [r4, #12]
 80068d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068d8:	81a3      	strh	r3, [r4, #12]
 80068da:	e7ad      	b.n	8006838 <__sflush_r+0x1c>
 80068dc:	690f      	ldr	r7, [r1, #16]
 80068de:	2f00      	cmp	r7, #0
 80068e0:	d0a9      	beq.n	8006836 <__sflush_r+0x1a>
 80068e2:	0793      	lsls	r3, r2, #30
 80068e4:	680e      	ldr	r6, [r1, #0]
 80068e6:	bf08      	it	eq
 80068e8:	694b      	ldreq	r3, [r1, #20]
 80068ea:	600f      	str	r7, [r1, #0]
 80068ec:	bf18      	it	ne
 80068ee:	2300      	movne	r3, #0
 80068f0:	eba6 0807 	sub.w	r8, r6, r7
 80068f4:	608b      	str	r3, [r1, #8]
 80068f6:	f1b8 0f00 	cmp.w	r8, #0
 80068fa:	dd9c      	ble.n	8006836 <__sflush_r+0x1a>
 80068fc:	6a21      	ldr	r1, [r4, #32]
 80068fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006900:	4643      	mov	r3, r8
 8006902:	463a      	mov	r2, r7
 8006904:	4628      	mov	r0, r5
 8006906:	47b0      	blx	r6
 8006908:	2800      	cmp	r0, #0
 800690a:	dc06      	bgt.n	800691a <__sflush_r+0xfe>
 800690c:	89a3      	ldrh	r3, [r4, #12]
 800690e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006912:	81a3      	strh	r3, [r4, #12]
 8006914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006918:	e78e      	b.n	8006838 <__sflush_r+0x1c>
 800691a:	4407      	add	r7, r0
 800691c:	eba8 0800 	sub.w	r8, r8, r0
 8006920:	e7e9      	b.n	80068f6 <__sflush_r+0xda>
 8006922:	bf00      	nop
 8006924:	20400001 	.word	0x20400001

08006928 <_fflush_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	690b      	ldr	r3, [r1, #16]
 800692c:	4605      	mov	r5, r0
 800692e:	460c      	mov	r4, r1
 8006930:	b913      	cbnz	r3, 8006938 <_fflush_r+0x10>
 8006932:	2500      	movs	r5, #0
 8006934:	4628      	mov	r0, r5
 8006936:	bd38      	pop	{r3, r4, r5, pc}
 8006938:	b118      	cbz	r0, 8006942 <_fflush_r+0x1a>
 800693a:	6983      	ldr	r3, [r0, #24]
 800693c:	b90b      	cbnz	r3, 8006942 <_fflush_r+0x1a>
 800693e:	f000 f887 	bl	8006a50 <__sinit>
 8006942:	4b14      	ldr	r3, [pc, #80]	; (8006994 <_fflush_r+0x6c>)
 8006944:	429c      	cmp	r4, r3
 8006946:	d11b      	bne.n	8006980 <_fflush_r+0x58>
 8006948:	686c      	ldr	r4, [r5, #4]
 800694a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d0ef      	beq.n	8006932 <_fflush_r+0xa>
 8006952:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006954:	07d0      	lsls	r0, r2, #31
 8006956:	d404      	bmi.n	8006962 <_fflush_r+0x3a>
 8006958:	0599      	lsls	r1, r3, #22
 800695a:	d402      	bmi.n	8006962 <_fflush_r+0x3a>
 800695c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800695e:	f000 f915 	bl	8006b8c <__retarget_lock_acquire_recursive>
 8006962:	4628      	mov	r0, r5
 8006964:	4621      	mov	r1, r4
 8006966:	f7ff ff59 	bl	800681c <__sflush_r>
 800696a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800696c:	07da      	lsls	r2, r3, #31
 800696e:	4605      	mov	r5, r0
 8006970:	d4e0      	bmi.n	8006934 <_fflush_r+0xc>
 8006972:	89a3      	ldrh	r3, [r4, #12]
 8006974:	059b      	lsls	r3, r3, #22
 8006976:	d4dd      	bmi.n	8006934 <_fflush_r+0xc>
 8006978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800697a:	f000 f908 	bl	8006b8e <__retarget_lock_release_recursive>
 800697e:	e7d9      	b.n	8006934 <_fflush_r+0xc>
 8006980:	4b05      	ldr	r3, [pc, #20]	; (8006998 <_fflush_r+0x70>)
 8006982:	429c      	cmp	r4, r3
 8006984:	d101      	bne.n	800698a <_fflush_r+0x62>
 8006986:	68ac      	ldr	r4, [r5, #8]
 8006988:	e7df      	b.n	800694a <_fflush_r+0x22>
 800698a:	4b04      	ldr	r3, [pc, #16]	; (800699c <_fflush_r+0x74>)
 800698c:	429c      	cmp	r4, r3
 800698e:	bf08      	it	eq
 8006990:	68ec      	ldreq	r4, [r5, #12]
 8006992:	e7da      	b.n	800694a <_fflush_r+0x22>
 8006994:	08007724 	.word	0x08007724
 8006998:	08007744 	.word	0x08007744
 800699c:	08007704 	.word	0x08007704

080069a0 <std>:
 80069a0:	2300      	movs	r3, #0
 80069a2:	b510      	push	{r4, lr}
 80069a4:	4604      	mov	r4, r0
 80069a6:	e9c0 3300 	strd	r3, r3, [r0]
 80069aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069ae:	6083      	str	r3, [r0, #8]
 80069b0:	8181      	strh	r1, [r0, #12]
 80069b2:	6643      	str	r3, [r0, #100]	; 0x64
 80069b4:	81c2      	strh	r2, [r0, #14]
 80069b6:	6183      	str	r3, [r0, #24]
 80069b8:	4619      	mov	r1, r3
 80069ba:	2208      	movs	r2, #8
 80069bc:	305c      	adds	r0, #92	; 0x5c
 80069be:	f7fd fd71 	bl	80044a4 <memset>
 80069c2:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <std+0x38>)
 80069c4:	6263      	str	r3, [r4, #36]	; 0x24
 80069c6:	4b05      	ldr	r3, [pc, #20]	; (80069dc <std+0x3c>)
 80069c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80069ca:	4b05      	ldr	r3, [pc, #20]	; (80069e0 <std+0x40>)
 80069cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069ce:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <std+0x44>)
 80069d0:	6224      	str	r4, [r4, #32]
 80069d2:	6323      	str	r3, [r4, #48]	; 0x30
 80069d4:	bd10      	pop	{r4, pc}
 80069d6:	bf00      	nop
 80069d8:	08006ce1 	.word	0x08006ce1
 80069dc:	08006d03 	.word	0x08006d03
 80069e0:	08006d3b 	.word	0x08006d3b
 80069e4:	08006d5f 	.word	0x08006d5f

080069e8 <_cleanup_r>:
 80069e8:	4901      	ldr	r1, [pc, #4]	; (80069f0 <_cleanup_r+0x8>)
 80069ea:	f000 b8af 	b.w	8006b4c <_fwalk_reent>
 80069ee:	bf00      	nop
 80069f0:	08006929 	.word	0x08006929

080069f4 <__sfmoreglue>:
 80069f4:	b570      	push	{r4, r5, r6, lr}
 80069f6:	1e4a      	subs	r2, r1, #1
 80069f8:	2568      	movs	r5, #104	; 0x68
 80069fa:	4355      	muls	r5, r2
 80069fc:	460e      	mov	r6, r1
 80069fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a02:	f7ff fc23 	bl	800624c <_malloc_r>
 8006a06:	4604      	mov	r4, r0
 8006a08:	b140      	cbz	r0, 8006a1c <__sfmoreglue+0x28>
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	e9c0 1600 	strd	r1, r6, [r0]
 8006a10:	300c      	adds	r0, #12
 8006a12:	60a0      	str	r0, [r4, #8]
 8006a14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a18:	f7fd fd44 	bl	80044a4 <memset>
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}

08006a20 <__sfp_lock_acquire>:
 8006a20:	4801      	ldr	r0, [pc, #4]	; (8006a28 <__sfp_lock_acquire+0x8>)
 8006a22:	f000 b8b3 	b.w	8006b8c <__retarget_lock_acquire_recursive>
 8006a26:	bf00      	nop
 8006a28:	2000035c 	.word	0x2000035c

08006a2c <__sfp_lock_release>:
 8006a2c:	4801      	ldr	r0, [pc, #4]	; (8006a34 <__sfp_lock_release+0x8>)
 8006a2e:	f000 b8ae 	b.w	8006b8e <__retarget_lock_release_recursive>
 8006a32:	bf00      	nop
 8006a34:	2000035c 	.word	0x2000035c

08006a38 <__sinit_lock_acquire>:
 8006a38:	4801      	ldr	r0, [pc, #4]	; (8006a40 <__sinit_lock_acquire+0x8>)
 8006a3a:	f000 b8a7 	b.w	8006b8c <__retarget_lock_acquire_recursive>
 8006a3e:	bf00      	nop
 8006a40:	20000357 	.word	0x20000357

08006a44 <__sinit_lock_release>:
 8006a44:	4801      	ldr	r0, [pc, #4]	; (8006a4c <__sinit_lock_release+0x8>)
 8006a46:	f000 b8a2 	b.w	8006b8e <__retarget_lock_release_recursive>
 8006a4a:	bf00      	nop
 8006a4c:	20000357 	.word	0x20000357

08006a50 <__sinit>:
 8006a50:	b510      	push	{r4, lr}
 8006a52:	4604      	mov	r4, r0
 8006a54:	f7ff fff0 	bl	8006a38 <__sinit_lock_acquire>
 8006a58:	69a3      	ldr	r3, [r4, #24]
 8006a5a:	b11b      	cbz	r3, 8006a64 <__sinit+0x14>
 8006a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a60:	f7ff bff0 	b.w	8006a44 <__sinit_lock_release>
 8006a64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a68:	6523      	str	r3, [r4, #80]	; 0x50
 8006a6a:	4b13      	ldr	r3, [pc, #76]	; (8006ab8 <__sinit+0x68>)
 8006a6c:	4a13      	ldr	r2, [pc, #76]	; (8006abc <__sinit+0x6c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a72:	42a3      	cmp	r3, r4
 8006a74:	bf04      	itt	eq
 8006a76:	2301      	moveq	r3, #1
 8006a78:	61a3      	streq	r3, [r4, #24]
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	f000 f820 	bl	8006ac0 <__sfp>
 8006a80:	6060      	str	r0, [r4, #4]
 8006a82:	4620      	mov	r0, r4
 8006a84:	f000 f81c 	bl	8006ac0 <__sfp>
 8006a88:	60a0      	str	r0, [r4, #8]
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f000 f818 	bl	8006ac0 <__sfp>
 8006a90:	2200      	movs	r2, #0
 8006a92:	60e0      	str	r0, [r4, #12]
 8006a94:	2104      	movs	r1, #4
 8006a96:	6860      	ldr	r0, [r4, #4]
 8006a98:	f7ff ff82 	bl	80069a0 <std>
 8006a9c:	68a0      	ldr	r0, [r4, #8]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	2109      	movs	r1, #9
 8006aa2:	f7ff ff7d 	bl	80069a0 <std>
 8006aa6:	68e0      	ldr	r0, [r4, #12]
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	2112      	movs	r1, #18
 8006aac:	f7ff ff78 	bl	80069a0 <std>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	61a3      	str	r3, [r4, #24]
 8006ab4:	e7d2      	b.n	8006a5c <__sinit+0xc>
 8006ab6:	bf00      	nop
 8006ab8:	08007380 	.word	0x08007380
 8006abc:	080069e9 	.word	0x080069e9

08006ac0 <__sfp>:
 8006ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac2:	4607      	mov	r7, r0
 8006ac4:	f7ff ffac 	bl	8006a20 <__sfp_lock_acquire>
 8006ac8:	4b1e      	ldr	r3, [pc, #120]	; (8006b44 <__sfp+0x84>)
 8006aca:	681e      	ldr	r6, [r3, #0]
 8006acc:	69b3      	ldr	r3, [r6, #24]
 8006ace:	b913      	cbnz	r3, 8006ad6 <__sfp+0x16>
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	f7ff ffbd 	bl	8006a50 <__sinit>
 8006ad6:	3648      	adds	r6, #72	; 0x48
 8006ad8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	d503      	bpl.n	8006ae8 <__sfp+0x28>
 8006ae0:	6833      	ldr	r3, [r6, #0]
 8006ae2:	b30b      	cbz	r3, 8006b28 <__sfp+0x68>
 8006ae4:	6836      	ldr	r6, [r6, #0]
 8006ae6:	e7f7      	b.n	8006ad8 <__sfp+0x18>
 8006ae8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006aec:	b9d5      	cbnz	r5, 8006b24 <__sfp+0x64>
 8006aee:	4b16      	ldr	r3, [pc, #88]	; (8006b48 <__sfp+0x88>)
 8006af0:	60e3      	str	r3, [r4, #12]
 8006af2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006af6:	6665      	str	r5, [r4, #100]	; 0x64
 8006af8:	f000 f847 	bl	8006b8a <__retarget_lock_init_recursive>
 8006afc:	f7ff ff96 	bl	8006a2c <__sfp_lock_release>
 8006b00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b08:	6025      	str	r5, [r4, #0]
 8006b0a:	61a5      	str	r5, [r4, #24]
 8006b0c:	2208      	movs	r2, #8
 8006b0e:	4629      	mov	r1, r5
 8006b10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b14:	f7fd fcc6 	bl	80044a4 <memset>
 8006b18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b20:	4620      	mov	r0, r4
 8006b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b24:	3468      	adds	r4, #104	; 0x68
 8006b26:	e7d9      	b.n	8006adc <__sfp+0x1c>
 8006b28:	2104      	movs	r1, #4
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	f7ff ff62 	bl	80069f4 <__sfmoreglue>
 8006b30:	4604      	mov	r4, r0
 8006b32:	6030      	str	r0, [r6, #0]
 8006b34:	2800      	cmp	r0, #0
 8006b36:	d1d5      	bne.n	8006ae4 <__sfp+0x24>
 8006b38:	f7ff ff78 	bl	8006a2c <__sfp_lock_release>
 8006b3c:	230c      	movs	r3, #12
 8006b3e:	603b      	str	r3, [r7, #0]
 8006b40:	e7ee      	b.n	8006b20 <__sfp+0x60>
 8006b42:	bf00      	nop
 8006b44:	08007380 	.word	0x08007380
 8006b48:	ffff0001 	.word	0xffff0001

08006b4c <_fwalk_reent>:
 8006b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b50:	4606      	mov	r6, r0
 8006b52:	4688      	mov	r8, r1
 8006b54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b58:	2700      	movs	r7, #0
 8006b5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b5e:	f1b9 0901 	subs.w	r9, r9, #1
 8006b62:	d505      	bpl.n	8006b70 <_fwalk_reent+0x24>
 8006b64:	6824      	ldr	r4, [r4, #0]
 8006b66:	2c00      	cmp	r4, #0
 8006b68:	d1f7      	bne.n	8006b5a <_fwalk_reent+0xe>
 8006b6a:	4638      	mov	r0, r7
 8006b6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b70:	89ab      	ldrh	r3, [r5, #12]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d907      	bls.n	8006b86 <_fwalk_reent+0x3a>
 8006b76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	d003      	beq.n	8006b86 <_fwalk_reent+0x3a>
 8006b7e:	4629      	mov	r1, r5
 8006b80:	4630      	mov	r0, r6
 8006b82:	47c0      	blx	r8
 8006b84:	4307      	orrs	r7, r0
 8006b86:	3568      	adds	r5, #104	; 0x68
 8006b88:	e7e9      	b.n	8006b5e <_fwalk_reent+0x12>

08006b8a <__retarget_lock_init_recursive>:
 8006b8a:	4770      	bx	lr

08006b8c <__retarget_lock_acquire_recursive>:
 8006b8c:	4770      	bx	lr

08006b8e <__retarget_lock_release_recursive>:
 8006b8e:	4770      	bx	lr

08006b90 <__swhatbuf_r>:
 8006b90:	b570      	push	{r4, r5, r6, lr}
 8006b92:	460e      	mov	r6, r1
 8006b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b98:	2900      	cmp	r1, #0
 8006b9a:	b096      	sub	sp, #88	; 0x58
 8006b9c:	4614      	mov	r4, r2
 8006b9e:	461d      	mov	r5, r3
 8006ba0:	da07      	bge.n	8006bb2 <__swhatbuf_r+0x22>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	602b      	str	r3, [r5, #0]
 8006ba6:	89b3      	ldrh	r3, [r6, #12]
 8006ba8:	061a      	lsls	r2, r3, #24
 8006baa:	d410      	bmi.n	8006bce <__swhatbuf_r+0x3e>
 8006bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bb0:	e00e      	b.n	8006bd0 <__swhatbuf_r+0x40>
 8006bb2:	466a      	mov	r2, sp
 8006bb4:	f000 f8fa 	bl	8006dac <_fstat_r>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	dbf2      	blt.n	8006ba2 <__swhatbuf_r+0x12>
 8006bbc:	9a01      	ldr	r2, [sp, #4]
 8006bbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006bc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006bc6:	425a      	negs	r2, r3
 8006bc8:	415a      	adcs	r2, r3
 8006bca:	602a      	str	r2, [r5, #0]
 8006bcc:	e7ee      	b.n	8006bac <__swhatbuf_r+0x1c>
 8006bce:	2340      	movs	r3, #64	; 0x40
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	6023      	str	r3, [r4, #0]
 8006bd4:	b016      	add	sp, #88	; 0x58
 8006bd6:	bd70      	pop	{r4, r5, r6, pc}

08006bd8 <__smakebuf_r>:
 8006bd8:	898b      	ldrh	r3, [r1, #12]
 8006bda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bdc:	079d      	lsls	r5, r3, #30
 8006bde:	4606      	mov	r6, r0
 8006be0:	460c      	mov	r4, r1
 8006be2:	d507      	bpl.n	8006bf4 <__smakebuf_r+0x1c>
 8006be4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006be8:	6023      	str	r3, [r4, #0]
 8006bea:	6123      	str	r3, [r4, #16]
 8006bec:	2301      	movs	r3, #1
 8006bee:	6163      	str	r3, [r4, #20]
 8006bf0:	b002      	add	sp, #8
 8006bf2:	bd70      	pop	{r4, r5, r6, pc}
 8006bf4:	ab01      	add	r3, sp, #4
 8006bf6:	466a      	mov	r2, sp
 8006bf8:	f7ff ffca 	bl	8006b90 <__swhatbuf_r>
 8006bfc:	9900      	ldr	r1, [sp, #0]
 8006bfe:	4605      	mov	r5, r0
 8006c00:	4630      	mov	r0, r6
 8006c02:	f7ff fb23 	bl	800624c <_malloc_r>
 8006c06:	b948      	cbnz	r0, 8006c1c <__smakebuf_r+0x44>
 8006c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c0c:	059a      	lsls	r2, r3, #22
 8006c0e:	d4ef      	bmi.n	8006bf0 <__smakebuf_r+0x18>
 8006c10:	f023 0303 	bic.w	r3, r3, #3
 8006c14:	f043 0302 	orr.w	r3, r3, #2
 8006c18:	81a3      	strh	r3, [r4, #12]
 8006c1a:	e7e3      	b.n	8006be4 <__smakebuf_r+0xc>
 8006c1c:	4b0d      	ldr	r3, [pc, #52]	; (8006c54 <__smakebuf_r+0x7c>)
 8006c1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c20:	89a3      	ldrh	r3, [r4, #12]
 8006c22:	6020      	str	r0, [r4, #0]
 8006c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c28:	81a3      	strh	r3, [r4, #12]
 8006c2a:	9b00      	ldr	r3, [sp, #0]
 8006c2c:	6163      	str	r3, [r4, #20]
 8006c2e:	9b01      	ldr	r3, [sp, #4]
 8006c30:	6120      	str	r0, [r4, #16]
 8006c32:	b15b      	cbz	r3, 8006c4c <__smakebuf_r+0x74>
 8006c34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c38:	4630      	mov	r0, r6
 8006c3a:	f000 f8c9 	bl	8006dd0 <_isatty_r>
 8006c3e:	b128      	cbz	r0, 8006c4c <__smakebuf_r+0x74>
 8006c40:	89a3      	ldrh	r3, [r4, #12]
 8006c42:	f023 0303 	bic.w	r3, r3, #3
 8006c46:	f043 0301 	orr.w	r3, r3, #1
 8006c4a:	81a3      	strh	r3, [r4, #12]
 8006c4c:	89a0      	ldrh	r0, [r4, #12]
 8006c4e:	4305      	orrs	r5, r0
 8006c50:	81a5      	strh	r5, [r4, #12]
 8006c52:	e7cd      	b.n	8006bf0 <__smakebuf_r+0x18>
 8006c54:	080069e9 	.word	0x080069e9

08006c58 <_raise_r>:
 8006c58:	291f      	cmp	r1, #31
 8006c5a:	b538      	push	{r3, r4, r5, lr}
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	460d      	mov	r5, r1
 8006c60:	d904      	bls.n	8006c6c <_raise_r+0x14>
 8006c62:	2316      	movs	r3, #22
 8006c64:	6003      	str	r3, [r0, #0]
 8006c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c6a:	bd38      	pop	{r3, r4, r5, pc}
 8006c6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006c6e:	b112      	cbz	r2, 8006c76 <_raise_r+0x1e>
 8006c70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c74:	b94b      	cbnz	r3, 8006c8a <_raise_r+0x32>
 8006c76:	4620      	mov	r0, r4
 8006c78:	f000 f830 	bl	8006cdc <_getpid_r>
 8006c7c:	462a      	mov	r2, r5
 8006c7e:	4601      	mov	r1, r0
 8006c80:	4620      	mov	r0, r4
 8006c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c86:	f000 b817 	b.w	8006cb8 <_kill_r>
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d00a      	beq.n	8006ca4 <_raise_r+0x4c>
 8006c8e:	1c59      	adds	r1, r3, #1
 8006c90:	d103      	bne.n	8006c9a <_raise_r+0x42>
 8006c92:	2316      	movs	r3, #22
 8006c94:	6003      	str	r3, [r0, #0]
 8006c96:	2001      	movs	r0, #1
 8006c98:	e7e7      	b.n	8006c6a <_raise_r+0x12>
 8006c9a:	2400      	movs	r4, #0
 8006c9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	4798      	blx	r3
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	e7e0      	b.n	8006c6a <_raise_r+0x12>

08006ca8 <raise>:
 8006ca8:	4b02      	ldr	r3, [pc, #8]	; (8006cb4 <raise+0xc>)
 8006caa:	4601      	mov	r1, r0
 8006cac:	6818      	ldr	r0, [r3, #0]
 8006cae:	f7ff bfd3 	b.w	8006c58 <_raise_r>
 8006cb2:	bf00      	nop
 8006cb4:	2000000c 	.word	0x2000000c

08006cb8 <_kill_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4d07      	ldr	r5, [pc, #28]	; (8006cd8 <_kill_r+0x20>)
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	4608      	mov	r0, r1
 8006cc2:	4611      	mov	r1, r2
 8006cc4:	602b      	str	r3, [r5, #0]
 8006cc6:	f7fb f873 	bl	8001db0 <_kill>
 8006cca:	1c43      	adds	r3, r0, #1
 8006ccc:	d102      	bne.n	8006cd4 <_kill_r+0x1c>
 8006cce:	682b      	ldr	r3, [r5, #0]
 8006cd0:	b103      	cbz	r3, 8006cd4 <_kill_r+0x1c>
 8006cd2:	6023      	str	r3, [r4, #0]
 8006cd4:	bd38      	pop	{r3, r4, r5, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000350 	.word	0x20000350

08006cdc <_getpid_r>:
 8006cdc:	f7fb b860 	b.w	8001da0 <_getpid>

08006ce0 <__sread>:
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce8:	f000 f894 	bl	8006e14 <_read_r>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	bfab      	itete	ge
 8006cf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cf2:	89a3      	ldrhlt	r3, [r4, #12]
 8006cf4:	181b      	addge	r3, r3, r0
 8006cf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cfa:	bfac      	ite	ge
 8006cfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cfe:	81a3      	strhlt	r3, [r4, #12]
 8006d00:	bd10      	pop	{r4, pc}

08006d02 <__swrite>:
 8006d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d06:	461f      	mov	r7, r3
 8006d08:	898b      	ldrh	r3, [r1, #12]
 8006d0a:	05db      	lsls	r3, r3, #23
 8006d0c:	4605      	mov	r5, r0
 8006d0e:	460c      	mov	r4, r1
 8006d10:	4616      	mov	r6, r2
 8006d12:	d505      	bpl.n	8006d20 <__swrite+0x1e>
 8006d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d18:	2302      	movs	r3, #2
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f000 f868 	bl	8006df0 <_lseek_r>
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d2a:	81a3      	strh	r3, [r4, #12]
 8006d2c:	4632      	mov	r2, r6
 8006d2e:	463b      	mov	r3, r7
 8006d30:	4628      	mov	r0, r5
 8006d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d36:	f000 b817 	b.w	8006d68 <_write_r>

08006d3a <__sseek>:
 8006d3a:	b510      	push	{r4, lr}
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d42:	f000 f855 	bl	8006df0 <_lseek_r>
 8006d46:	1c43      	adds	r3, r0, #1
 8006d48:	89a3      	ldrh	r3, [r4, #12]
 8006d4a:	bf15      	itete	ne
 8006d4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d56:	81a3      	strheq	r3, [r4, #12]
 8006d58:	bf18      	it	ne
 8006d5a:	81a3      	strhne	r3, [r4, #12]
 8006d5c:	bd10      	pop	{r4, pc}

08006d5e <__sclose>:
 8006d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d62:	f000 b813 	b.w	8006d8c <_close_r>
	...

08006d68 <_write_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	4d07      	ldr	r5, [pc, #28]	; (8006d88 <_write_r+0x20>)
 8006d6c:	4604      	mov	r4, r0
 8006d6e:	4608      	mov	r0, r1
 8006d70:	4611      	mov	r1, r2
 8006d72:	2200      	movs	r2, #0
 8006d74:	602a      	str	r2, [r5, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	f7fb f851 	bl	8001e1e <_write>
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	d102      	bne.n	8006d86 <_write_r+0x1e>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	b103      	cbz	r3, 8006d86 <_write_r+0x1e>
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	bd38      	pop	{r3, r4, r5, pc}
 8006d88:	20000350 	.word	0x20000350

08006d8c <_close_r>:
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	4d06      	ldr	r5, [pc, #24]	; (8006da8 <_close_r+0x1c>)
 8006d90:	2300      	movs	r3, #0
 8006d92:	4604      	mov	r4, r0
 8006d94:	4608      	mov	r0, r1
 8006d96:	602b      	str	r3, [r5, #0]
 8006d98:	f7fb f85d 	bl	8001e56 <_close>
 8006d9c:	1c43      	adds	r3, r0, #1
 8006d9e:	d102      	bne.n	8006da6 <_close_r+0x1a>
 8006da0:	682b      	ldr	r3, [r5, #0]
 8006da2:	b103      	cbz	r3, 8006da6 <_close_r+0x1a>
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	bd38      	pop	{r3, r4, r5, pc}
 8006da8:	20000350 	.word	0x20000350

08006dac <_fstat_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	4d07      	ldr	r5, [pc, #28]	; (8006dcc <_fstat_r+0x20>)
 8006db0:	2300      	movs	r3, #0
 8006db2:	4604      	mov	r4, r0
 8006db4:	4608      	mov	r0, r1
 8006db6:	4611      	mov	r1, r2
 8006db8:	602b      	str	r3, [r5, #0]
 8006dba:	f7fb f858 	bl	8001e6e <_fstat>
 8006dbe:	1c43      	adds	r3, r0, #1
 8006dc0:	d102      	bne.n	8006dc8 <_fstat_r+0x1c>
 8006dc2:	682b      	ldr	r3, [r5, #0]
 8006dc4:	b103      	cbz	r3, 8006dc8 <_fstat_r+0x1c>
 8006dc6:	6023      	str	r3, [r4, #0]
 8006dc8:	bd38      	pop	{r3, r4, r5, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000350 	.word	0x20000350

08006dd0 <_isatty_r>:
 8006dd0:	b538      	push	{r3, r4, r5, lr}
 8006dd2:	4d06      	ldr	r5, [pc, #24]	; (8006dec <_isatty_r+0x1c>)
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	4608      	mov	r0, r1
 8006dda:	602b      	str	r3, [r5, #0]
 8006ddc:	f7fb f857 	bl	8001e8e <_isatty>
 8006de0:	1c43      	adds	r3, r0, #1
 8006de2:	d102      	bne.n	8006dea <_isatty_r+0x1a>
 8006de4:	682b      	ldr	r3, [r5, #0]
 8006de6:	b103      	cbz	r3, 8006dea <_isatty_r+0x1a>
 8006de8:	6023      	str	r3, [r4, #0]
 8006dea:	bd38      	pop	{r3, r4, r5, pc}
 8006dec:	20000350 	.word	0x20000350

08006df0 <_lseek_r>:
 8006df0:	b538      	push	{r3, r4, r5, lr}
 8006df2:	4d07      	ldr	r5, [pc, #28]	; (8006e10 <_lseek_r+0x20>)
 8006df4:	4604      	mov	r4, r0
 8006df6:	4608      	mov	r0, r1
 8006df8:	4611      	mov	r1, r2
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	602a      	str	r2, [r5, #0]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f7fb f850 	bl	8001ea4 <_lseek>
 8006e04:	1c43      	adds	r3, r0, #1
 8006e06:	d102      	bne.n	8006e0e <_lseek_r+0x1e>
 8006e08:	682b      	ldr	r3, [r5, #0]
 8006e0a:	b103      	cbz	r3, 8006e0e <_lseek_r+0x1e>
 8006e0c:	6023      	str	r3, [r4, #0]
 8006e0e:	bd38      	pop	{r3, r4, r5, pc}
 8006e10:	20000350 	.word	0x20000350

08006e14 <_read_r>:
 8006e14:	b538      	push	{r3, r4, r5, lr}
 8006e16:	4d07      	ldr	r5, [pc, #28]	; (8006e34 <_read_r+0x20>)
 8006e18:	4604      	mov	r4, r0
 8006e1a:	4608      	mov	r0, r1
 8006e1c:	4611      	mov	r1, r2
 8006e1e:	2200      	movs	r2, #0
 8006e20:	602a      	str	r2, [r5, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	f7fa ffde 	bl	8001de4 <_read>
 8006e28:	1c43      	adds	r3, r0, #1
 8006e2a:	d102      	bne.n	8006e32 <_read_r+0x1e>
 8006e2c:	682b      	ldr	r3, [r5, #0]
 8006e2e:	b103      	cbz	r3, 8006e32 <_read_r+0x1e>
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	bd38      	pop	{r3, r4, r5, pc}
 8006e34:	20000350 	.word	0x20000350

08006e38 <atan2>:
 8006e38:	f000 b802 	b.w	8006e40 <__ieee754_atan2>
 8006e3c:	0000      	movs	r0, r0
	...

08006e40 <__ieee754_atan2>:
 8006e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e44:	ec57 6b11 	vmov	r6, r7, d1
 8006e48:	4273      	negs	r3, r6
 8006e4a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8006fd0 <__ieee754_atan2+0x190>
 8006e4e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8006e52:	4333      	orrs	r3, r6
 8006e54:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006e58:	4573      	cmp	r3, lr
 8006e5a:	ec51 0b10 	vmov	r0, r1, d0
 8006e5e:	ee11 8a10 	vmov	r8, s2
 8006e62:	d80a      	bhi.n	8006e7a <__ieee754_atan2+0x3a>
 8006e64:	4244      	negs	r4, r0
 8006e66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006e6a:	4304      	orrs	r4, r0
 8006e6c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006e70:	4574      	cmp	r4, lr
 8006e72:	ee10 9a10 	vmov	r9, s0
 8006e76:	468c      	mov	ip, r1
 8006e78:	d907      	bls.n	8006e8a <__ieee754_atan2+0x4a>
 8006e7a:	4632      	mov	r2, r6
 8006e7c:	463b      	mov	r3, r7
 8006e7e:	f7f9 fa05 	bl	800028c <__adddf3>
 8006e82:	ec41 0b10 	vmov	d0, r0, r1
 8006e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e8a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8006e8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006e92:	4334      	orrs	r4, r6
 8006e94:	d103      	bne.n	8006e9e <__ieee754_atan2+0x5e>
 8006e96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e9a:	f000 b89d 	b.w	8006fd8 <atan>
 8006e9e:	17bc      	asrs	r4, r7, #30
 8006ea0:	f004 0402 	and.w	r4, r4, #2
 8006ea4:	ea53 0909 	orrs.w	r9, r3, r9
 8006ea8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006eac:	d107      	bne.n	8006ebe <__ieee754_atan2+0x7e>
 8006eae:	2c02      	cmp	r4, #2
 8006eb0:	d060      	beq.n	8006f74 <__ieee754_atan2+0x134>
 8006eb2:	2c03      	cmp	r4, #3
 8006eb4:	d1e5      	bne.n	8006e82 <__ieee754_atan2+0x42>
 8006eb6:	a142      	add	r1, pc, #264	; (adr r1, 8006fc0 <__ieee754_atan2+0x180>)
 8006eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ebc:	e7e1      	b.n	8006e82 <__ieee754_atan2+0x42>
 8006ebe:	ea52 0808 	orrs.w	r8, r2, r8
 8006ec2:	d106      	bne.n	8006ed2 <__ieee754_atan2+0x92>
 8006ec4:	f1bc 0f00 	cmp.w	ip, #0
 8006ec8:	da5f      	bge.n	8006f8a <__ieee754_atan2+0x14a>
 8006eca:	a13f      	add	r1, pc, #252	; (adr r1, 8006fc8 <__ieee754_atan2+0x188>)
 8006ecc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ed0:	e7d7      	b.n	8006e82 <__ieee754_atan2+0x42>
 8006ed2:	4572      	cmp	r2, lr
 8006ed4:	d10f      	bne.n	8006ef6 <__ieee754_atan2+0xb6>
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006edc:	d107      	bne.n	8006eee <__ieee754_atan2+0xae>
 8006ede:	2c02      	cmp	r4, #2
 8006ee0:	d84c      	bhi.n	8006f7c <__ieee754_atan2+0x13c>
 8006ee2:	4b35      	ldr	r3, [pc, #212]	; (8006fb8 <__ieee754_atan2+0x178>)
 8006ee4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006ee8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006eec:	e7c9      	b.n	8006e82 <__ieee754_atan2+0x42>
 8006eee:	2c02      	cmp	r4, #2
 8006ef0:	d848      	bhi.n	8006f84 <__ieee754_atan2+0x144>
 8006ef2:	4b32      	ldr	r3, [pc, #200]	; (8006fbc <__ieee754_atan2+0x17c>)
 8006ef4:	e7f6      	b.n	8006ee4 <__ieee754_atan2+0xa4>
 8006ef6:	4573      	cmp	r3, lr
 8006ef8:	d0e4      	beq.n	8006ec4 <__ieee754_atan2+0x84>
 8006efa:	1a9b      	subs	r3, r3, r2
 8006efc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8006f00:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006f04:	da1e      	bge.n	8006f44 <__ieee754_atan2+0x104>
 8006f06:	2f00      	cmp	r7, #0
 8006f08:	da01      	bge.n	8006f0e <__ieee754_atan2+0xce>
 8006f0a:	323c      	adds	r2, #60	; 0x3c
 8006f0c:	db1e      	blt.n	8006f4c <__ieee754_atan2+0x10c>
 8006f0e:	4632      	mov	r2, r6
 8006f10:	463b      	mov	r3, r7
 8006f12:	f7f9 fc9b 	bl	800084c <__aeabi_ddiv>
 8006f16:	ec41 0b10 	vmov	d0, r0, r1
 8006f1a:	f000 f9fd 	bl	8007318 <fabs>
 8006f1e:	f000 f85b 	bl	8006fd8 <atan>
 8006f22:	ec51 0b10 	vmov	r0, r1, d0
 8006f26:	2c01      	cmp	r4, #1
 8006f28:	d013      	beq.n	8006f52 <__ieee754_atan2+0x112>
 8006f2a:	2c02      	cmp	r4, #2
 8006f2c:	d015      	beq.n	8006f5a <__ieee754_atan2+0x11a>
 8006f2e:	2c00      	cmp	r4, #0
 8006f30:	d0a7      	beq.n	8006e82 <__ieee754_atan2+0x42>
 8006f32:	a319      	add	r3, pc, #100	; (adr r3, 8006f98 <__ieee754_atan2+0x158>)
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	f7f9 f9a6 	bl	8000288 <__aeabi_dsub>
 8006f3c:	a318      	add	r3, pc, #96	; (adr r3, 8006fa0 <__ieee754_atan2+0x160>)
 8006f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f42:	e014      	b.n	8006f6e <__ieee754_atan2+0x12e>
 8006f44:	a118      	add	r1, pc, #96	; (adr r1, 8006fa8 <__ieee754_atan2+0x168>)
 8006f46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f4a:	e7ec      	b.n	8006f26 <__ieee754_atan2+0xe6>
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	2100      	movs	r1, #0
 8006f50:	e7e9      	b.n	8006f26 <__ieee754_atan2+0xe6>
 8006f52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f56:	4619      	mov	r1, r3
 8006f58:	e793      	b.n	8006e82 <__ieee754_atan2+0x42>
 8006f5a:	a30f      	add	r3, pc, #60	; (adr r3, 8006f98 <__ieee754_atan2+0x158>)
 8006f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f60:	f7f9 f992 	bl	8000288 <__aeabi_dsub>
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	a10d      	add	r1, pc, #52	; (adr r1, 8006fa0 <__ieee754_atan2+0x160>)
 8006f6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f6e:	f7f9 f98b 	bl	8000288 <__aeabi_dsub>
 8006f72:	e786      	b.n	8006e82 <__ieee754_atan2+0x42>
 8006f74:	a10a      	add	r1, pc, #40	; (adr r1, 8006fa0 <__ieee754_atan2+0x160>)
 8006f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f7a:	e782      	b.n	8006e82 <__ieee754_atan2+0x42>
 8006f7c:	a10c      	add	r1, pc, #48	; (adr r1, 8006fb0 <__ieee754_atan2+0x170>)
 8006f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f82:	e77e      	b.n	8006e82 <__ieee754_atan2+0x42>
 8006f84:	2000      	movs	r0, #0
 8006f86:	2100      	movs	r1, #0
 8006f88:	e77b      	b.n	8006e82 <__ieee754_atan2+0x42>
 8006f8a:	a107      	add	r1, pc, #28	; (adr r1, 8006fa8 <__ieee754_atan2+0x168>)
 8006f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f90:	e777      	b.n	8006e82 <__ieee754_atan2+0x42>
 8006f92:	bf00      	nop
 8006f94:	f3af 8000 	nop.w
 8006f98:	33145c07 	.word	0x33145c07
 8006f9c:	3ca1a626 	.word	0x3ca1a626
 8006fa0:	54442d18 	.word	0x54442d18
 8006fa4:	400921fb 	.word	0x400921fb
 8006fa8:	54442d18 	.word	0x54442d18
 8006fac:	3ff921fb 	.word	0x3ff921fb
 8006fb0:	54442d18 	.word	0x54442d18
 8006fb4:	3fe921fb 	.word	0x3fe921fb
 8006fb8:	08007768 	.word	0x08007768
 8006fbc:	08007780 	.word	0x08007780
 8006fc0:	54442d18 	.word	0x54442d18
 8006fc4:	c00921fb 	.word	0xc00921fb
 8006fc8:	54442d18 	.word	0x54442d18
 8006fcc:	bff921fb 	.word	0xbff921fb
 8006fd0:	7ff00000 	.word	0x7ff00000
 8006fd4:	00000000 	.word	0x00000000

08006fd8 <atan>:
 8006fd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fdc:	ec55 4b10 	vmov	r4, r5, d0
 8006fe0:	4bc3      	ldr	r3, [pc, #780]	; (80072f0 <atan+0x318>)
 8006fe2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006fe6:	429e      	cmp	r6, r3
 8006fe8:	46ab      	mov	fp, r5
 8006fea:	dd18      	ble.n	800701e <atan+0x46>
 8006fec:	4bc1      	ldr	r3, [pc, #772]	; (80072f4 <atan+0x31c>)
 8006fee:	429e      	cmp	r6, r3
 8006ff0:	dc01      	bgt.n	8006ff6 <atan+0x1e>
 8006ff2:	d109      	bne.n	8007008 <atan+0x30>
 8006ff4:	b144      	cbz	r4, 8007008 <atan+0x30>
 8006ff6:	4622      	mov	r2, r4
 8006ff8:	462b      	mov	r3, r5
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	4629      	mov	r1, r5
 8006ffe:	f7f9 f945 	bl	800028c <__adddf3>
 8007002:	4604      	mov	r4, r0
 8007004:	460d      	mov	r5, r1
 8007006:	e006      	b.n	8007016 <atan+0x3e>
 8007008:	f1bb 0f00 	cmp.w	fp, #0
 800700c:	f300 8131 	bgt.w	8007272 <atan+0x29a>
 8007010:	a59b      	add	r5, pc, #620	; (adr r5, 8007280 <atan+0x2a8>)
 8007012:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007016:	ec45 4b10 	vmov	d0, r4, r5
 800701a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800701e:	4bb6      	ldr	r3, [pc, #728]	; (80072f8 <atan+0x320>)
 8007020:	429e      	cmp	r6, r3
 8007022:	dc14      	bgt.n	800704e <atan+0x76>
 8007024:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007028:	429e      	cmp	r6, r3
 800702a:	dc0d      	bgt.n	8007048 <atan+0x70>
 800702c:	a396      	add	r3, pc, #600	; (adr r3, 8007288 <atan+0x2b0>)
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	ee10 0a10 	vmov	r0, s0
 8007036:	4629      	mov	r1, r5
 8007038:	f7f9 f928 	bl	800028c <__adddf3>
 800703c:	4baf      	ldr	r3, [pc, #700]	; (80072fc <atan+0x324>)
 800703e:	2200      	movs	r2, #0
 8007040:	f7f9 fd6a 	bl	8000b18 <__aeabi_dcmpgt>
 8007044:	2800      	cmp	r0, #0
 8007046:	d1e6      	bne.n	8007016 <atan+0x3e>
 8007048:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800704c:	e02b      	b.n	80070a6 <atan+0xce>
 800704e:	f000 f963 	bl	8007318 <fabs>
 8007052:	4bab      	ldr	r3, [pc, #684]	; (8007300 <atan+0x328>)
 8007054:	429e      	cmp	r6, r3
 8007056:	ec55 4b10 	vmov	r4, r5, d0
 800705a:	f300 80bf 	bgt.w	80071dc <atan+0x204>
 800705e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007062:	429e      	cmp	r6, r3
 8007064:	f300 80a0 	bgt.w	80071a8 <atan+0x1d0>
 8007068:	ee10 2a10 	vmov	r2, s0
 800706c:	ee10 0a10 	vmov	r0, s0
 8007070:	462b      	mov	r3, r5
 8007072:	4629      	mov	r1, r5
 8007074:	f7f9 f90a 	bl	800028c <__adddf3>
 8007078:	4ba0      	ldr	r3, [pc, #640]	; (80072fc <atan+0x324>)
 800707a:	2200      	movs	r2, #0
 800707c:	f7f9 f904 	bl	8000288 <__aeabi_dsub>
 8007080:	2200      	movs	r2, #0
 8007082:	4606      	mov	r6, r0
 8007084:	460f      	mov	r7, r1
 8007086:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800708a:	4620      	mov	r0, r4
 800708c:	4629      	mov	r1, r5
 800708e:	f7f9 f8fd 	bl	800028c <__adddf3>
 8007092:	4602      	mov	r2, r0
 8007094:	460b      	mov	r3, r1
 8007096:	4630      	mov	r0, r6
 8007098:	4639      	mov	r1, r7
 800709a:	f7f9 fbd7 	bl	800084c <__aeabi_ddiv>
 800709e:	f04f 0a00 	mov.w	sl, #0
 80070a2:	4604      	mov	r4, r0
 80070a4:	460d      	mov	r5, r1
 80070a6:	4622      	mov	r2, r4
 80070a8:	462b      	mov	r3, r5
 80070aa:	4620      	mov	r0, r4
 80070ac:	4629      	mov	r1, r5
 80070ae:	f7f9 faa3 	bl	80005f8 <__aeabi_dmul>
 80070b2:	4602      	mov	r2, r0
 80070b4:	460b      	mov	r3, r1
 80070b6:	4680      	mov	r8, r0
 80070b8:	4689      	mov	r9, r1
 80070ba:	f7f9 fa9d 	bl	80005f8 <__aeabi_dmul>
 80070be:	a374      	add	r3, pc, #464	; (adr r3, 8007290 <atan+0x2b8>)
 80070c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c4:	4606      	mov	r6, r0
 80070c6:	460f      	mov	r7, r1
 80070c8:	f7f9 fa96 	bl	80005f8 <__aeabi_dmul>
 80070cc:	a372      	add	r3, pc, #456	; (adr r3, 8007298 <atan+0x2c0>)
 80070ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d2:	f7f9 f8db 	bl	800028c <__adddf3>
 80070d6:	4632      	mov	r2, r6
 80070d8:	463b      	mov	r3, r7
 80070da:	f7f9 fa8d 	bl	80005f8 <__aeabi_dmul>
 80070de:	a370      	add	r3, pc, #448	; (adr r3, 80072a0 <atan+0x2c8>)
 80070e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e4:	f7f9 f8d2 	bl	800028c <__adddf3>
 80070e8:	4632      	mov	r2, r6
 80070ea:	463b      	mov	r3, r7
 80070ec:	f7f9 fa84 	bl	80005f8 <__aeabi_dmul>
 80070f0:	a36d      	add	r3, pc, #436	; (adr r3, 80072a8 <atan+0x2d0>)
 80070f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f6:	f7f9 f8c9 	bl	800028c <__adddf3>
 80070fa:	4632      	mov	r2, r6
 80070fc:	463b      	mov	r3, r7
 80070fe:	f7f9 fa7b 	bl	80005f8 <__aeabi_dmul>
 8007102:	a36b      	add	r3, pc, #428	; (adr r3, 80072b0 <atan+0x2d8>)
 8007104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007108:	f7f9 f8c0 	bl	800028c <__adddf3>
 800710c:	4632      	mov	r2, r6
 800710e:	463b      	mov	r3, r7
 8007110:	f7f9 fa72 	bl	80005f8 <__aeabi_dmul>
 8007114:	a368      	add	r3, pc, #416	; (adr r3, 80072b8 <atan+0x2e0>)
 8007116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711a:	f7f9 f8b7 	bl	800028c <__adddf3>
 800711e:	4642      	mov	r2, r8
 8007120:	464b      	mov	r3, r9
 8007122:	f7f9 fa69 	bl	80005f8 <__aeabi_dmul>
 8007126:	a366      	add	r3, pc, #408	; (adr r3, 80072c0 <atan+0x2e8>)
 8007128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712c:	4680      	mov	r8, r0
 800712e:	4689      	mov	r9, r1
 8007130:	4630      	mov	r0, r6
 8007132:	4639      	mov	r1, r7
 8007134:	f7f9 fa60 	bl	80005f8 <__aeabi_dmul>
 8007138:	a363      	add	r3, pc, #396	; (adr r3, 80072c8 <atan+0x2f0>)
 800713a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713e:	f7f9 f8a3 	bl	8000288 <__aeabi_dsub>
 8007142:	4632      	mov	r2, r6
 8007144:	463b      	mov	r3, r7
 8007146:	f7f9 fa57 	bl	80005f8 <__aeabi_dmul>
 800714a:	a361      	add	r3, pc, #388	; (adr r3, 80072d0 <atan+0x2f8>)
 800714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007150:	f7f9 f89a 	bl	8000288 <__aeabi_dsub>
 8007154:	4632      	mov	r2, r6
 8007156:	463b      	mov	r3, r7
 8007158:	f7f9 fa4e 	bl	80005f8 <__aeabi_dmul>
 800715c:	a35e      	add	r3, pc, #376	; (adr r3, 80072d8 <atan+0x300>)
 800715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007162:	f7f9 f891 	bl	8000288 <__aeabi_dsub>
 8007166:	4632      	mov	r2, r6
 8007168:	463b      	mov	r3, r7
 800716a:	f7f9 fa45 	bl	80005f8 <__aeabi_dmul>
 800716e:	a35c      	add	r3, pc, #368	; (adr r3, 80072e0 <atan+0x308>)
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	f7f9 f888 	bl	8000288 <__aeabi_dsub>
 8007178:	4632      	mov	r2, r6
 800717a:	463b      	mov	r3, r7
 800717c:	f7f9 fa3c 	bl	80005f8 <__aeabi_dmul>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4640      	mov	r0, r8
 8007186:	4649      	mov	r1, r9
 8007188:	f7f9 f880 	bl	800028c <__adddf3>
 800718c:	4622      	mov	r2, r4
 800718e:	462b      	mov	r3, r5
 8007190:	f7f9 fa32 	bl	80005f8 <__aeabi_dmul>
 8007194:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	d14b      	bne.n	8007236 <atan+0x25e>
 800719e:	4620      	mov	r0, r4
 80071a0:	4629      	mov	r1, r5
 80071a2:	f7f9 f871 	bl	8000288 <__aeabi_dsub>
 80071a6:	e72c      	b.n	8007002 <atan+0x2a>
 80071a8:	ee10 0a10 	vmov	r0, s0
 80071ac:	4b53      	ldr	r3, [pc, #332]	; (80072fc <atan+0x324>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	4629      	mov	r1, r5
 80071b2:	f7f9 f869 	bl	8000288 <__aeabi_dsub>
 80071b6:	4b51      	ldr	r3, [pc, #324]	; (80072fc <atan+0x324>)
 80071b8:	4606      	mov	r6, r0
 80071ba:	460f      	mov	r7, r1
 80071bc:	2200      	movs	r2, #0
 80071be:	4620      	mov	r0, r4
 80071c0:	4629      	mov	r1, r5
 80071c2:	f7f9 f863 	bl	800028c <__adddf3>
 80071c6:	4602      	mov	r2, r0
 80071c8:	460b      	mov	r3, r1
 80071ca:	4630      	mov	r0, r6
 80071cc:	4639      	mov	r1, r7
 80071ce:	f7f9 fb3d 	bl	800084c <__aeabi_ddiv>
 80071d2:	f04f 0a01 	mov.w	sl, #1
 80071d6:	4604      	mov	r4, r0
 80071d8:	460d      	mov	r5, r1
 80071da:	e764      	b.n	80070a6 <atan+0xce>
 80071dc:	4b49      	ldr	r3, [pc, #292]	; (8007304 <atan+0x32c>)
 80071de:	429e      	cmp	r6, r3
 80071e0:	da1d      	bge.n	800721e <atan+0x246>
 80071e2:	ee10 0a10 	vmov	r0, s0
 80071e6:	4b48      	ldr	r3, [pc, #288]	; (8007308 <atan+0x330>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	4629      	mov	r1, r5
 80071ec:	f7f9 f84c 	bl	8000288 <__aeabi_dsub>
 80071f0:	4b45      	ldr	r3, [pc, #276]	; (8007308 <atan+0x330>)
 80071f2:	4606      	mov	r6, r0
 80071f4:	460f      	mov	r7, r1
 80071f6:	2200      	movs	r2, #0
 80071f8:	4620      	mov	r0, r4
 80071fa:	4629      	mov	r1, r5
 80071fc:	f7f9 f9fc 	bl	80005f8 <__aeabi_dmul>
 8007200:	4b3e      	ldr	r3, [pc, #248]	; (80072fc <atan+0x324>)
 8007202:	2200      	movs	r2, #0
 8007204:	f7f9 f842 	bl	800028c <__adddf3>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4630      	mov	r0, r6
 800720e:	4639      	mov	r1, r7
 8007210:	f7f9 fb1c 	bl	800084c <__aeabi_ddiv>
 8007214:	f04f 0a02 	mov.w	sl, #2
 8007218:	4604      	mov	r4, r0
 800721a:	460d      	mov	r5, r1
 800721c:	e743      	b.n	80070a6 <atan+0xce>
 800721e:	462b      	mov	r3, r5
 8007220:	ee10 2a10 	vmov	r2, s0
 8007224:	4939      	ldr	r1, [pc, #228]	; (800730c <atan+0x334>)
 8007226:	2000      	movs	r0, #0
 8007228:	f7f9 fb10 	bl	800084c <__aeabi_ddiv>
 800722c:	f04f 0a03 	mov.w	sl, #3
 8007230:	4604      	mov	r4, r0
 8007232:	460d      	mov	r5, r1
 8007234:	e737      	b.n	80070a6 <atan+0xce>
 8007236:	4b36      	ldr	r3, [pc, #216]	; (8007310 <atan+0x338>)
 8007238:	4e36      	ldr	r6, [pc, #216]	; (8007314 <atan+0x33c>)
 800723a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800723e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007242:	e9da 2300 	ldrd	r2, r3, [sl]
 8007246:	f7f9 f81f 	bl	8000288 <__aeabi_dsub>
 800724a:	4622      	mov	r2, r4
 800724c:	462b      	mov	r3, r5
 800724e:	f7f9 f81b 	bl	8000288 <__aeabi_dsub>
 8007252:	4602      	mov	r2, r0
 8007254:	460b      	mov	r3, r1
 8007256:	e9d6 0100 	ldrd	r0, r1, [r6]
 800725a:	f7f9 f815 	bl	8000288 <__aeabi_dsub>
 800725e:	f1bb 0f00 	cmp.w	fp, #0
 8007262:	4604      	mov	r4, r0
 8007264:	460d      	mov	r5, r1
 8007266:	f6bf aed6 	bge.w	8007016 <atan+0x3e>
 800726a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800726e:	461d      	mov	r5, r3
 8007270:	e6d1      	b.n	8007016 <atan+0x3e>
 8007272:	a51d      	add	r5, pc, #116	; (adr r5, 80072e8 <atan+0x310>)
 8007274:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007278:	e6cd      	b.n	8007016 <atan+0x3e>
 800727a:	bf00      	nop
 800727c:	f3af 8000 	nop.w
 8007280:	54442d18 	.word	0x54442d18
 8007284:	bff921fb 	.word	0xbff921fb
 8007288:	8800759c 	.word	0x8800759c
 800728c:	7e37e43c 	.word	0x7e37e43c
 8007290:	e322da11 	.word	0xe322da11
 8007294:	3f90ad3a 	.word	0x3f90ad3a
 8007298:	24760deb 	.word	0x24760deb
 800729c:	3fa97b4b 	.word	0x3fa97b4b
 80072a0:	a0d03d51 	.word	0xa0d03d51
 80072a4:	3fb10d66 	.word	0x3fb10d66
 80072a8:	c54c206e 	.word	0xc54c206e
 80072ac:	3fb745cd 	.word	0x3fb745cd
 80072b0:	920083ff 	.word	0x920083ff
 80072b4:	3fc24924 	.word	0x3fc24924
 80072b8:	5555550d 	.word	0x5555550d
 80072bc:	3fd55555 	.word	0x3fd55555
 80072c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80072c4:	bfa2b444 	.word	0xbfa2b444
 80072c8:	52defd9a 	.word	0x52defd9a
 80072cc:	3fadde2d 	.word	0x3fadde2d
 80072d0:	af749a6d 	.word	0xaf749a6d
 80072d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80072d8:	fe231671 	.word	0xfe231671
 80072dc:	3fbc71c6 	.word	0x3fbc71c6
 80072e0:	9998ebc4 	.word	0x9998ebc4
 80072e4:	3fc99999 	.word	0x3fc99999
 80072e8:	54442d18 	.word	0x54442d18
 80072ec:	3ff921fb 	.word	0x3ff921fb
 80072f0:	440fffff 	.word	0x440fffff
 80072f4:	7ff00000 	.word	0x7ff00000
 80072f8:	3fdbffff 	.word	0x3fdbffff
 80072fc:	3ff00000 	.word	0x3ff00000
 8007300:	3ff2ffff 	.word	0x3ff2ffff
 8007304:	40038000 	.word	0x40038000
 8007308:	3ff80000 	.word	0x3ff80000
 800730c:	bff00000 	.word	0xbff00000
 8007310:	080077b8 	.word	0x080077b8
 8007314:	08007798 	.word	0x08007798

08007318 <fabs>:
 8007318:	ec51 0b10 	vmov	r0, r1, d0
 800731c:	ee10 2a10 	vmov	r2, s0
 8007320:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007324:	ec43 2b10 	vmov	d0, r2, r3
 8007328:	4770      	bx	lr
	...

0800732c <_init>:
 800732c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732e:	bf00      	nop
 8007330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007332:	bc08      	pop	{r3}
 8007334:	469e      	mov	lr, r3
 8007336:	4770      	bx	lr

08007338 <_fini>:
 8007338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733a:	bf00      	nop
 800733c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800733e:	bc08      	pop	{r3}
 8007340:	469e      	mov	lr, r3
 8007342:	4770      	bx	lr
